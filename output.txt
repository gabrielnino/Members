

=== FILE: F:\Members\Api\Migrations\20250911030046_InitialCreate.cs ===

﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;
#nullable disable
namespace Api.Migrations
{
public partial class InitialCreate : Migration
{
protected override void Up(MigrationBuilder migrationBuilder)
{
migrationBuilder.CreateTable(
name: "ErrorLogs",
columns: table => new
{
Id = table.Column<string>(type: "TEXT", nullable: false),
Timestamp = table.Column<DateTime>(type: "TEXT", nullable: false),
Level = table.Column<string>(type: "TEXT", maxLength: 150, nullable: false),
Message = table.Column<string>(type: "TEXT", maxLength: 150, nullable: false),
ExceptionType = table.Column<string>(type: "TEXT", maxLength: 150, nullable: false),
StackTrace = table.Column<string>(type: "TEXT", maxLength: 150, nullable: false),
Context = table.Column<string>(type: "TEXT", maxLength: 150, nullable: false),
Active = table.Column<bool>(type: "INTEGER", nullable: false)
},
constraints: table =>
{
table.PrimaryKey("PK_ErrorLogs", x => x.Id);
});
migrationBuilder.CreateTable(
name: "Invoices",
columns: table => new
{
Id = table.Column<string>(type: "TEXT", nullable: false),
InvoiceNumber = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
InvoiceDate = table.Column<DateTime>(type: "TEXT", nullable: false),
CustomerName = table.Column<string>(type: "TEXT", maxLength: 150, nullable: false),
TotalAmount = table.Column<decimal>(type: "TEXT", nullable: false),
Active = table.Column<bool>(type: "INTEGER", nullable: false)
},
constraints: table =>
{
table.PrimaryKey("PK_Invoices", x => x.Id);
});
migrationBuilder.CreateTable(
name: "Profiles",
columns: table => new
{
Id = table.Column<string>(type: "TEXT", nullable: false),
FullName = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
Headline = table.Column<string>(type: "TEXT", maxLength: 300, nullable: false),
Location = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
CurrentCompany = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
ProfileImageUrl = table.Column<string>(type: "TEXT", maxLength: 500, nullable: false),
BackgroundImageUrl = table.Column<string>(type: "TEXT", maxLength: 500, nullable: false),
ConnectionDegree = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
Connections = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
Followers = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
AboutText = table.Column<string>(type: "TEXT", maxLength: 5000, nullable: false),
Url = table.Column<string>(type: "TEXT", nullable: false),
Active = table.Column<bool>(type: "INTEGER", nullable: false)
},
constraints: table =>
{
table.PrimaryKey("PK_Profiles", x => x.Id);
});
migrationBuilder.CreateTable(
name: "Users",
columns: table => new
{
Id = table.Column<string>(type: "TEXT", nullable: false),
Name = table.Column<string>(type: "TEXT", maxLength: 100, nullable: false),
Lastname = table.Column<string>(type: "TEXT", maxLength: 100, nullable: false),
Email = table.Column<string>(type: "TEXT", maxLength: 100, nullable: false),
Active = table.Column<bool>(type: "INTEGER", nullable: false)
},
constraints: table =>
{
table.PrimaryKey("PK_Users", x => x.Id);
});
migrationBuilder.CreateTable(
name: "Products",
columns: table => new
{
Id = table.Column<string>(type: "TEXT", nullable: false),
Name = table.Column<string>(type: "TEXT", maxLength: 100, nullable: false),
Description = table.Column<string>(type: "TEXT", maxLength: 500, nullable: true),
Price = table.Column<decimal>(type: "TEXT", nullable: false),
InvoiceId = table.Column<string>(type: "TEXT", nullable: false),
Active = table.Column<bool>(type: "INTEGER", nullable: false)
},
constraints: table =>
{
table.PrimaryKey("PK_Products", x => x.Id);
table.ForeignKey(
name: "FK_Products_Invoices_InvoiceId",
column: x => x.InvoiceId,
principalTable: "Invoices",
principalColumn: "Id",
onDelete: ReferentialAction.Cascade);
});
migrationBuilder.CreateTable(
name: "Communications",
columns: table => new
{
Id = table.Column<string>(type: "TEXT", nullable: false),
ProfileId = table.Column<string>(type: "TEXT", nullable: false),
Content = table.Column<string>(type: "TEXT", nullable: false),
Experiment = table.Column<string>(type: "TEXT", nullable: false),
FeedbackNotes = table.Column<string>(type: "TEXT", nullable: true),
CreatedAt = table.Column<DateTimeOffset>(type: "TEXT", nullable: false),
UpdatedAt = table.Column<DateTimeOffset>(type: "TEXT", nullable: false),
Discriminator = table.Column<string>(type: "TEXT", maxLength: 21, nullable: false),
SentAt = table.Column<DateTimeOffset>(type: "TEXT", nullable: true),
CompletedAt = table.Column<DateTimeOffset>(type: "TEXT", nullable: true),
Status = table.Column<string>(type: "TEXT", nullable: true),
DeliveredAt = table.Column<DateTimeOffset>(type: "TEXT", nullable: true),
ReadAt = table.Column<DateTimeOffset>(type: "TEXT", nullable: true),
MessageInteraction_Status = table.Column<string>(type: "TEXT", nullable: true),
Active = table.Column<bool>(type: "INTEGER", nullable: false)
},
constraints: table =>
{
table.PrimaryKey("PK_Communications", x => x.Id);
table.ForeignKey(
name: "FK_Communications_Profiles_ProfileId",
column: x => x.ProfileId,
principalTable: "Profiles",
principalColumn: "Id",
onDelete: ReferentialAction.Cascade);
});
migrationBuilder.CreateTable(
name: "Educations",
columns: table => new
{
Id = table.Column<string>(type: "TEXT", nullable: false),
ProfileId = table.Column<string>(type: "TEXT", nullable: false),
School = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
SchoolUrl = table.Column<string>(type: "TEXT", maxLength: 500, nullable: false),
LogoUrl = table.Column<string>(type: "TEXT", maxLength: 500, nullable: false),
LogoAlt = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
Degree = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
Field = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
DateRange = table.Column<string>(type: "TEXT", maxLength: 100, nullable: false),
Description = table.Column<string>(type: "TEXT", maxLength: 2000, nullable: false),
Active = table.Column<bool>(type: "INTEGER", nullable: false)
},
constraints: table =>
{
table.PrimaryKey("PK_Educations", x => x.Id);
table.ForeignKey(
name: "FK_Educations_Profiles_ProfileId",
column: x => x.ProfileId,
principalTable: "Profiles",
principalColumn: "Id",
onDelete: ReferentialAction.Cascade);
});
migrationBuilder.CreateTable(
name: "Experiences",
columns: table => new
{
Id = table.Column<string>(type: "TEXT", nullable: false),
ProfileId = table.Column<string>(type: "TEXT", nullable: false),
Company = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
CompanyUrl = table.Column<string>(type: "TEXT", maxLength: 500, nullable: false),
CompanyLogoUrl = table.Column<string>(type: "TEXT", maxLength: 500, nullable: false),
CompanyLogoAlt = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
EmploymentSummary = table.Column<string>(type: "TEXT", maxLength: 150, nullable: false),
Location = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
Active = table.Column<bool>(type: "INTEGER", nullable: false)
},
constraints: table =>
{
table.PrimaryKey("PK_Experiences", x => x.Id);
table.ForeignKey(
name: "FK_Experiences_Profiles_ProfileId",
column: x => x.ProfileId,
principalTable: "Profiles",
principalColumn: "Id",
onDelete: ReferentialAction.Cascade);
});
migrationBuilder.CreateTable(
name: "ExperienceRoles",
columns: table => new
{
Id = table.Column<string>(type: "TEXT", nullable: false),
ExperienceId = table.Column<string>(type: "TEXT", nullable: false),
Title = table.Column<string>(type: "TEXT", maxLength: 150, nullable: false),
DateRange = table.Column<string>(type: "TEXT", maxLength: 100, nullable: false),
WorkArrangement = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
Description = table.Column<string>(type: "TEXT", maxLength: 2000, nullable: false),
ContextualSkills = table.Column<string>(type: "TEXT", maxLength: 200, nullable: false),
Active = table.Column<bool>(type: "INTEGER", nullable: false)
},
constraints: table =>
{
table.PrimaryKey("PK_ExperienceRoles", x => x.Id);
table.ForeignKey(
name: "FK_ExperienceRoles_Experiences_ExperienceId",
column: x => x.ExperienceId,
principalTable: "Experiences",
principalColumn: "Id",
onDelete: ReferentialAction.Cascade);
});
migrationBuilder.CreateIndex(
name: "IX_Communications_ProfileId",
table: "Communications",
column: "ProfileId");
migrationBuilder.CreateIndex(
name: "IX_Educations_ProfileId",
table: "Educations",
column: "ProfileId");
migrationBuilder.CreateIndex(
name: "IX_ExperienceRoles_ExperienceId",
table: "ExperienceRoles",
column: "ExperienceId");
migrationBuilder.CreateIndex(
name: "IX_Experiences_ProfileId",
table: "Experiences",
column: "ProfileId");
migrationBuilder.CreateIndex(
name: "IX_Products_InvoiceId",
table: "Products",
column: "InvoiceId");
migrationBuilder.CreateIndex(
name: "IX_Profiles_FullName",
table: "Profiles",
column: "FullName");
migrationBuilder.CreateIndex(
name: "UC_Profiles_Url",
table: "Profiles",
column: "Url",
unique: true);
migrationBuilder.CreateIndex(
name: "UC_Users_Email",
table: "Users",
column: "Email",
unique: true);
}
protected override void Down(MigrationBuilder migrationBuilder)
{
migrationBuilder.DropTable(
name: "Communications");
migrationBuilder.DropTable(
name: "Educations");
migrationBuilder.DropTable(
name: "ErrorLogs");
migrationBuilder.DropTable(
name: "ExperienceRoles");
migrationBuilder.DropTable(
name: "Products");
migrationBuilder.DropTable(
name: "Users");
migrationBuilder.DropTable(
name: "Experiences");
migrationBuilder.DropTable(
name: "Invoices");
migrationBuilder.DropTable(
name: "Profiles");
}
}
}

=== FILE: F:\Members\Api\Migrations\20250911030046_InitialCreate.Designer.cs ===

﻿
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context.Implementation;
#nullable disable
namespace Api.Migrations
{
[DbContext(typeof(DataContext))]
[Migration("20250911030046_InitialCreate")]
partial class InitialCreate
{
protected override void BuildTargetModel(ModelBuilder modelBuilder)
{
#pragma warning disable 612, 618
modelBuilder.HasAnnotation("ProductVersion", "9.0.5");
modelBuilder.Entity("Autodesk.Domain.Invoice", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("CustomerName")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<DateTime>("InvoiceDate")
.HasColumnType("TEXT");
b.Property<string>("InvoiceNumber")
.IsRequired()
.HasMaxLength(50)
.HasColumnType("TEXT");
b.Property<decimal>("TotalAmount")
.HasColumnType("TEXT");
b.HasKey("Id");
b.ToTable("Invoices", (string)null);
});
modelBuilder.Entity("Autodesk.Domain.Product", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("Description")
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("InvoiceId")
.IsRequired()
.HasColumnType("TEXT");
b.Property<string>("Name")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.Property<decimal>("Price")
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex("InvoiceId");
b.ToTable("Products", (string)null);
});
modelBuilder.Entity("Autodesk.Domain.User", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("Email")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.Property<string>("Lastname")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.Property<string>("Name")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex(new[] { "Email" }, "UC_Users_Email")
.IsUnique();
b.ToTable("Users", (string)null);
});
modelBuilder.Entity("Domain.ErrorLog", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("Context")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("ExceptionType")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("Level")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("Message")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("StackTrace")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<DateTime>("Timestamp")
.HasColumnType("TEXT");
b.HasKey("Id");
b.ToTable("ErrorLogs", (string)null);
});
modelBuilder.Entity("LiveNetwork.Domain.Education", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("DateRange")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.Property<string>("Degree")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("Description")
.IsRequired()
.HasMaxLength(2000)
.HasColumnType("TEXT");
b.Property<string>("Field")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("LogoAlt")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("LogoUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("ProfileId")
.IsRequired()
.HasColumnType("TEXT");
b.Property<string>("School")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("SchoolUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex("ProfileId")
.HasDatabaseName("IX_Educations_ProfileId");
b.ToTable("Educations", (string)null);
});
modelBuilder.Entity("LiveNetwork.Domain.Experience", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("Company")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("CompanyLogoAlt")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("CompanyLogoUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("CompanyUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("EmploymentSummary")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("Location")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("ProfileId")
.IsRequired()
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex("ProfileId")
.HasDatabaseName("IX_Experiences_ProfileId");
b.ToTable("Experiences", (string)null);
});
modelBuilder.Entity("LiveNetwork.Domain.ExperienceRole", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("ContextualSkills")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("DateRange")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.Property<string>("Description")
.IsRequired()
.HasMaxLength(2000)
.HasColumnType("TEXT");
b.Property<string>("ExperienceId")
.IsRequired()
.HasColumnType("TEXT");
b.Property<string>("Title")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("WorkArrangement")
.IsRequired()
.HasMaxLength(50)
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex("ExperienceId")
.HasDatabaseName("IX_ExperienceRoles_ExperienceId");
b.ToTable("ExperienceRoles", (string)null);
});
modelBuilder.Entity("LiveNetwork.Domain.Interaction", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("Content")
.IsRequired()
.HasColumnType("TEXT");
b.Property<DateTimeOffset>("CreatedAt")
.HasColumnType("TEXT");
b.Property<string>("Discriminator")
.IsRequired()
.HasMaxLength(21)
.HasColumnType("TEXT");
b.Property<string>("Experiment")
.IsRequired()
.HasColumnType("TEXT");
b.Property<string>("FeedbackNotes")
.HasColumnType("TEXT");
b.Property<string>("ProfileId")
.IsRequired()
.HasColumnType("TEXT");
b.Property<DateTimeOffset>("UpdatedAt")
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex("ProfileId");
b.ToTable("Communications", (string)null);
b.HasDiscriminator().HasValue("Interaction");
b.UseTphMappingStrategy();
});
modelBuilder.Entity("LiveNetwork.Domain.Profile", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<string>("AboutText")
.IsRequired()
.HasMaxLength(5000)
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("BackgroundImageUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("ConnectionDegree")
.IsRequired()
.HasMaxLength(50)
.HasColumnType("TEXT");
b.Property<string>("Connections")
.IsRequired()
.HasMaxLength(50)
.HasColumnType("TEXT");
b.Property<string>("CurrentCompany")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("Followers")
.IsRequired()
.HasMaxLength(50)
.HasColumnType("TEXT");
b.Property<string>("FullName")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("Headline")
.IsRequired()
.HasMaxLength(300)
.HasColumnType("TEXT");
b.Property<string>("Location")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("ProfileImageUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("Url")
.IsRequired()
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex(new[] { "FullName" }, "IX_Profiles_FullName");
b.HasIndex(new[] { "Url" }, "UC_Profiles_Url")
.IsUnique();
b.ToTable("Profiles", (string)null);
});
modelBuilder.Entity("LiveNetwork.Domain.ConnectionInvite", b =>
{
b.HasBaseType("LiveNetwork.Domain.Interaction");
b.Property<DateTimeOffset?>("CompletedAt")
.HasColumnType("TEXT");
b.Property<DateTimeOffset?>("SentAt")
.HasColumnType("TEXT");
b.Property<string>("Status")
.IsRequired()
.HasColumnType("TEXT");
b.HasDiscriminator().HasValue("ConnectionInvite");
});
modelBuilder.Entity("LiveNetwork.Domain.MessageInteraction", b =>
{
b.HasBaseType("LiveNetwork.Domain.Interaction");
b.Property<DateTimeOffset?>("DeliveredAt")
.HasColumnType("TEXT");
b.Property<DateTimeOffset?>("ReadAt")
.HasColumnType("TEXT");
b.Property<string>("Status")
.IsRequired()
.HasColumnType("TEXT");
b.ToTable("Communications", t =>
{
t.Property("Status")
.HasColumnName("MessageInteraction_Status");
});
b.HasDiscriminator().HasValue("MessageInteraction");
});
modelBuilder.Entity("Autodesk.Domain.Product", b =>
{
b.HasOne("Autodesk.Domain.Invoice", null)
.WithMany("Products")
.HasForeignKey("InvoiceId")
.OnDelete(DeleteBehavior.Cascade);
});
modelBuilder.Entity("LiveNetwork.Domain.Education", b =>
{
b.HasOne("LiveNetwork.Domain.Profile", "Profile")
.WithMany("Educations")
.HasForeignKey("ProfileId")
.OnDelete(DeleteBehavior.Cascade)
.IsRequired();
b.Navigation("Profile");
});
modelBuilder.Entity("LiveNetwork.Domain.Experience", b =>
{
b.HasOne("LiveNetwork.Domain.Profile", "Profile")
.WithMany("Experiences")
.HasForeignKey("ProfileId")
.OnDelete(DeleteBehavior.Cascade)
.IsRequired();
b.Navigation("Profile");
});
modelBuilder.Entity("LiveNetwork.Domain.ExperienceRole", b =>
{
b.HasOne("LiveNetwork.Domain.Experience", "Experience")
.WithMany("Roles")
.HasForeignKey("ExperienceId")
.OnDelete(DeleteBehavior.Cascade)
.IsRequired();
b.Navigation("Experience");
});
modelBuilder.Entity("LiveNetwork.Domain.Interaction", b =>
{
b.HasOne("LiveNetwork.Domain.Profile", "Profile")
.WithMany("Communications")
.HasForeignKey("ProfileId")
.OnDelete(DeleteBehavior.Cascade)
.IsRequired();
b.Navigation("Profile");
});
modelBuilder.Entity("Autodesk.Domain.Invoice", b =>
{
b.Navigation("Products");
});
modelBuilder.Entity("LiveNetwork.Domain.Experience", b =>
{
b.Navigation("Roles");
});
modelBuilder.Entity("LiveNetwork.Domain.Profile", b =>
{
b.Navigation("Communications");
b.Navigation("Educations");
b.Navigation("Experiences");
});
#pragma warning restore 612, 618
}
}
}

=== FILE: F:\Members\Api\Migrations\DataContextModelSnapshot.cs ===

﻿
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context.Implementation;
#nullable disable
namespace Api.Migrations
{
[DbContext(typeof(DataContext))]
partial class DataContextModelSnapshot : ModelSnapshot
{
protected override void BuildModel(ModelBuilder modelBuilder)
{
#pragma warning disable 612, 618
modelBuilder.HasAnnotation("ProductVersion", "9.0.5");
modelBuilder.Entity("Autodesk.Domain.Invoice", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("CustomerName")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<DateTime>("InvoiceDate")
.HasColumnType("TEXT");
b.Property<string>("InvoiceNumber")
.IsRequired()
.HasMaxLength(50)
.HasColumnType("TEXT");
b.Property<decimal>("TotalAmount")
.HasColumnType("TEXT");
b.HasKey("Id");
b.ToTable("Invoices", (string)null);
});
modelBuilder.Entity("Autodesk.Domain.Product", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("Description")
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("InvoiceId")
.IsRequired()
.HasColumnType("TEXT");
b.Property<string>("Name")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.Property<decimal>("Price")
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex("InvoiceId");
b.ToTable("Products", (string)null);
});
modelBuilder.Entity("Autodesk.Domain.User", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("Email")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.Property<string>("Lastname")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.Property<string>("Name")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex(new[] { "Email" }, "UC_Users_Email")
.IsUnique();
b.ToTable("Users", (string)null);
});
modelBuilder.Entity("Domain.ErrorLog", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("Context")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("ExceptionType")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("Level")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("Message")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("StackTrace")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<DateTime>("Timestamp")
.HasColumnType("TEXT");
b.HasKey("Id");
b.ToTable("ErrorLogs", (string)null);
});
modelBuilder.Entity("LiveNetwork.Domain.Education", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("DateRange")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.Property<string>("Degree")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("Description")
.IsRequired()
.HasMaxLength(2000)
.HasColumnType("TEXT");
b.Property<string>("Field")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("LogoAlt")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("LogoUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("ProfileId")
.IsRequired()
.HasColumnType("TEXT");
b.Property<string>("School")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("SchoolUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex("ProfileId")
.HasDatabaseName("IX_Educations_ProfileId");
b.ToTable("Educations", (string)null);
});
modelBuilder.Entity("LiveNetwork.Domain.Experience", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("Company")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("CompanyLogoAlt")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("CompanyLogoUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("CompanyUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("EmploymentSummary")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("Location")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("ProfileId")
.IsRequired()
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex("ProfileId")
.HasDatabaseName("IX_Experiences_ProfileId");
b.ToTable("Experiences", (string)null);
});
modelBuilder.Entity("LiveNetwork.Domain.ExperienceRole", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("ContextualSkills")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("DateRange")
.IsRequired()
.HasMaxLength(100)
.HasColumnType("TEXT");
b.Property<string>("Description")
.IsRequired()
.HasMaxLength(2000)
.HasColumnType("TEXT");
b.Property<string>("ExperienceId")
.IsRequired()
.HasColumnType("TEXT");
b.Property<string>("Title")
.IsRequired()
.HasMaxLength(150)
.HasColumnType("TEXT");
b.Property<string>("WorkArrangement")
.IsRequired()
.HasMaxLength(50)
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex("ExperienceId")
.HasDatabaseName("IX_ExperienceRoles_ExperienceId");
b.ToTable("ExperienceRoles", (string)null);
});
modelBuilder.Entity("LiveNetwork.Domain.Interaction", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("Content")
.IsRequired()
.HasColumnType("TEXT");
b.Property<DateTimeOffset>("CreatedAt")
.HasColumnType("TEXT");
b.Property<string>("Discriminator")
.IsRequired()
.HasMaxLength(21)
.HasColumnType("TEXT");
b.Property<string>("Experiment")
.IsRequired()
.HasColumnType("TEXT");
b.Property<string>("FeedbackNotes")
.HasColumnType("TEXT");
b.Property<string>("ProfileId")
.IsRequired()
.HasColumnType("TEXT");
b.Property<DateTimeOffset>("UpdatedAt")
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex("ProfileId");
b.ToTable("Communications", (string)null);
b.HasDiscriminator().HasValue("Interaction");
b.UseTphMappingStrategy();
});
modelBuilder.Entity("LiveNetwork.Domain.Profile", b =>
{
b.Property<string>("Id")
.HasColumnType("TEXT");
b.Property<string>("AboutText")
.IsRequired()
.HasMaxLength(5000)
.HasColumnType("TEXT");
b.Property<bool>("Active")
.HasColumnType("INTEGER");
b.Property<string>("BackgroundImageUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("ConnectionDegree")
.IsRequired()
.HasMaxLength(50)
.HasColumnType("TEXT");
b.Property<string>("Connections")
.IsRequired()
.HasMaxLength(50)
.HasColumnType("TEXT");
b.Property<string>("CurrentCompany")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("Followers")
.IsRequired()
.HasMaxLength(50)
.HasColumnType("TEXT");
b.Property<string>("FullName")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("Headline")
.IsRequired()
.HasMaxLength(300)
.HasColumnType("TEXT");
b.Property<string>("Location")
.IsRequired()
.HasMaxLength(200)
.HasColumnType("TEXT");
b.Property<string>("ProfileImageUrl")
.IsRequired()
.HasMaxLength(500)
.HasColumnType("TEXT");
b.Property<string>("Url")
.IsRequired()
.HasColumnType("TEXT");
b.HasKey("Id");
b.HasIndex(new[] { "FullName" }, "IX_Profiles_FullName");
b.HasIndex(new[] { "Url" }, "UC_Profiles_Url")
.IsUnique();
b.ToTable("Profiles", (string)null);
});
modelBuilder.Entity("LiveNetwork.Domain.ConnectionInvite", b =>
{
b.HasBaseType("LiveNetwork.Domain.Interaction");
b.Property<DateTimeOffset?>("CompletedAt")
.HasColumnType("TEXT");
b.Property<DateTimeOffset?>("SentAt")
.HasColumnType("TEXT");
b.Property<string>("Status")
.IsRequired()
.HasColumnType("TEXT");
b.HasDiscriminator().HasValue("ConnectionInvite");
});
modelBuilder.Entity("LiveNetwork.Domain.MessageInteraction", b =>
{
b.HasBaseType("LiveNetwork.Domain.Interaction");
b.Property<DateTimeOffset?>("DeliveredAt")
.HasColumnType("TEXT");
b.Property<DateTimeOffset?>("ReadAt")
.HasColumnType("TEXT");
b.Property<string>("Status")
.IsRequired()
.HasColumnType("TEXT");
b.ToTable("Communications", t =>
{
t.Property("Status")
.HasColumnName("MessageInteraction_Status");
});
b.HasDiscriminator().HasValue("MessageInteraction");
});
modelBuilder.Entity("Autodesk.Domain.Product", b =>
{
b.HasOne("Autodesk.Domain.Invoice", null)
.WithMany("Products")
.HasForeignKey("InvoiceId")
.OnDelete(DeleteBehavior.Cascade);
});
modelBuilder.Entity("LiveNetwork.Domain.Education", b =>
{
b.HasOne("LiveNetwork.Domain.Profile", "Profile")
.WithMany("Educations")
.HasForeignKey("ProfileId")
.OnDelete(DeleteBehavior.Cascade)
.IsRequired();
b.Navigation("Profile");
});
modelBuilder.Entity("LiveNetwork.Domain.Experience", b =>
{
b.HasOne("LiveNetwork.Domain.Profile", "Profile")
.WithMany("Experiences")
.HasForeignKey("ProfileId")
.OnDelete(DeleteBehavior.Cascade)
.IsRequired();
b.Navigation("Profile");
});
modelBuilder.Entity("LiveNetwork.Domain.ExperienceRole", b =>
{
b.HasOne("LiveNetwork.Domain.Experience", "Experience")
.WithMany("Roles")
.HasForeignKey("ExperienceId")
.OnDelete(DeleteBehavior.Cascade)
.IsRequired();
b.Navigation("Experience");
});
modelBuilder.Entity("LiveNetwork.Domain.Interaction", b =>
{
b.HasOne("LiveNetwork.Domain.Profile", "Profile")
.WithMany("Communications")
.HasForeignKey("ProfileId")
.OnDelete(DeleteBehavior.Cascade)
.IsRequired();
b.Navigation("Profile");
});
modelBuilder.Entity("Autodesk.Domain.Invoice", b =>
{
b.Navigation("Products");
});
modelBuilder.Entity("LiveNetwork.Domain.Experience", b =>
{
b.Navigation("Roles");
});
modelBuilder.Entity("LiveNetwork.Domain.Profile", b =>
{
b.Navigation("Communications");
b.Navigation("Educations");
b.Navigation("Experiences");
});
#pragma warning restore 612, 618
}
}
}

=== FILE: F:\Members\Api\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Api\obj\Debug\net8.0\Api.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Api")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("Api")]
[assembly: System.Reflection.AssemblyTitleAttribute("Api")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Api\obj\Debug\net8.0\Api.GlobalUsings.g.cs ===

global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Api\obj\Debug\net8.0\Api.MvcApplicationPartsAssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

=== FILE: F:\Members\Api\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

=== FILE: F:\Members\Api\obj\Debug\net9.0\Api.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Api")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+73a339a9404c84cad408a550d58f544cd453273b")]
[assembly: System.Reflection.AssemblyProductAttribute("Api")]
[assembly: System.Reflection.AssemblyTitleAttribute("Api")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Api\obj\Debug\net9.0\Api.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Api\Startup\Builder.cs ===

﻿namespace Api.Startup
{
public class Builder : Database
{
protected static void ConfigureServices(IHostApplicationBuilder builder, string[] args)
{
string connectionString = GetConnectionString(builder);
Database.SetDatabase(builder);
AddScoped(builder, args);
builder.Services.AddLogging(loggingBuilder =>
{
loggingBuilder.ClearProviders();
loggingBuilder.AddConsole();
loggingBuilder.AddDebug();
});
builder.Services.AddHttpClient();
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddDistributedMemoryCache();
AddJwtBearer(builder);
RunErrorStrategy(builder);
}
}
}

=== FILE: F:\Members\Api\Startup\Database.cs ===

﻿using Microsoft.AspNetCore.Builder;
using Persistence.CreateStructure.Constants.ColumnType;
using Persistence.CreateStructure.Constants.ColumnType.Database;
namespace Api.Startup
{
public class Database : Middleware
{
protected static void SetDatabase(IHostApplicationBuilder builder)
{
builder.Services.AddScoped<IColumnTypes, SQLite>();
AddDbContextSQLite(builder, GetConnectionString(builder));
}
protected static string GetConnectionString(IHostApplicationBuilder builder)
{
var section = builder.Configuration.GetSection("ConnectionStrings");
var connetionString = section[Settings.SQLite]  ??string.Empty;
return connetionString;
}
}
}

=== FILE: F:\Members\Api\Startup\Dependency.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Autodesk.Application.UseCases.CRUD.Invoice;
using Autodesk.Application.UseCases.CRUD.Invoice.Query;
using Autodesk.Application.UseCases.CRUD.User;
using Autodesk.Application.UseCases.CRUD.User.Query;
using Autodesk.Infrastructure.Implementation.CRUD.Invoice.Create;
using Autodesk.Infrastructure.Implementation.CRUD.Invoice.Query.ReadFilter;
using Autodesk.Infrastructure.Implementation.CRUD.User.Create;
using Autodesk.Infrastructure.Implementation.CRUD.User.Delete;
using Autodesk.Infrastructure.Implementation.CRUD.User.Update;
using Commands;
using Configuration;
using Infrastructure.Repositories.CRUD;
using Infrastructure.Result;
using LiveNetwork.Application.Services;
using LiveNetwork.Application.UseCases.CRUD.IMessageInteraction;
using LiveNetwork.Application.UseCases.CRUD.Profile;
using LiveNetwork.Application.UseCases.CRUD.Profile.Query;
using LiveNetwork.Infrastructure.Implementation.CRUD.MessageInteraction.Create;
using LiveNetwork.Infrastructure.Implementation.CRUD.MessageInteraction.Query.ReadFilter;
using LiveNetwork.Infrastructure.Implementation.CRUD.Profile.Create;
using LiveNetwork.Infrastructure.Implementation.CRUD.Profile.Delete;
using LiveNetwork.Infrastructure.Implementation.CRUD.Profile.Query.ReadFilter;
using LiveNetwork.Infrastructure.Implementation.CRUD.Profile.Update;
using LiveNetwork.Infrastructure.Services;
using Persistence.Context.Implementation;
using Persistence.Context.Interface;
using Persistence.CreateStructure.Constants.ColumnType;
using Persistence.CreateStructure.Constants.ColumnType.Database;
using Services.Interfaces;
namespace Api.Startup
{
public class Dependency
{
protected static void Cache(IHostApplicationBuilder builder)
{
builder.Services.AddMemoryCache();
}
protected static void User(IHostApplicationBuilder builder)
{
builder.Services.AddScoped<IUserRead, UserRead>();
builder.Services.AddScoped<IUserCreate, UserCreate>();
builder.Services.AddScoped<IUserUpdate, UserUpdate>();
builder.Services.AddScoped<IUserDelete, UserDelete>();
}
protected static void DataBase(IHostApplicationBuilder builder)
{
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
builder.Services.AddSingleton<IColumnTypes, SQLite>();
}
protected static void Profile(IHostApplicationBuilder builder)
{
builder.Services.AddScoped<IProfileCreate, ProfileCreate>();
builder.Services.AddScoped<IProfileRead, ProfileRead>();
builder.Services.AddScoped<IMessageInteractionCreate, MessageInteractionCreate>();
builder.Services.AddScoped<IMessageInteractionRead, MessageInteractionRead>();
builder.Services.AddScoped<IProfileDelete, ProfileDelete>();
builder.Services.AddScoped<IProfileUpdate, ProfileUpdate>();
}
protected static void Invoice(IHostApplicationBuilder builder)
{
builder.Services.AddScoped<IInvoiceCreate, InvoiceCreate>();
builder.Services.AddScoped<IInvoiceRead, InvoiceRead>();
}
protected static void ErrorLog(IHostApplicationBuilder builder)
{
builder.Services.AddScoped<IErrorLogCreate, ErrorLogCreate>();
}
protected static void DataSeeder(IHostApplicationBuilder builder)
{
builder.Services.AddScoped<IErrorHandler, ErrorHandler>();
}
protected static void Composition(IHostApplicationBuilder builder)
{
builder.Services.AddSingleton<ISecurityCheck, SecurityCheck>();
builder.Services.AddTransient<IPromptGenerator, PromptGenerator>();
builder.Services.AddTransient<ILoginService, LoginService>();
builder.Services.AddTransient<ICaptureSnapshot, CaptureSnapshot>();
builder.Services.AddSingleton<IWebDriverFactory, ChromeDriverFactory>();
builder.Services.AddTransient<ISearch, Search>();
builder.Services.AddTransient<IProcessor, Processor>();
builder.Services.AddSingleton<IDirectoryCheck, DirectoryCheck>();
builder.Services.AddSingleton<IOpenAIClient, OpenAIClient>();
builder.Services.AddSingleton<IUtil, Util>();
builder.Services.AddSingleton<ITrackingService, TrackingService>();
builder.Services.AddSingleton<ISearchCoordinator, SearchCoordinator>();
builder.Services.AddSingleton<IResumeDetailService, ResumeDetailService>();
builder.Services.AddSingleton<IInviteConnections, InviteConnections>();
builder.Services.AddScoped<IConnectionInfoCollector, ConnectionInfoCollector>();
builder.Services.AddScoped<ILinkedInChat, LinkedInChat>();
}
protected static void Commands(IHostApplicationBuilder builder, string[] args)
{
builder.Services.AddSingleton(new CommandArgs(args));
builder.Services.AddSingleton<CommandFactory>();
builder.Services.AddTransient<HelpCommand>();
builder.Services.AddTransient<SearchCommand>();
builder.Services.AddTransient<PromtCommand>();
builder.Services.AddTransient<InviteCommand>();
builder.Services.AddTransient<CollectorCommand>();
builder.Services.AddTransient<ChatCommand>();
}
protected static void Configuration(IHostApplicationBuilder builder)
{
var appConfig = new AppConfig();
builder.Configuration.Bind(appConfig);
builder.Services.AddSingleton<AppConfig>(appConfig);
ExecutionTracker executionOptions = new(Environment.CurrentDirectory);
builder.Services.AddSingleton(executionOptions);
}
}
}

=== FILE: F:\Members\Api\Startup\Foundation.cs ===

﻿using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Application.Result;
using Persistence.Context.Interceptors;
using Persistence.Context.Implementation;
namespace Api.Startup
{
public class Foundation : Injection
{
protected static void RunErrorStrategy(IHostApplicationBuilder builder)
{
using IServiceScope scope = builder.Services.BuildServiceProvider().CreateScope();
var context = scope.ServiceProvider.GetRequiredService<IErrorHandler>();
if (!context.Any())
{
var errorHandler = scope.ServiceProvider.GetRequiredService<IErrorHandler>();
errorHandler.LoadErrorMappings("ErrorMappings.json");
}
}
protected static void AddJwtBearer(IHostApplicationBuilder builder)
{
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options =>
{
var jwtKey = builder?.Configuration[Settings.JwtKey] ?? string.Empty;
byte[] key = Encoding.UTF8.GetBytes(jwtKey);
options.TokenValidationParameters = new TokenValidationParameters
{
ValidateIssuerSigningKey = true,
IssuerSigningKey = new SymmetricSecurityKey(key),
ValidateIssuer = false,
ValidateAudience = false
};
});
}
protected static void AddDbContextSQLite(IHostApplicationBuilder builder, string? connectionString)
{
connectionString = ValidateArgument(connectionString);
builder.Services.AddDbContext<DataContext>(options =>
{
options.UseSqlite(connectionString, b => b.MigrationsAssembly("Api"))
.AddInterceptors(new SqliteFunctionInterceptor());
});
}
private static string ValidateArgument(string? argument)
{
if (string.IsNullOrEmpty(argument) || string.IsNullOrWhiteSpace(argument))
{
throw new ArgumentNullException(nameof(argument));
}
return argument ?? string.Empty;
}
}
}

=== FILE: F:\Members\Api\Startup\Injection.cs ===

﻿using Autodesk.Domain;
namespace Api.Startup
{
public class Injection : Dependency
{
protected static void AddScoped(IHostApplicationBuilder builder, string[] args)
{
DataSeeder(builder);
DataBase(builder);
User(builder);
Profile(builder);
Invoice(builder);
Cache(builder);
ErrorLog(builder);
Configuration(builder);
Commands(builder, args);
Composition(builder);
}
}
}

=== FILE: F:\Members\Api\Startup\Middleware.cs ===

﻿namespace Api.Startup
{
public class Middleware : Foundation
{
protected static void ConfigureMiddleware(WebApplication app)
{
app.UseCors(
policyBuilder => policyBuilder
.AllowAnyHeader()
.AllowAnyMethod()
.SetIsOriginAllowed(_ => true)
.AllowCredentials()
);
app.UseSwagger();
app.UseSwaggerUI();
app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();
}
}
}

=== FILE: F:\Members\Api\Startup\Program.cs ===

using Persistence.Context.Implementation;
namespace Api.Startup
{
public class Program : Builder
{
private static void Main(string[] args)
{
WebApplicationBuilder builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
ConfigureServices(builder, args);
WebApplication app = builder.Build();
ConfigureMiddleware(app);
using (var scope = app.Services.CreateScope())
{
var db = scope.ServiceProvider.GetRequiredService<DataContext>();
if (!db.Initialize())
{
throw new Exception("Database initialization failed");
}
}
var services = builder.Services;
app.Run();
}
}
}

=== FILE: F:\Members\Api\Startup\Provider.cs ===

﻿namespace Api.Startup
{
public static class Provider
{
public const string SQLite = "DefaultConnection";
}
}

=== FILE: F:\Members\Api\Startup\Settings.cs ===

﻿namespace Api.Startup
{
internal static class Settings
{
public const string SQLite = "DefaultConnection";
public const string JwtKey = "JWT:Key";
public const string JWTConfiguration = "JWT";
}
}

=== FILE: F:\Members\Application\Common\Pagination\PagedResult.cs ===

﻿namespace Application.Common.Pagination
{
public sealed record PagedResult<T>
{
public IEnumerable<T> Items { get; init; } = [];
public string? NextCursor { get; init; }
public int TotalCount { get; init; }
}
}

=== FILE: F:\Members\Application\Constants\Messages.cs ===

﻿namespace Application.Constants
{
public static class Messages
{
public static class InvalidOperation
{
public const string NullMessage = "The 'message' parameter cannot be null, empty, or whitespace.";
}
public static class Operation
{
public const string InvalidOperation = "This method can only be used if the value of IsSuccessful is false.";
}
public static class EnumExtensions
{
public const string Unknown = "UNKNOWN";
public const string DescriptionNotAvailable = "Description not available.";
public const string NoEnumValueFound = "No enum value found for {0} in {1}";
}
public static class EnumMetadata
{
public const string ForNameOrDescription = "For name or description, null, empty, and whitespace are not allowed.";
}
}
}

=== FILE: F:\Members\Application\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Application\obj\Debug\net8.0\Application.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Application")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b0c710b065a455c6e032d341534a5ba843862c20")]
[assembly: System.Reflection.AssemblyProductAttribute("Application")]
[assembly: System.Reflection.AssemblyTitleAttribute("Application")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Application\obj\Debug\net8.0\Application.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Application\Result\IErrorHandler.cs ===

﻿using Application.UseCases.Repository.UseCases.CRUD;
namespace Application.Result
{
public interface IErrorHandler
{
void LoadErrorMappings(string filePath);
Operation<T> Fail<T>(Exception? ex, string errorMessage, IErrorLogCreate errorLogCreate);
Operation<T> Fail<T>(Exception? ex, IErrorLogCreate errorLogCreate);
Operation<T> Business<T>(string errorMessage);
bool Any();
}
}

=== FILE: F:\Members\Application\Result\Operation.cs ===

﻿namespace Application.Result
{
using Application.Result.Error;
using InvalidOperation = Exceptions.InvalidOperation;
using static Application.Constants.Messages;
public class Operation<T> : Result<T>
{
private Operation() { }
public static Operation<T> Success(T? data, string? message = "")
{
return new Operation<T>
{
IsSuccessful = true,
Data         = data,
Message      = message ?? string.Empty,
Type         = ErrorTypes.None
};
}
public static Operation<T> Failure(string message, ErrorTypes errorTypes)
{
return new Operation<T>
{
IsSuccessful = false,
Message      = message,
Type         = errorTypes
};
}
public Operation<U> AsType<U>()
{
EnsureIsFailure();
return new Operation<U>
{
IsSuccessful = false,
Message      = this.Message,
Type         = this.Type
};
}
public Operation<U> ConvertTo<U>() => AsType<U>();
private void EnsureIsFailure()
{
if (IsSuccessful)
{
throw new InvalidOperation(Operation.InvalidOperation);
}
}
}
}

=== FILE: F:\Members\Application\Result\OperationStrategy.cs ===

﻿using Application.Result.EnumType.Extensions;
using Application.Result.Error;
namespace Application.Result
{
public interface IErrorCreationStrategy<T>
{
Operation<T> CreateFailure(string message);
Operation<T> CreateFailure();
}
public abstract class ErrorStrategyBase<T>(ErrorTypes errorType) : IErrorCreationStrategy<T>
{
private readonly ErrorTypes _errorType = errorType;
public Operation<T> CreateFailure(string message)
=> Operation<T>.Failure(message, _errorType);
public Operation<T> CreateFailure()
=> Operation<T>.Failure(_errorType.GetDescription(), _errorType);
}
public class BusinessStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.BusinessValidation);
public class ConfigMissingStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.ConfigMissing);
public class DatabaseStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.Database);
public class InvalidDataStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.InvalidData);
public class UnexpectedErrorStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.Unexpected);
public class NetworkErrorStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.Network);
public class NullExceptionStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.NullExceptionStrategy);
public class UserInputStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.UserInput);
public class NotFoundStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.NotFound);
public class AuthenticationStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.Authentication);
public class AuthorizationStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.Authorization);
public class ResourceStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.Resource);
public class TimeoutStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.Timeout);
public class NoneStrategy<T>() : ErrorStrategyBase<T>(ErrorTypes.None);
public static class OperationStrategy<T>
{
private const string DefaultErrorMessage = "Unknown Error";
public static Operation<T> Fail(string? message, IErrorCreationStrategy<T> strategy)
{
if (strategy == null)
throw new ArgumentNullException(nameof(strategy), "Strategy cannot be null.");
var finalMessage = string.IsNullOrWhiteSpace(message)
? DefaultErrorMessage
: message;
return strategy.CreateFailure(finalMessage);
}
}
}

=== FILE: F:\Members\Application\Result\Result.cs ===

﻿using Application.Result.EnumType.Extensions;
using Application.Result.Error;
namespace Application.Result
{
public class Result<T>
{
public ErrorTypes Type { get; set; }
public bool IsSuccessful { get; protected set; }
public T? Data { get; protected set; }
public string? Message { get; protected set; }
public string Error => this.Type.GetCustomName();
}
}

=== FILE: F:\Members\Application\Result\EnumType\Extensions\EnumExtensions.cs ===

﻿namespace Application.Result.EnumType.Extensions
{
using Application.Constants;
using System;
using System.Reflection;
public static class EnumExtensions
{
public static string GetCustomName<TEnum>(this TEnum enumValue)
where TEnum : struct, Enum
{
return GetEnumMetadata(enumValue)?.Name ?? Messages.EnumExtensions.Unknown;
}
public static string GetDescription<TEnum>(this TEnum enumValue)
where TEnum : struct, Enum
{
return GetEnumMetadata(enumValue)?.Description ?? Messages.EnumExtensions.DescriptionNotAvailable;
}
private static EnumMetadata? GetEnumMetadata<TEnum>(TEnum enumValue)
where TEnum : Enum
{
var type = enumValue.GetType();
var name = Enum.GetName(type, enumValue);
if (name != null)
{
var field = type.GetField(name);
if (field?.GetCustomAttribute<EnumMetadata>(false) is EnumMetadata attribute)
{
return attribute;
}
}
return null;
}
}
}

=== FILE: F:\Members\Application\Result\EnumType\Extensions\EnumMetadata.cs ===

﻿namespace Application.Result.EnumType.Extensions
{
using Application.Constants;
using System;
[AttributeUsage(AttributeTargets.Field, AllowMultiple = false)]
public class EnumMetadata : Attribute
{
public string Name { get; private set; }
public string Description { get; private set; }
public EnumMetadata(string name, string description)
{
if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(description))
{
throw new ArgumentNullException(Messages.EnumMetadata.ForNameOrDescription);
}
Name = name;
Description = description;
}
}
}

=== FILE: F:\Members\Application\Result\Error\ErrorTypes.cs ===

﻿using Application.Result.EnumType.Extensions;
namespace Application.Result.Error
{
public enum ErrorTypes
{
[EnumMetadata("NONE", "No error has occurred.")]
None,
[EnumMetadata("BUSINESS_VALIDATION_ERROR", "Occurs when business logic validation fails.")]
BusinessValidation,
[EnumMetadata("DATABASE_ERROR", "Occurs when an error happens during database interaction.")]
Database,
[EnumMetadata("UNEXPECTED_ERROR", "Occurs for any unexpected or unclassified error.")]
Unexpected,
[EnumMetadata("DATA_SUBMITTED_INVALID", "Occurs when the submitted data is invalid.")]
InvalidData,
[EnumMetadata("CONFIGURATION_MISSING_ERROR", "Occurs when a required configuration is missing.")]
ConfigMissing,
[EnumMetadata("NETWORK_ERROR", "Occurs due to a network connectivity issue.")]
Network,
[EnumMetadata("USER_INPUT_ERROR", "Occurs when user input is invalid.")]
UserInput,
[EnumMetadata("NONE_FOUND_ERROR", "Occurs when a requested resource is not found.")]
NotFound,
[EnumMetadata("AUTHENTICATION_ERROR", "Occurs when user authentication fails.")]
Authentication,
[EnumMetadata("AUTHORIZATION_ERROR", "Occurs when the user is not authorized to perform the action.")]
Authorization,
[EnumMetadata("RESOURCE_ERROR", "Occurs when allocating or accessing a resource fails.")]
Resource,
[EnumMetadata("TIMEOUT_ERROR", "Occurs when an operation times out.")]
Timeout,
[EnumMetadata("NULL_EXCEPTION_STRATEGY", "Occurs when the error-mappings dictionary is uninitialized.")]
NullExceptionStrategy
}
}

=== FILE: F:\Members\Application\Result\Exceptions\InvalidOperation.cs ===

﻿namespace Application.Result.Exceptions
{
using Application.Constants;
public class InvalidOperation : Exception
{
public InvalidOperation(string message) : base(message)
{
if (string.IsNullOrWhiteSpace(message))
{
throw new ArgumentNullException(nameof(message), Messages.InvalidOperation.NullMessage);
}
}
}
}

=== FILE: F:\Members\Application\UseCases\Repository\CRUD\ICreate.cs ===

﻿using Application.Result;
using Domain.Interfaces.Entity;
namespace Application.UseCases.Repository.CRUD
{
public interface ICreate<T> where T : class, IEntity
{
Task<Operation<bool>> CreateEntity(T entity);
}
}

=== FILE: F:\Members\Application\UseCases\Repository\CRUD\IDelete.cs ===

﻿using Application.Result;
using Domain.Interfaces.Entity;
namespace Application.UseCases.Repository.CRUD
{
public interface IDelete<T> where T : class, IEntity
{
Task<Operation<bool>> DeleteEntity(string id);
}
}

=== FILE: F:\Members\Application\UseCases\Repository\CRUD\IUpdate.cs ===

﻿using Application.Result;
using Domain.Interfaces.Entity;
namespace Application.UseCases.Repository.CRUD
{
public interface IUpdate<T> where T : class, IEntity
{
Task<Operation<bool>> UpdateEntity(T entity);
}
}

=== FILE: F:\Members\Application\UseCases\Repository\CRUD\Query\IReadById.cs ===

﻿using Application.Result;
using Domain.Interfaces.Entity;
namespace Application.UseCases.Repository.CRUD.Query
{
public interface IReadById<T> where T : class, IEntity
{
Task<Operation<T>> ReadById(string id);
}
}

=== FILE: F:\Members\Application\UseCases\Repository\UseCases\CRUD\IErrorLogCreate.cs ===

﻿using Application.Result;
using Domain;
namespace Application.UseCases.Repository.UseCases.CRUD
{
public interface IErrorLogCreate
{
Task<Operation<bool>> CreateInvoiceAsync(ErrorLog entity);
}
}

=== FILE: F:\Members\Application.Test\UnitTest1.cs ===

﻿namespace Application.Test
{
public class UnitTest1
{
[Fact]
public void Test1()
{
}
}
}

=== FILE: F:\Members\Autodesk.Api\Program.cs ===

using Api.Startup;
using Persistence.Context.Implementation;
namespace Autodesk.Api
{
public class Program : Builder
{
private static void Main(string[] args)
{
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
ConfigureServices(builder, args);
var app = builder.Build();
ConfigureMiddleware(app);
using (var scope = app.Services.CreateScope())
{
var db = scope.ServiceProvider.GetRequiredService<DataContext>();
if (!db.Initialize())
{
throw new Exception("Database initialization failed");
}
}
var services = builder.Services;
app.Run();
}
}
}

=== FILE: F:\Members\Autodesk.Api\Controllers\api\v1\Autodesk\InvoiceController.cs ===

﻿using Application.Common.Pagination;
using Autodesk.Application.UseCases.CRUD.Invoice;
using Autodesk.Application.UseCases.CRUD.Invoice.Query;
using Autodesk.Domain;
using Autodesk.Shared.Models;
using Microsoft.AspNetCore.Mvc;
namespace Autodesk.Api.Controllers.api.v1.Autodesk
{
[ApiController]
[Route("api/v1/invoices")]
public class InvoiceController(IInvoiceCreate invoiceCreate, IInvoiceRead invoiceRead) : ControllerBase
{
[HttpPost]
[ProducesResponseType(typeof(Invoice), StatusCodes.Status201Created)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
public async Task<IActionResult> Create([FromBody] Invoice invoice)
{
var op = await invoiceCreate.CreateInvoiceAsync(invoice);
if (!op.IsSuccessful)
return BadRequest(op.Message);
return CreatedAtAction(nameof(Create), new { id = invoice.Id }, invoice);
}
[HttpGet]
[ProducesResponseType(typeof(PagedResult<Invoice>), StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
public async Task<IActionResult> Get([FromQuery] InvoiceQueryParams qp)
{
if (!ModelState.IsValid)
return BadRequest(ModelState);
var op = await invoiceRead.GetInvoicesPageAsync(
qp.InvoiceNumber,
qp.CustomerName,
qp.Cursor,
qp.PageSize,
qp.IncludeProducts
);
if (!op.IsSuccessful)
return BadRequest(op.Message);
return Ok(op.Data);
}
}
}

=== FILE: F:\Members\Autodesk.Api\Controllers\api\v1\Autodesk\UserController.cs ===

﻿using Application.Common.Pagination;
using Autodesk.Application.UseCases.CRUD.User;
using Autodesk.Application.UseCases.CRUD.User.Query;
using Autodesk.Domain;
using Autodesk.Shared.Models;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Reactive;
using System.Reactive.Linq;
using System.Runtime.CompilerServices;
using System.Text.Json;
namespace Autodesk.Api.Controllers.api.v1.Autodesk
{
[ApiController]
[Route("api/v1/users")]
public class UserController(
IUserCreate userCreate,
IUserRead readFilterCursor,
IUserUpdate userUpdate,
IUserDelete userDelete) : ControllerBase
{
private readonly IUserCreate _create = userCreate;
private readonly IUserRead _read = readFilterCursor;
private readonly IUserUpdate _update = userUpdate;
private readonly IUserDelete _delete = userDelete;
[HttpPost]
[ProducesResponseType(typeof(User), StatusCodes.Status201Created)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
public async Task<IActionResult> Create([FromBody] User user)
{
var op = await _create.CreateUserAsync(user);
if (!op.IsSuccessful)
{
return BadRequest(op.Message);
}
return CreatedAtAction(nameof(ReadFilterCursor), new { id = user.Id }, user);
}
[HttpGet]
[ProducesResponseType(typeof(PagedResult<User>), StatusCodes.Status200OK)]
public async Task<IActionResult> ReadFilterCursor([FromQuery] UserQueryParams qp)
{
if (!ModelState.IsValid)
{
return BadRequest(ModelState);
}
var op = await _read.GetUsersPageAsync(qp.Id, qp.Name, qp.Cursor, qp.PageSize);
if (!op.IsSuccessful)
{
return BadRequest(op.Message);
}
return Ok(op.Data);
}
[HttpGet("reactive")]
[ProducesResponseType(StatusCodes.Status200OK)]
public async Task Read(int maxUsers, [EnumeratorCancellation] CancellationToken cancellationToken)
{
var usersBatche = _read.GetStreamUsers(cancellationToken);
var actualMaxUsers = Math.Min(maxUsers, usersBatche.Count);
var period = TimeSpan.FromMilliseconds(1);
var second = Observable.Interval(period);
var observable = usersBatche
.Take(actualMaxUsers)
.ToObservable()
.Zip(second, (user, _) => user);
var users = observable.ToAsyncEnumerable().WithCancellation(cancellationToken);
int i = 0;
await foreach (var user in users)
{
var json = JsonSerializer.Serialize(user);
await Response.WriteAsync(json + "\n", cancellationToken);
await Response.Body.FlushAsync(cancellationToken);
i++;
}
}
[HttpPut("{id}")]
[ProducesResponseType(typeof(User), StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
public async Task<IActionResult> Update(string id, [FromBody] User user)
{
if (id != user.Id)
{
return BadRequest("ID in URL and payload must match.");
}
var op = await _update.UpdateUserAsync(user);
if (!op.IsSuccessful)
{
return BadRequest(op.Message);
}
return Ok(user);
}
[HttpDelete("{id}")]
[ProducesResponseType(StatusCodes.Status204NoContent)]
[ProducesResponseType(StatusCodes.Status404NotFound)]
public async Task<IActionResult> Delete(string id)
{
var op = await _delete.DeleteUserAsync(id);
if (!op.IsSuccessful)
{
return BadRequest(op.Message);
}
if (!op.Data)
{
return NotFound();
}
return NoContent();
}
}
}

=== FILE: F:\Members\Autodesk.Api\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Api\obj\Debug\net8.0\Autodesk.Api.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Api")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Api")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Api")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Api\obj\Debug\net8.0\Autodesk.Api.GlobalUsings.g.cs ===

global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Autodesk.Api\obj\Debug\net8.0\Autodesk.Api.MvcApplicationPartsAssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Api")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

=== FILE: F:\Members\Autodesk.Application\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Application\obj\Debug\net8.0\Autodesk.Application.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Application")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b0c710b065a455c6e032d341534a5ba843862c20")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Application")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Application")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Application\obj\Debug\net8.0\Autodesk.Application.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Autodesk.Application\UseCases\CRUD\Invoice\IInvoiceCreate.cs ===

﻿using Application.Result;
namespace Autodesk.Application.UseCases.CRUD.Invoice
{
using Invoice = Domain.Invoice;
public interface IInvoiceCreate
{
Task<Operation<Invoice>> CreateInvoiceAsync(Invoice entity);
}
}

=== FILE: F:\Members\Autodesk.Application\UseCases\CRUD\Invoice\Query\IInvoiceRead.cs ===

﻿using Application.Common.Pagination;
using Application.Result;
namespace Autodesk.Application.UseCases.CRUD.Invoice.Query
{
using Invoice = Domain.Invoice;
public interface IInvoiceRead
{
Task<Operation<PagedResult<Invoice>>> GetInvoicesPageAsync(
string? invoiceNumber,
string? customerName,
string? cursor,
int pageSize,
bool includeProducts = false);
}
}

=== FILE: F:\Members\Autodesk.Application\UseCases\CRUD\User\IUserCreate.cs ===

﻿using Application.Result;
namespace Autodesk.Application.UseCases.CRUD.User
{
using User = Domain.User;
public interface IUserCreate
{
Task<Operation<User>> CreateUserAsync(User entity);
}
}

=== FILE: F:\Members\Autodesk.Application\UseCases\CRUD\User\IUserDelete.cs ===

﻿using Application.Result;
namespace Autodesk.Application.UseCases.CRUD.User
{
public interface IUserDelete
{
Task<Operation<bool>> DeleteUserAsync(string id);
}
}

=== FILE: F:\Members\Autodesk.Application\UseCases\CRUD\User\IUserUpdate.cs ===

﻿using Application.Result;
namespace Autodesk.Application.UseCases.CRUD.User
{
using User = Domain.User;
public interface IUserUpdate
{
Task<Operation<bool>> UpdateUserAsync(User entity);
}
}

=== FILE: F:\Members\Autodesk.Application\UseCases\CRUD\User\Query\IUserRead.cs ===

﻿using Application.Common.Pagination;
using Application.Result;
using System.Reactive.Linq;
namespace Autodesk.Application.UseCases.CRUD.User.Query
{
using User = Domain.User;
public interface IUserRead
{
Task<Operation<PagedResult<User>>> GetUsersPageAsync(
string? id,
string? name,
string? cursor,
int pageSize);
List<User> GetStreamUsers(CancellationToken cancellationToken = default);
void InvalidateAllUserCache();
}
}

=== FILE: F:\Members\Autodesk.Domain\Invoice.cs ===

﻿using Domain;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
namespace Autodesk.Domain
{
[method: SetsRequiredMembers]
public class Invoice(string id) : Entity(id)
{
[Required(ErrorMessage = "Invoice number is required.")]
[StringLength(50, ErrorMessage = "Invoice number cannot exceed 50 characters.")]
public string? InvoiceNumber { get; set; }
[Required(ErrorMessage = "Invoice date is required.")]
public DateTime InvoiceDate { get; set; }
[Required(ErrorMessage = "Customer name is required.")]
[MinLength(3, ErrorMessage = "Customer name must be at least 3 characters long.")]
[MaxLength(200, ErrorMessage = "Customer name must be maximum 200 characters long.")]
public string? CustomerName { get; set; }
[Range(0, double.MaxValue, ErrorMessage = "Total amount must be non-negative.")]
public decimal TotalAmount { get; set; }
public ICollection<Product> Products { get; init; } = [];
}
}

=== FILE: F:\Members\Autodesk.Domain\Product.cs ===

﻿using Domain;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
namespace Autodesk.Domain
{
[method: SetsRequiredMembers]
public class Product(string id) : Entity(id)
{
[Required(ErrorMessage = "Product name is required.")]
[MinLength(2, ErrorMessage = "Product name must be at least 2 characters long.")]
[MaxLength(100, ErrorMessage = "Product name must be maximum 100 characters long.")]
public string? Name { get; set; }
[MaxLength(500, ErrorMessage = "Description cannot exceed 500 characters.")]
public string? Description { get; set; }
[Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than zero.")]
public decimal Price { get; set; }
}
}

=== FILE: F:\Members\Autodesk.Domain\User.cs ===

﻿using Domain;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
namespace Autodesk.Domain
{
[method: SetsRequiredMembers]
public class User(string id) : Entity(id)
{
[Required(ErrorMessage = "Name is required.")]
[MinLength(3, ErrorMessage = "Name must be at least 3 characters long.")]
[MaxLength(100, ErrorMessage = "Name must be maximun 100 characters long.")]
public string? Name { get; set; }
[Required(ErrorMessage = "Lastname is required.")]
[MinLength(3, ErrorMessage = "Lastname must be at least 3 characters long.")]
[MaxLength(100, ErrorMessage = "Lastname must be maximun 100 characters long.")]
public string? Lastname { get; set; }
[Required(ErrorMessage = "Email is required.")]
[MinLength(3, ErrorMessage = "Email must be at least 3 characters long.")]
[MaxLength(100, ErrorMessage = "Email must be maximun 100 characters long.")]
[EmailAddress(ErrorMessage = "Email must be a valid email address.")]
public string? Email { get; set; }
}
}

=== FILE: F:\Members\Autodesk.Domain\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Domain\obj\Debug\net8.0\Autodesk.Domain.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Domain")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b0c710b065a455c6e032d341534a5ba843862c20")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Domain")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Domain")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Domain\obj\Debug\net8.0\Autodesk.Domain.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Autodesk.Domain.Test\InvoiceTests.cs ===

﻿using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Autodesk.Domain;
using Domain;
using Xunit;
namespace Autodesk.Domain.Tests
{
public class InvoiceTests
{
private static IList<ValidationResult> Validate(object model)
{
var results = new List<ValidationResult>();
var context = new ValidationContext(model, serviceProvider: null, items: null);
Validator.TryValidateObject(model, context, results, validateAllProperties: true);
return results;
}
[Fact]
public void Constructor_SetsIdAndDefaultProducts()
{
var id = Guid.NewGuid().ToString();
var invoice = new Invoice(id);
Assert.Equal(id, invoice.Id);
Assert.NotNull(invoice.Products);
Assert.Empty(invoice.Products);
}
[Fact]
public void ValidInvoice_PassesValidation()
{
var invoice = new Invoice(Guid.NewGuid().ToString())
{
InvoiceNumber  = "INV-2025-0001",
InvoiceDate    = DateTime.UtcNow,
CustomerName   = "Contoso Ltd.",
TotalAmount    = 123.45m
};
var results = Validate(invoice);
Assert.Empty(results);
}
[Theory]
[InlineData(null, "Invoice number is required.")]
[InlineData("", "Invoice number is required.")]
public void MissingInvoiceNumber_FailsRequired(string? invoiceNumber, string expectedMessage)
{
var invoice = new Invoice(Guid.NewGuid().ToString())
{
InvoiceNumber = invoiceNumber,
InvoiceDate   = DateTime.UtcNow,
CustomerName  = "Foo",
TotalAmount   = 0m
};
var results = Validate(invoice);
Assert.Contains(results, r => r.ErrorMessage == expectedMessage);
}
[Theory]
[InlineData("X", "Customer name must be at least 3 characters long.")]
[InlineData(null, "Customer name is required.")]
[InlineData("", "Customer name is required.")]
public void InvalidCustomerName_FailsLengthOrRequired(string? name, string expectedMessage)
{
var invoice = new Invoice(Guid.NewGuid().ToString())
{
InvoiceNumber = "INV1",
InvoiceDate   = DateTime.UtcNow,
CustomerName  = name,
TotalAmount   = 0m
};
var results = Validate(invoice);
Assert.Contains(results, r => r.ErrorMessage == expectedMessage);
}
[Fact]
public void CustomerName_TooLong_FailsMaxLength()
{
var longName = new string('C', 201);
var invoice = new Invoice(Guid.NewGuid().ToString())
{
InvoiceNumber = "INV2",
InvoiceDate   = DateTime.UtcNow,
CustomerName  = longName,
TotalAmount   = 0m
};
var results = Validate(invoice);
Assert.Contains(results, r =>
r.ErrorMessage == "Customer name must be maximum 200 characters long.");
}
[Fact]
public void InvoiceNumber_TooLong_FailsStringLength()
{
var longInvoiceNumber = new string('I', 51);
var invoice = new Invoice(Guid.NewGuid().ToString())
{
InvoiceNumber = longInvoiceNumber,
InvoiceDate   = DateTime.UtcNow,
CustomerName  = "Valid Name",
TotalAmount   = 0m
};
var results = Validate(invoice);
Assert.Contains(results, r =>
r.ErrorMessage == "Invoice number cannot exceed 50 characters.");
}
[Fact]
public void NegativeTotalAmount_FailsRange()
{
var invoice = new Invoice(Guid.NewGuid().ToString())
{
InvoiceNumber = "INV-NEG",
InvoiceDate   = DateTime.UtcNow,
CustomerName  = "Valid",
TotalAmount   = -1m
};
var results = Validate(invoice);
Assert.Contains(results, r =>
r.ErrorMessage == "Total amount must be non-negative.");
}
}
}

=== FILE: F:\Members\Autodesk.Domain.Test\ProductTests.cs ===

﻿using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Autodesk.Domain;
using Domain;
using Xunit;
namespace Autodesk.Domain.Tests
{
public class ProductTests
{
private static IList<ValidationResult> Validate(object model)
{
var results = new List<ValidationResult>();
var context = new ValidationContext(model, serviceProvider: null, items: null);
Validator.TryValidateObject(model, context, results, validateAllProperties: true);
return results;
}
[Fact]
public void Constructor_SetsId()
{
var id = Guid.NewGuid().ToString();
var product = new Product(id);
Assert.Equal(id, product.Id);
}
[Fact]
public void ValidProduct_PassesValidation()
{
var product = new Product(Guid.NewGuid().ToString())
{
Name        = "Widget",
Description = "A useful widget.",
Price       = 9.99m
};
var results = Validate(product);
Assert.Empty(results);
}
[Theory]
[InlineData(null, "Product name is required.")]
[InlineData("", "Product name is required.")]
public void MissingName_FailsRequired(string? name, string expectedMessage)
{
var product = new Product(Guid.NewGuid().ToString())
{
Name        = name,
Description = "Desc",
Price       = 1.00m
};
var results = Validate(product);
Assert.Contains(results, r => r.ErrorMessage == expectedMessage);
}
[Theory]
[InlineData("A", "Product name must be at least 2 characters long.")]
[InlineData("B", "Product name must be at least 2 characters long.")]
public void Name_TooShort_FailsMinLength(string name, string expectedMessage)
{
var product = new Product(Guid.NewGuid().ToString())
{
Name        = name,
Description = "Desc",
Price       = 1.00m
};
var results = Validate(product);
Assert.Contains(results, r => r.ErrorMessage == expectedMessage);
}
[Fact]
public void Name_TooLong_FailsMaxLength()
{
var longName = new string('X', 101);
var product = new Product(Guid.NewGuid().ToString())
{
Name        = longName,
Description = "Desc",
Price       = 1.00m
};
var results = Validate(product);
Assert.Contains(results, r =>
r.ErrorMessage == "Product name must be maximum 100 characters long.");
}
[Fact]
public void Description_TooLong_FailsMaxLength()
{
var longDesc = new string('D', 501);
var product = new Product(Guid.NewGuid().ToString())
{
Name        = "Valid Name",
Description = longDesc,
Price       = 1.00m
};
var results = Validate(product);
Assert.Contains(results, r =>
r.ErrorMessage == "Description cannot exceed 500 characters.");
}
[Theory]
[InlineData(0.00)]
[InlineData(0.009)]
[InlineData(-5.00)]
public void Price_LessThanMin_FailsRange(decimal price)
{
var product = new Product(Guid.NewGuid().ToString())
{
Name        = "Valid",
Description = "Desc",
Price       = price
};
var results = Validate(product);
Assert.Contains(results, r =>
r.ErrorMessage == "Price must be greater than zero.");
}
[Fact]
public void Price_ExactlyMin_PassesValidation()
{
var product = new Product(Guid.NewGuid().ToString())
{
Name        = "Valid",
Description = "Desc",
Price       = 0.01m
};
var results = Validate(product);
Assert.Empty(results);
}
}
}

=== FILE: F:\Members\Autodesk.Domain.Test\UserTestcs.cs ===

﻿namespace Autodesk.Domain.Test
{
public class UserTests
{
[Fact]
public void GivenNewUser_WhenInstantiated_ThenIsInactiveByDefault()
{
var sut = new User(Guid.NewGuid().ToString());
var isActive = sut.Active;
Assert.False(isActive);
}
[Fact]
public void GivenUser_WhenActivated_ThenActiveIsTrue()
{
var sut = new User(Guid.NewGuid().ToString());
sut.Active = true;
Assert.True(sut.Active);
}
[Fact]
public void GivenActiveUser_WhenDeactivated_ThenActiveIsFalse()
{
var sut = new User(Guid.NewGuid().ToString()) { Active = true };
sut.Active = false;
Assert.False(sut.Active);
}
[Fact]
public void GivenValidId_WhenConstructingUser_ThenIdIsSetCorrectly()
{
var expectedId = Guid.NewGuid().ToString();
var sut = new User(expectedId);
Assert.Equal(expectedId, sut.Id);
}
[Fact]
public void GivenNullId_WhenConstructingUser_ThenThrowsArgumentNullException()
{
string? invalidId = null;
Assert.Throws<ArgumentNullException>(() => new User(invalidId!));
}
[Theory]
[InlineData("")]
[InlineData("   ")]
public void GivenEmptyOrWhitespaceId_WhenConstructingUser_ThenThrowsArgumentException(string invalidId)
{
Assert.Throws<ArgumentException>(() => new User(invalidId));
}
}
}

=== FILE: F:\Members\Autodesk.Domain.Test\UserTests.cs ===

﻿using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Autodesk.Domain;
using Xunit;
namespace Autodesk.Domain.Tests
{
public class UserTests
{
private static IList<ValidationResult> Validate(object model)
{
var results = new List<ValidationResult>();
var context = new ValidationContext(model, serviceProvider: null, items: null);
Validator.TryValidateObject(model, context, results, validateAllProperties: true);
return results;
}
[Fact]
public void Constructor_SetsId()
{
var id = Guid.NewGuid().ToString();
var user = new User(id);
Assert.Equal(id, user.Id);
}
[Fact]
public void ValidUser_PassesValidation()
{
var user = new User(Guid.NewGuid().ToString())
{
Name      = "Alice",
Lastname  = "Johnson",
Email     = "alice.johnson@example.com"
};
var results = Validate(user);
Assert.Empty(results);
}
[Theory]
[InlineData(null)]
[InlineData("")]
public void MissingName_FailsRequired(string? name)
{
var user = new User(Guid.NewGuid().ToString())
{
Name      = name,
Lastname  = "Doe",
Email     = "jane.doe@example.com"
};
var results = Validate(user);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(User.Name)) &&
r.ErrorMessage == "Name is required.");
}
[Theory]
[InlineData("Al")]
public void Name_TooShort_FailsMinLength(string name)
{
var user = new User(Guid.NewGuid().ToString())
{
Name      = name,
Lastname  = "Doe",
Email     = "jane.doe@example.com"
};
var results = Validate(user);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(User.Name)) &&
r.ErrorMessage == "Name must be at least 3 characters long.");
}
[Fact]
public void Name_TooLong_FailsMaxLength()
{
var longName = new string('N', 101);
var user = new User(Guid.NewGuid().ToString())
{
Name      = longName,
Lastname  = "Doe",
Email     = "jane.doe@example.com"
};
var results = Validate(user);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(User.Name)) &&
r.ErrorMessage == "Name must be maximun 100 characters long.");
}
[Theory]
[InlineData(null)]
[InlineData("")]
public void MissingLastname_FailsRequired(string? lastname)
{
var user = new User(Guid.NewGuid().ToString())
{
Name      = "Jane",
Lastname  = lastname,
Email     = "jane.doe@example.com"
};
var results = Validate(user);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(User.Lastname)) &&
r.ErrorMessage == "Lastname is required.");
}
[Theory]
[InlineData("Do")]
public void Lastname_TooShort_FailsMinLength(string lastname)
{
var user = new User(Guid.NewGuid().ToString())
{
Name      = "Jane",
Lastname  = lastname,
Email     = "jane.doe@example.com"
};
var results = Validate(user);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(User.Lastname)) &&
r.ErrorMessage == "Lastname must be at least 3 characters long.");
}
[Fact]
public void Lastname_TooLong_FailsMaxLength()
{
var longLastname = new string('L', 101);
var user = new User(Guid.NewGuid().ToString())
{
Name      = "Jane",
Lastname  = longLastname,
Email     = "jane.doe@example.com"
};
var results = Validate(user);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(User.Lastname)) &&
r.ErrorMessage == "Lastname must be maximun 100 characters long.");
}
[Theory]
[InlineData(null)]
[InlineData("")]
public void MissingEmail_FailsRequired(string? email)
{
var user = new User(Guid.NewGuid().ToString())
{
Name      = "Jane",
Lastname  = "Doe",
Email     = email
};
var results = Validate(user);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(User.Email)) &&
r.ErrorMessage == "Email is required.");
}
[Fact]
public void Email_TooShort_FailsMinLength()
{
var user = new User(Guid.NewGuid().ToString())
{
Name      = "Jane",
Lastname  = "Doe",
Email     = "a@"
};
var results = Validate(user);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(User.Email)) &&
r.ErrorMessage == "Email must be at least 3 characters long.");
}
[Fact]
public void Email_TooLong_FailsMaxLength()
{
var localPart = new string('x', 95);
var email = $"{localPart}@d.com";
var user = new User(Guid.NewGuid().ToString())
{
Name      = "Jane",
Lastname  = "Doe",
Email     = email
};
var results = Validate(user);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(User.Email)) &&
r.ErrorMessage == "Email must be maximun 100 characters long.");
}
[Fact]
public void ValidEmailAtBounds_PassesValidation()
{
var localPart = new string('a', 94);
var email = $"{localPart}@x.com";
var user = new User(Guid.NewGuid().ToString())
{
Name      = "Jane",
Lastname  = "Doe",
Email     = email
};
var results = Validate(user);
Assert.Empty(results);
}
}
}

=== FILE: F:\Members\Autodesk.Domain.Test\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Domain.Test\obj\Debug\net8.0\Autodesk.Domain.Test.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Domain.Test")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b0c710b065a455c6e032d341534a5ba843862c20")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Domain.Test")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Domain.Test")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Domain.Test\obj\Debug\net8.0\Autodesk.Domain.Test.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::Xunit;

=== FILE: F:\Members\Autodesk.Infrastructure\Implementation\CRUD\Invoice\Create\InvoiceCreate.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Autodesk.Application.UseCases.CRUD.Invoice;
using Infrastructure.Repositories.Abstract.CRUD.Create;
using Persistence.Context.Interface;
namespace Autodesk.Infrastructure.Implementation.CRUD.Invoice.Create
{
using Invoice = Domain.Invoice;
public class InvoiceCreate(
IUnitOfWork unitOfWork,
IErrorHandler errorHandler,
IErrorLogCreate errorLogCreate
) : CreateRepository<Invoice>(unitOfWork), IInvoiceCreate
{
private readonly IErrorHandler _errorHandler = errorHandler;
public async Task<Operation<Invoice>> CreateInvoiceAsync(Invoice entity)
{
try
{
await CreateEntity(entity);
await unitOfWork.CommitAsync();
return Operation<Invoice>.Success(entity);
}
catch (Exception ex)
{
return _errorHandler.Fail<Invoice>(ex, errorLogCreate);
}
}
}
}

=== FILE: F:\Members\Autodesk.Infrastructure\Implementation\CRUD\Invoice\Query\ReadFilter\InvoiceRead.cs ===

﻿using Application.Common.Pagination;
using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Autodesk.Application.UseCases.CRUD.Invoice.Query;
using Infrastructure.Repositories.Abstract.CRUD.Query.Read;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Persistence.Context.Interface;
using System.Linq.Expressions;
namespace Autodesk.Infrastructure.Implementation.CRUD.Invoice.Query.ReadFilter
{
using Invoice = Domain.Invoice;
public class InvoiceRead(
IUnitOfWork unitOfWork,
IErrorHandler errorHandler,
IMemoryCache cache,
IErrorLogCreate errorLogCreate
) : ReadRepository<Invoice>(
unitOfWork,
q => q.OrderBy(i => i.InvoiceDate).ThenBy(i => i.Id)
), IInvoiceRead
{
private readonly IErrorHandler _errorHandler = errorHandler;
private readonly IMemoryCache _cache = cache;
private bool _includeProducts;
private readonly Func<Invoice, (string Primary, string Secondary)> _cursorSelector
= i => (i.InvoiceDate.ToString("o"), i.Id);
public async Task<Operation<PagedResult<Invoice>>> GetInvoicesPageAsync(
string? invoiceNumber,
string? customerName,
string? cursor,
int pageSize,
bool includeProducts = false)
{
try
{
_includeProducts = includeProducts;
var cacheKey = $"invoices:{invoiceNumber}:{customerName}:{cursor}:{pageSize}:{includeProducts}";
if (_cache.TryGetValue(cacheKey, out PagedResult<Invoice> cached))
{
return Operation<PagedResult<Invoice>>.Success(cached);
}
var filter = BuildFilter(invoiceNumber, customerName);
var result = await GetPageAsync(filter, cursor, pageSize);
var paged = result.Data;
_cache.Set(cacheKey, paged, TimeSpan.FromMinutes(5));
return Operation<PagedResult<Invoice>>.Success(paged);
}
catch (Exception ex)
{
return _errorHandler.Fail<PagedResult<Invoice>>(ex, errorLogCreate);
}
}
private static Expression<Func<Invoice, bool>> BuildFilter(
string? invoiceNumber,
string? customerName)
{
if (!string.IsNullOrWhiteSpace(invoiceNumber))
return i => i.InvoiceNumber == invoiceNumber!;
if (!string.IsNullOrWhiteSpace(customerName))
return i => EF.Functions.Like(i.CustomerName!, $"%{customerName}%");
return i => true;
}
protected override IQueryable<Invoice> ApplyCursorFilter(
IQueryable<Invoice> query,
string cursor)
{
var parts = Uri.UnescapeDataString(cursor).Split('|', 2);
var dateString = parts[0];
var lastId = parts.Length > 1 ? parts[1] : string.Empty;
return query.Where(i =>
Persistence.Context.Implementation.DataContext
.StringCompareOrdinal(i.InvoiceDate.ToString("o"), dateString) > 0
|| (i.InvoiceDate.ToString("o") == dateString
&& Persistence.Context.Implementation.DataContext
.StringCompareOrdinal(i.Id, lastId) > 0)
);
}
protected override string? BuildNextCursor(
List<Invoice> items,
int size)
{
if (items.Count <= size) return null;
var extra = items[size];
var (p, s) = _cursorSelector(extra);
return Uri.EscapeDataString($"{p}|{s}");
}
protected override IQueryable<Invoice> BuildBaseQuery(
Expression<Func<Invoice, bool>>? filter)
{
var q = base.BuildBaseQuery(filter);
if (_includeProducts)
q = q.Include(i => i.Products);
return q;
}
}
}

=== FILE: F:\Members\Autodesk.Infrastructure\Implementation\CRUD\User\Create\UserCreate.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Autodesk.Application.UseCases.CRUD.User;
using Autodesk.Application.UseCases.CRUD.User.Query;
using Infrastructure.Repositories.Abstract.CRUD.Create;
using Microsoft.Extensions.Caching.Memory;
using Persistence.Context.Interface;
namespace Autodesk.Infrastructure.Implementation.CRUD.User.Create
{
using User = Domain.User;
public class UserCreate(IUnitOfWork unitOfWork, IErrorHandler errorHandler, IErrorLogCreate errorLogCreate, IUserRead userRead) : CreateRepository<User>(unitOfWork), IUserCreate
{
public async Task<Operation<User>> CreateUserAsync(User entity)
{
try
{
await CreateEntity(entity);
await unitOfWork.CommitAsync();
userRead.InvalidateAllUserCache();
return Operation<User>.Success(entity);
}
catch (Exception ex)
{
return errorHandler.Fail<User>(ex, errorLogCreate);
}
}
}
}

=== FILE: F:\Members\Autodesk.Infrastructure\Implementation\CRUD\User\Delete\UserDelete.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Autodesk.Application.UseCases.CRUD.User;
using Autodesk.Application.UseCases.CRUD.User.Query;
using Domain;
using Infrastructure.Repositories.Abstract.CRUD.Delete;
using Microsoft.Extensions.Caching.Memory;
using Persistence.Context.Interface;
namespace Autodesk.Infrastructure.Implementation.CRUD.User.Delete
{
using User = Domain.User;
public class UserDelete(IUnitOfWork unitOfWork, IErrorHandler errorHandler, IErrorLogCreate errorLogCreate, IUserRead userRead) : DeleteRepository<User>(unitOfWork), IUserDelete
{
public async Task<Operation<bool>> DeleteUserAsync(string id)
{
try
{
var result = await DeleteEntity(id);
await unitOfWork.CommitAsync();
userRead.InvalidateAllUserCache();
return result;
}
catch (Exception ex)
{
return errorHandler.Fail<bool>(ex, errorLogCreate);
}
}
}
}

=== FILE: F:\Members\Autodesk.Infrastructure\Implementation\CRUD\User\Query\ReadFilter\UserRead.cs ===

﻿using Application.Common.Pagination;
using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Autodesk.Application.UseCases.CRUD.User.Query;
using Autodesk.Domain;
using Infrastructure.Repositories.Abstract.CRUD.Query.Read;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Primitives;
using Persistence.Context.Implementation;
using Persistence.Context.Interface;
using System;
using System.Linq.Expressions;
using System.Reactive;
using System.Reactive.Linq;
using System.Threading;
using System.Threading.Tasks;
public class UserRead(IUnitOfWork unitOfWork, IErrorHandler errorHandler, IMemoryCache cache, IErrorLogCreate errorLogCreate) : ReadRepository<User>(unitOfWork, q => q.OrderBy(u => u.Name!).ThenBy(u => u.Id)), IUserRead
{
private readonly IErrorHandler errorHandler = errorHandler;
private readonly IMemoryCache cache = cache;
private readonly Func<User, (string Primary, string Secondary)> cursorSelector = u => (u.Name!, u.Id);
private static CancellationTokenSource _userCacheTokenSource = new();
public async Task<Operation<PagedResult<User>>> GetUsersPageAsync(
string? id,
string? name,
string? cursor,
int pageSize)
{
try
{
var cacheKey = $"users:{id}:{name}:{cursor}:{pageSize}";
if (cache.TryGetValue(cacheKey, out PagedResult<User> cached))
{
return Operation<PagedResult<User>>.Success(cached);
}
var result = await GetPageAsync(BuildFilter(id, name), cursor, pageSize);
var pagedResult = result.Data;
var cacheOptions = new MemoryCacheEntryOptions()
.AddExpirationToken(new CancellationChangeToken(_userCacheTokenSource.Token))
.SetAbsoluteExpiration(TimeSpan.FromMinutes(5));
cache.Set(cacheKey, pagedResult, cacheOptions);
return Operation<PagedResult<User>>.Success(pagedResult);
}
catch (Exception ex)
{
return errorHandler.Fail<PagedResult<User>>(ex, errorLogCreate);
}
}
private static Expression<Func<User, bool>> BuildFilter(string? id, string? name)
{
if (ShouldFilterById(id))
{
return BuildIdFilter(id!);
}
if (ShouldFilterByName(name))
{
return BuildNameFilter(name!);
}
return ReturnDefaultFilter();
}
private static bool ShouldFilterById(string? id) => !string.IsNullOrWhiteSpace(id);
private static bool ShouldFilterByName(string? name) => !string.IsNullOrWhiteSpace(name);
private static Expression<Func<User, bool>> BuildIdFilter(string id) => u => u.Id == id;
private static Expression<Func<User, bool>> BuildNameFilter(string name) => u => EF.Functions.Like(u.Name!, $"%{name}%");
private static Expression<Func<User, bool>> ReturnDefaultFilter() => u => true;
protected override IQueryable<User> ApplyCursorFilter(IQueryable<User> query, string cursor)
{
var parts = Uri.UnescapeDataString(cursor).Split('|', 2);
var name = parts[0];
var lastS = parts.Length > 1 ? parts[1] : string.Empty;
return query.Where
(
u => DataContext.StringCompareOrdinal(u.Name!, name) > 0 || (u.Name == name && DataContext.StringCompareOrdinal(u.Id, lastS) > 0)
);
}
protected override string? BuildNextCursor(List<User> items, int size)
{
if (items.Count <= size) return null;
var extra = items[size];
var (p, s) = cursorSelector(extra);
return Uri.EscapeDataString($"{p}|{s}");
}
public void InvalidateAllUserCache()
{
_userCacheTokenSource.Cancel();
_userCacheTokenSource = new CancellationTokenSource();
}
public List<User> GetStreamUsers(CancellationToken cancellationToken = default)
{
var result = GetAllMembers(cancellationToken).Result;
return [.. result.Data.Items];
}
}

=== FILE: F:\Members\Autodesk.Infrastructure\Implementation\CRUD\User\Update\UserUpdate.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.CRUD;
using Application.UseCases.Repository.UseCases.CRUD;
using Autodesk.Application.UseCases.CRUD.User;
using Autodesk.Application.UseCases.CRUD.User.Query;
using Infrastructure.Repositories.Abstract.CRUD.Update;
using Infrastructure.Result;
using Microsoft.Extensions.Caching.Memory;
using Persistence.Context.Interface;
namespace Autodesk.Infrastructure.Implementation.CRUD.User.Update
{
using User = Domain.User;
public class UserUpdate(
IUnitOfWork unitOfWork,
IErrorHandler errorHandler,
IErrorLogCreate errorLogCreate,
IUserRead userRead
) : UpdateRepository<User>(unitOfWork), IUserUpdate
{
public override User ApplyUpdates(User modified, User unmodified)
{
unmodified.Name = modified.Name;
unmodified.Lastname = modified.Lastname;
unmodified.Email = modified.Email;
userRead.InvalidateAllUserCache();
return unmodified;
}
public async Task<Operation<bool>> UpdateUserAsync(User entity)
{
try
{
var result = await UpdateEntity(entity);
await unitOfWork.CommitAsync();
return result;
}
catch (Exception ex)
{
return errorHandler.Fail<bool>(ex, errorLogCreate);
}
}
}
}

=== FILE: F:\Members\Autodesk.Infrastructure\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Infrastructure\obj\Debug\net8.0\Autodesk.Infrastructure.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Infrastructure")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Infrastructure")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Infrastructure\obj\Debug\net8.0\Autodesk.Infrastructure.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Autodesk.Infrastructure.Test\Implementation\TestsBase.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Autodesk.Domain;
using Autodesk.Infrastructure.Implementation.CRUD.User.Create;
using Autodesk.Infrastructure.Implementation.CRUD.User.Delete;
using Autodesk.Infrastructure.Implementation.CRUD.User.Update;
using Infrastructure.Repositories.CRUD;
using Infrastructure.Result;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Moq;
using Persistence.Context.Implementation;
using Persistence.CreateStructure.Constants.ColumnType.Database;
namespace Autodesk.Infrastructure.Test.Implementation
{
public class TestsBase
{
private const string Folder = "Implementation";
private const string File = "ErrorMappings.json";
private static string BaseDirectory => AppContext.BaseDirectory;
protected static string JsonFile => Path.Combine(BaseDirectory, Folder, File);
private static DbContextOptions<DataContext> CreateOption() =>
new DbContextOptionsBuilder<DataContext>()
.UseInMemoryDatabase(Guid.NewGuid().ToString())
.Options;
protected static DbContextOptions<DataContext> Opts => CreateOption();
protected static ErrorHandler Errors => new();
protected DataContext Ctx;
protected UserCreate RepoCreate;
protected UserDelete RepoDelete;
protected UserUpdate RepoUpdate;
protected UnitOfWork UnitOfWork;
protected ErrorLogCreate ErrorLogCreate;
protected Mock<IMemoryCache> Cache;
protected UserRead RepoRead;
private readonly Mock<IErrorHandler> _mockErrorHandler;
public TestsBase()
{
Errors.LoadErrorMappings(JsonFile);
_mockErrorHandler = new Mock<IErrorHandler>();
Ctx = new DataContext(Opts, new SQLite());
UnitOfWork = new UnitOfWork(Ctx);
ErrorLogCreate = new ErrorLogCreate(UnitOfWork);
Cache = new Mock<IMemoryCache>();
RepoRead = new UserRead(UnitOfWork, _mockErrorHandler.Object, Cache.Object, ErrorLogCreate);
RepoCreate = new UserCreate(UnitOfWork, Errors, ErrorLogCreate, RepoRead);
RepoDelete = new UserDelete(UnitOfWork, Errors, ErrorLogCreate, RepoRead);
RepoUpdate = new UserUpdate(UnitOfWork, Errors, ErrorLogCreate, RepoRead);
}
}
}

=== FILE: F:\Members\Autodesk.Infrastructure.Test\Implementation\CRUD\Invoice\Create\InvoiceCreateTests.cs ===

﻿using System;
using System.Threading.Tasks;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Moq;
using Xunit;
using Persistence.Context.Implementation;
using Persistence.CreateStructure.Constants.ColumnType.Database;
using Persistence.Context.Interface;
using Application.Result;
using Application.Result.Error;
using Application.UseCases.Repository.UseCases.CRUD;
using Domain;
namespace Autodesk.Infrastructure.Implementation.CRUD.Invoice.Create.Tests
{
public class InvoiceCreateTests : IDisposable
{
private readonly SqliteConnection _connection;
private readonly DataContext _context;
private readonly UnitOfWork _uow;
private readonly InvoiceCreate _service;
private readonly Mock<IErrorHandler> _mockErrorHandler;
private readonly Mock<IErrorLogCreate> _mockErrorLogCreate;
public InvoiceCreateTests()
{
_connection = new SqliteConnection("Data Source=:memory:");
_connection.Open();
var options = new DbContextOptionsBuilder<DataContext>()
.UseSqlite(_connection)
.Options;
_context = new DataContext(options, new SQLite());
_context.Database.EnsureCreated();
_uow = new UnitOfWork(_context);
_mockErrorHandler     = new Mock<IErrorHandler>();
_mockErrorLogCreate   = new Mock<IErrorLogCreate>();
_service = new InvoiceCreate(
_uow,
_mockErrorHandler.Object,
_mockErrorLogCreate.Object
);
}
[Fact]
public async Task CreateInvoiceAsync_Success_PersistsAndReturnsEntity()
{
var invoice = new Domain.Invoice(Guid.NewGuid().ToString())
{
InvoiceNumber = "INV-1001",
InvoiceDate   = DateTime.UtcNow,
CustomerName  = "Acme Corp",
TotalAmount   = 250m
};
var result = await _service.CreateInvoiceAsync(invoice);
Assert.True(result.IsSuccessful);
Assert.Equal(invoice, result.Data);
var persisted = await _context.Set<Domain.Invoice>().FindAsync(invoice.Id);
Assert.NotNull(persisted);
Assert.Equal("INV-1001", persisted.InvoiceNumber);
}
[Fact]
public async Task CreateInvoiceAsync_DatabaseError_InvokesErrorHandler()
{
var expectedFailure = Operation<Domain.Invoice>.Failure("db error", ErrorTypes.Database);
_mockErrorHandler
.Setup(h => h.Fail<Domain.Invoice>(It.IsAny<Exception>(), _mockErrorLogCreate.Object))
.Returns(expectedFailure);
var badInvoice = new Domain.Invoice(Guid.NewGuid().ToString())
{
InvoiceNumber = null!,
InvoiceDate   = DateTime.UtcNow,
CustomerName  = "Test",
TotalAmount   = 100m
};
var result = await _service.CreateInvoiceAsync(badInvoice);
Assert.False(result.IsSuccessful);
Assert.Equal(expectedFailure, result);
_mockErrorHandler.Verify(
h => h.Fail<Domain.Invoice>(It.IsAny<Exception>(), _mockErrorLogCreate.Object),
Times.Once
);
}
public void Dispose()
{
_context.Dispose();
_connection.Close();
}
}
}

=== FILE: F:\Members\Autodesk.Infrastructure.Test\Implementation\CRUD\User\Create\UserCreateTests.cs ===

﻿using Autodesk.Domain;
using Persistence.Repositories;
namespace Autodesk.Infrastructure.Test.Implementation.CRUD.User.Create
{
using User = Domain.User;
public class UserCreateTests: TestsBase
{
[Fact]
public async Task GivenNewUserWithUniqueEmail_WhenCreating_ThenReturnsSuccess()
{
var newUser = new User(Guid.NewGuid().ToString())
{
Name = "Alice",
Email = "alice@email.com",
Lastname = "Robert"
};
var result = await RepoCreate.CreateUserAsync(newUser);
Assert.True(result.IsSuccessful);
}
}
}

=== FILE: F:\Members\Autodesk.Infrastructure.Test\Implementation\CRUD\User\Delete\UserDeleteTests.cs ===

﻿using Autodesk.Domain;
namespace Autodesk.Infrastructure.Test.Implementation.CRUD.User.Delete
{
using User = Domain.User;
public class UserDeleteTests : TestsBase
{
[Fact]
public async Task GivenExistingUserId_WhenDeleting_ThenReturnsSuccess()
{
var id = Guid.NewGuid().ToString();
var newUser = new User(id)
{
Name = "Alice",
Email = "alice@email.com",
Lastname = "Robert"
};
await RepoCreate.CreateEntity(newUser);
var result = await RepoDelete.DeleteEntity(id);
}
[Fact]
public async Task GivenNonexistentUserId_WhenDeleting_ThenReturnsFailure()
{
var id = Guid.NewGuid().ToString();
var newUser = new User(id)
{
Name = "Alice",
Email = "alice@email.com",
Lastname = "Robert"
};
await RepoCreate.CreateEntity(newUser);
var result = await RepoDelete.DeleteEntity("NOT_ID");
Assert.False(result.IsSuccessful);
Assert.False(result.Data);
}
}
}

=== FILE: F:\Members\Autodesk.Infrastructure.Test\Implementation\CRUD\User\Update\UserUpdateTests.cs ===

﻿using Autodesk.Domain;
namespace Autodesk.Infrastructure.Test.Implementation.CRUD.User.Update
{
using User = Domain.User;
public class UserUpdateTests : TestsBase
{
[Fact]
public async Task GivenExistingUser_WhenUpdatingName_ThenReturnsSuccess()
{
var newUser = new User(Guid.NewGuid().ToString())
{
Name = "Alice",
Email = "alice@email.com",
Lastname = "Robert"
};
await RepoCreate.CreateEntity(newUser);
newUser.Name = "Eve";
var result = await RepoUpdate.UpdateEntity(newUser);
}
[Fact]
public async Task GivenNonexistentUser_WhenUpdating_ThenReturnsFailure()
{
var newUser = new User(Guid.NewGuid().ToString())
{
Name = "Alice",
Email = "alice@email.com",
Lastname = "Robert"
};
await RepoCreate.CreateEntity(newUser);
newUser.Name = "Eve";
newUser.Id = Guid.NewGuid().ToString();
var result = await RepoUpdate.UpdateEntity(newUser);
Assert.False(result.IsSuccessful);
Assert.False(result.Data);
}
}
}

=== FILE: F:\Members\Autodesk.Infrastructure.Test\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Infrastructure.Test\obj\Debug\net8.0\Autodesk.Infrastructure.Test.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Infrastructure.Test")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Infrastructure.Test")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Infrastructure.Test")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Infrastructure.Test\obj\Debug\net8.0\Autodesk.Infrastructure.Test.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::Xunit;

=== FILE: F:\Members\Autodesk.Members.Portal\Program.cs ===

using Autodesk.Members.Portal;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add<App>("#app");
builder.RootComponents.Add<HeadOutlet>("head::after");
builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });
var apiConfig = builder.Configuration.GetSection("AutodeskApi");
var baseUri = apiConfig.GetValue<string>("BaseAddress");
builder.Services.AddHttpClient("AutodeskApi", api =>
{
api.BaseAddress = new Uri(baseUri);
});
await builder.Build().RunAsync();

=== FILE: F:\Members\Autodesk.Members.Portal\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Members.Portal\obj\Debug\net8.0\Autodesk.Members.Portal.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Members.Portal")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b0c710b065a455c6e032d341534a5ba843862c20")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Members.Portal")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Members.Portal")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Members.Portal\obj\Debug\net8.0\Autodesk.Members.Portal.GlobalUsings.g.cs ===

global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Autodesk.Persistence\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Persistence\obj\Debug\net8.0\Autodesk.Persistence.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Persistence")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Persistence")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Persistence")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Persistence\obj\Debug\net8.0\Autodesk.Persistence.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Autodesk.Persistence.Test\Context\DataContextTests.cs ===

﻿using Microsoft.EntityFrameworkCore;
using Persistence.Context.Implementation;
using Persistence.CreateStructure.Constants.ColumnType;
namespace Autodesk.Persistence.Test.Context
{
public class DataContextTests
{
private class FakeColumnTypes : IColumnTypes
{
public string Integer => "INTEGER";
public string Long => "INTEGER";
public string TypeBool => "INTEGER";
public string TypeTime => "TEXT";
public string TypeVar => "TEXT";
public string TypeVar50 => "TEXT";
public string TypeVar150 => "TEXT";
public string TypeVar64 => "TEXT";
public string TypeBlob => "BLOB";
public string Strategy => "Sqlite:Autoincrement";
public object? SqlStrategy => true;
public string Name => string.Empty;
public object? Value => null;
public string TypeDateTime => "TEXT";
public string TypeDateTimeOffset => "TEXT";
}
}
}

=== FILE: F:\Members\Autodesk.Persistence.Test\Context\DataHelperTests.cs ===

﻿using Autodesk.Domain;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using Microsoft.EntityFrameworkCore;
using Persistence.CreateStructure.Constants.ColumnType;
using Persistence.CreateStructure.Constants;
using Persistence.Context.Implementation;
namespace Autodesk.Persistence.Test.Context
{
public class DataHelperTests
{
private class FakeColumnTypes : IColumnTypes
{
public string Integer => "INTEGER";
public string Long => "INTEGER";
public string TypeBool => "INTEGER";
public string TypeTime => "TEXT";
public string TypeVar => "TEXT";
public string TypeVar50 => "TEXT";
public string TypeVar150 => "TEXT";
public string TypeVar64 => "TEXT";
public string TypeBlob => "BLOB";
public string Strategy => "Sqlite:Autoincrement";
public object? SqlStrategy => true;
public string Name => string.Empty;
public object? Value => null;
public string TypeDateTime => "TEXT";
public string TypeDateTimeOffset => "TEXT";
}
[Fact]
public void SetTableUsers_ConfiguresEntityCorrectly()
{
var conventions = new ConventionSet();
var modelBuilder = new ModelBuilder(conventions);
var columnTypes = new FakeColumnTypes();
UserTable.Create(modelBuilder, columnTypes);
var entityType = modelBuilder.Model.FindEntityType(typeof(User));
Assert.NotNull(entityType);
Assert.Equal("Users", entityType.GetTableName());
var idProp = entityType.FindProperty(nameof(User.Id));
Assert.NotNull(idProp);
Assert.Equal(columnTypes.TypeVar, idProp.GetColumnType());
Assert.Contains(idProp, entityType.FindPrimaryKey().Properties);
var emailProp = entityType.FindProperty(nameof(User.Email));
Assert.NotNull(emailProp);
Assert.False(emailProp.IsNullable);
Assert.Equal(columnTypes.TypeVar, emailProp.GetColumnType());
var emailIndex = entityType.GetIndexes()
.Single(i => i.Properties.Any(p => p.Name == nameof(User.Email)));
Assert.True(emailIndex.IsUnique);
Assert.Equal(Database.Index.IndexEmail, emailIndex.GetDatabaseName());
var activeProp = entityType.FindProperty(nameof(User.Active));
Assert.NotNull(activeProp);
Assert.False(activeProp.IsNullable);
Assert.Equal(columnTypes.TypeBool, activeProp.GetColumnType());
}
}
}

=== FILE: F:\Members\Autodesk.Persistence.Test\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Persistence.Test\obj\Debug\net8.0\Autodesk.Persistence.Test.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Persistence.Test")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Persistence.Test")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Persistence.Test")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Persistence.Test\obj\Debug\net8.0\Autodesk.Persistence.Test.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::Xunit;

=== FILE: F:\Members\Autodesk.Shared\Models\InvoiceQueryParams.cs ===

﻿using Autodesk.Shared.Pagination;
using System.ComponentModel.DataAnnotations;
namespace Autodesk.Shared.Models
{
public class InvoiceQueryParams
{
[StringLength(50, ErrorMessage = "InvoiceNumber cannot exceed 50 characters.")]
public string? InvoiceNumber { get; set; }
[StringLength(200, ErrorMessage = "CustomerName cannot exceed 200 characters.")]
public string? CustomerName { get; set; }
public string? Cursor { get; set; }
[Range(1, PaginationDefaults.MaxPageSize,
ErrorMessage = "PageSize must be between 1 and " + nameof(PaginationDefaults.MaxPageSize))]
public int PageSize { get; set; } = PaginationDefaults.DefaultPageSize;
public bool IncludeProducts { get; set; }
}
}

=== FILE: F:\Members\Autodesk.Shared\Models\UserQueryParams.cs ===

﻿using Autodesk.Shared.Pagination;
using System.ComponentModel.DataAnnotations;
namespace Autodesk.Shared.Models
{
public class UserQueryParams
{
public string? Id { get; set; }
[StringLength(100, ErrorMessage = "Name cannot exceed 100 characters.")]
public string? Name { get; set; }
[Range(1, PaginationDefaults.MaxPageSize,
ErrorMessage = "PageSize must be between 1 and " + nameof(PaginationDefaults.MaxPageSize))]
public int PageSize { get; set; } = PaginationDefaults.DefaultPageSize;
public string? Cursor { get; set; }
}
}

=== FILE: F:\Members\Autodesk.Shared\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Shared\obj\Debug\net8.0\Autodesk.Shared.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Shared")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b0c710b065a455c6e032d341534a5ba843862c20")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Shared")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Shared")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Shared\obj\Debug\net8.0\Autodesk.Shared.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Autodesk.Shared\Pagination\PaginationDefaults.cs ===

﻿namespace Autodesk.Shared.Pagination
{
public static class PaginationDefaults
{
public const int MaxPageSize = 100;
public const int DefaultPageSize = 8;
}
}

=== FILE: F:\Members\Autodesk.Shared.Test\InvoiceQueryParamsTests.cs ===

﻿using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Autodesk.Shared.Models;
using Autodesk.Shared.Pagination;
using Xunit;
namespace Autodesk.Shared.Models.Tests
{
public class InvoiceQueryParamsTests
{
private static IList<ValidationResult> Validate(object model)
{
var results = new List<ValidationResult>();
var context = new ValidationContext(model, serviceProvider: null, items: null);
Validator.TryValidateObject(model, context, results, validateAllProperties: true);
return results;
}
[Fact]
public void DefaultPageSize_IsPaginationDefault()
{
var qp = new InvoiceQueryParams();
Assert.Equal(PaginationDefaults.DefaultPageSize, qp.PageSize);
}
[Fact]
public void ValidQueryParams_PassesValidation()
{
var qp = new InvoiceQueryParams
{
InvoiceNumber   = "INV-1001",
CustomerName    = "Acme Corporation",
Cursor          = "abc123",
PageSize        = 20,
IncludeProducts = true
};
var results = Validate(qp);
Assert.Empty(results);
}
[Theory]
[InlineData(51)]
[InlineData(100)]
public void InvoiceNumber_TooLong_FailsValidation(int length)
{
var qp = new InvoiceQueryParams
{
InvoiceNumber = new string('X', length)
};
var results = Validate(qp);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(InvoiceQueryParams.InvoiceNumber)) &&
r.ErrorMessage!.Contains("cannot exceed 50 characters"));
}
[Theory]
[InlineData(201)]
[InlineData(500)]
public void CustomerName_TooLong_FailsValidation(int length)
{
var qp = new InvoiceQueryParams
{
CustomerName = new string('Y', length)
};
var results = Validate(qp);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(InvoiceQueryParams.CustomerName)) &&
r.ErrorMessage!.Contains("cannot exceed 200 characters"));
}
[Theory]
[InlineData(0)]
[InlineData(-5)]
[InlineData(PaginationDefaults.MaxPageSize + 1)]
[InlineData(1000)]
public void PageSize_OutOfRange_FailsValidation(int pageSize)
{
var qp = new InvoiceQueryParams
{
PageSize = pageSize
};
var results = Validate(qp);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(InvoiceQueryParams.PageSize)) &&
r.ErrorMessage!.Contains("PageSize must be between 1 and"));
}
[Theory]
[InlineData(1)]
[InlineData(PaginationDefaults.MaxPageSize)]
public void PageSize_AtBounds_PassesValidation(int pageSize)
{
var qp = new InvoiceQueryParams
{
PageSize = pageSize
};
var results = Validate(qp);
Assert.Empty(results);
}
}
}

=== FILE: F:\Members\Autodesk.Shared.Test\PaginationDefaultsTests.cs ===

﻿using Xunit;
using Autodesk.Shared.Pagination;
namespace Autodesk.Shared.Pagination.Tests
{
public class PaginationDefaultsTests
{
[Fact]
public void MaxPageSize_Is100()
{
Assert.Equal(100, PaginationDefaults.MaxPageSize);
}
[Fact]
public void DefaultPageSize_Is8()
{
Assert.Equal(8, PaginationDefaults.DefaultPageSize);
}
}
}

=== FILE: F:\Members\Autodesk.Shared.Test\UserQueryParamsTests.cs ===

﻿using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Autodesk.Shared.Models;
using Autodesk.Shared.Pagination;
using Xunit;
namespace Autodesk.Shared.Models.Tests
{
public class UserQueryParamsTests
{
private static IList<ValidationResult> Validate(object model)
{
var results = new List<ValidationResult>();
var context = new ValidationContext(model, serviceProvider: null, items: null);
Validator.TryValidateObject(model, context, results, validateAllProperties: true);
return results;
}
[Fact]
public void DefaultPageSize_IsPaginationDefault()
{
var qp = new UserQueryParams();
Assert.Equal(PaginationDefaults.DefaultPageSize, qp.PageSize);
}
[Fact]
public void ValidQueryParams_PassesValidation()
{
var qp = new UserQueryParams
{
Id       = Guid.NewGuid().ToString(),
Name     = "Alice Smith",
PageSize = 10,
Cursor   = "cursor123"
};
var results = Validate(qp);
Assert.Empty(results);
}
[Theory]
[InlineData(101)]
[InlineData(200)]
public void Name_TooLong_FailsValidation(int length)
{
var qp = new UserQueryParams
{
Name = new string('Z', length)
};
var results = Validate(qp);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(UserQueryParams.Name)) &&
r.ErrorMessage!.Contains("cannot exceed 100 characters"));
}
[Theory]
[InlineData(0)]
[InlineData(-1)]
[InlineData(PaginationDefaults.MaxPageSize + 1)]
[InlineData(1000)]
public void PageSize_OutOfRange_FailsValidation(int pageSize)
{
var qp = new UserQueryParams
{
PageSize = pageSize
};
var results = Validate(qp);
Assert.Contains(results, r =>
r.MemberNames.Contains(nameof(UserQueryParams.PageSize)) &&
r.ErrorMessage!.Contains("PageSize must be between 1 and"));
}
[Theory]
[InlineData(1)]
[InlineData(PaginationDefaults.MaxPageSize)]
public void PageSize_AtBounds_PassesValidation(int pageSize)
{
var qp = new UserQueryParams
{
PageSize = pageSize
};
var results = Validate(qp);
Assert.Empty(results);
}
}
}

=== FILE: F:\Members\Autodesk.Shared.Test\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Autodesk.Shared.Test\obj\Debug\net8.0\Autodesk.Shared.Test.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Autodesk.Shared.Test")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b0c710b065a455c6e032d341534a5ba843862c20")]
[assembly: System.Reflection.AssemblyProductAttribute("Autodesk.Shared.Test")]
[assembly: System.Reflection.AssemblyTitleAttribute("Autodesk.Shared.Test")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Autodesk.Shared.Test\obj\Debug\net8.0\Autodesk.Shared.Test.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::Xunit;

=== FILE: F:\Members\Commands\ChatCommand.cs ===

﻿using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
namespace Commands
{
public class ChatCommand : ICommand
{
private readonly ILogger<ChatCommand> _logger;
private readonly ILinkedInChat _iLinkedInChat;
public ChatCommand(ILogger<ChatCommand> logger, ILinkedInChat iLinkedInChat)
{
_logger = logger ?? throw new ArgumentNullException(nameof(logger));
_iLinkedInChat = iLinkedInChat ?? throw new ArgumentNullException(nameof(iLinkedInChat));
}
public async Task ExecuteAsync(Dictionary<string, string>? arguments = null)
{
_logger.LogInformation("ChatCommand: starting. args={@Args}", arguments);
await _iLinkedInChat.SendMessageAsync();
_logger.LogInformation("ChatCommand: finished.");
}
}
}

=== FILE: F:\Members\Commands\CollectorCommand.cs ===

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using Services.Interfaces;
namespace Commands
{
public class CollectorCommand : ICommand
{
private readonly ILogger<CollectorCommand> _logger;
private readonly IConnectionInfoCollector _iConnectionInfoCollector;
public CollectorCommand(ILogger<CollectorCommand> logger, IConnectionInfoCollector iConnectionInfoCollector)
{
_logger = logger ?? throw new ArgumentNullException(nameof(logger));
_iConnectionInfoCollector = iConnectionInfoCollector ?? throw new ArgumentNullException(nameof(iConnectionInfoCollector));
}
public async Task ExecuteAsync(Dictionary<string, string>? arguments = null)
{
_logger.LogInformation("InviteCommand: starting. args={@Args}", arguments);
await _iConnectionInfoCollector.LoadConnectionsAsync();
_logger.LogInformation("InviteCommand: finished.");
}
}
}

=== FILE: F:\Members\Commands\CommandArgs.cs ===

﻿namespace Commands
{
public class CommandArgs
{
public const string search = "--search";
public const string prompt = "--prompt";
public const string invite = "--invite";
public const string load = "--load";
public const string chat = "--chat";
private static readonly HashSet<string> ValidCommands = new(StringComparer.OrdinalIgnoreCase)
{
search,
prompt,
invite,
load,
chat
};
public string MainCommand { get; }
public Dictionary<string, string> Arguments { get; }
public CommandArgs(string[] args)
{
if (args == null || args.Length == 0)
{
MainCommand = string.Empty;
Arguments = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
return;
}
MainCommand = args.FirstOrDefault(IsCommand) ?? args.FirstOrDefault(IsArgument).Split("=").FirstOrDefault();
Arguments = args
.Where(IsArgument)
.Select(arg =>
{
var parts = arg.Split('=', 2);
var key = parts[0];
var value = parts.Length > 1 ? parts[1] : string.Empty;
return new KeyValuePair<string, string>(key, value);
})
.ToDictionary(kv => kv.Key, kv => kv.Value, StringComparer.OrdinalIgnoreCase);
}
private static bool IsCommand(string arg) => ValidCommands.Contains(arg);
private static bool IsArgument(string arg) => arg.Contains("=");
}
}

=== FILE: F:\Members\Commands\CommandFactory.cs ===

﻿using Microsoft.Extensions.DependencyInjection;
using Services;
namespace Commands
{
public class CommandFactory
{
private readonly IServiceProvider _serviceProvider;
private readonly CommandArgs _jobCommandArgs;
public CommandFactory(IServiceProvider serviceProvider, CommandArgs jobCommandArgs)
{
_serviceProvider = serviceProvider;
_jobCommandArgs = jobCommandArgs;
}
public IEnumerable<ICommand> CreateCommand()
{
var commands = new List<ICommand>();
switch (_jobCommandArgs.MainCommand.ToLowerInvariant())
{
case CommandArgs.invite:
commands.Add(_serviceProvider.GetRequiredService<InviteCommand>());
break;
case CommandArgs.search:
commands.Add(_serviceProvider.GetRequiredService<SearchCommand>());
break;
case CommandArgs.prompt:
commands.Add(_serviceProvider.GetRequiredService<PromtCommand>());
break;
case CommandArgs.load:
commands.Add(_serviceProvider.GetRequiredService<CollectorCommand>());
break;
case CommandArgs.chat:
commands.Add(_serviceProvider.GetRequiredService<ChatCommand>());
break;
default:
commands.Add(_serviceProvider.GetRequiredService<HelpCommand>());
break;
}
return commands;
}
}
}

=== FILE: F:\Members\Commands\HelpCommand.cs ===

﻿using Microsoft.Extensions.Logging;
namespace Commands
{
public class
HelpCommand : ICommand
{
private readonly ILogger<HelpCommand> _logger;
public HelpCommand(ILogger<HelpCommand> logger = null)
{
_logger = logger;
}
public Task ExecuteAsync(Dictionary<string, string>? Arguments)
{
_logger?.LogInformation("Displaying help information");
Console.WriteLine("Available commands:");
Console.WriteLine("--search\tSearch for jobs");
Console.WriteLine("--export\tExport results");
Console.WriteLine("--help\t\tShow this help");
return Task.CompletedTask;
}
}
}

=== FILE: F:\Members\Commands\ICommand.cs ===

﻿namespace Commands
{
public interface ICommand
{
Task ExecuteAsync(Dictionary<string, string>? arguments=null);
}
}

=== FILE: F:\Members\Commands\InviteCommand.cs ===

﻿using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using Services.Interfaces;
namespace Commands
{
public class InviteCommand : ICommand
{
private readonly ILogger<InviteCommand> _logger;
private readonly IInviteConnections _iInviteCommand;
public InviteCommand(ILogger<InviteCommand> logger, IInviteConnections iInviteCommand)
{
_logger = logger ?? throw new ArgumentNullException(nameof(logger));
_iInviteCommand = iInviteCommand ?? throw new ArgumentNullException(nameof(iInviteCommand));
}
public async Task ExecuteAsync(Dictionary<string, string>? arguments = null)
{
_logger.LogInformation("InviteCommand: starting. args={@Args}", arguments);
await _iInviteCommand.Invite();
_logger.LogInformation("InviteCommand: finished.");
}
}
}

=== FILE: F:\Members\Commands\PromtCommand.cs ===

﻿using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using Services.Interfaces;
namespace Commands
{
public class PromtCommand(
ILogger<PromtCommand> logger,
IPromptGenerator promptGenerator) : ICommand
{
private readonly ILogger<PromtCommand> _logger = logger;
private readonly IPromptGenerator _promptGenerator = promptGenerator;
public async Task ExecuteAsync(Dictionary<string, string>? arguments = null)
{
_logger.LogInformation("Starting job application process...");
await _promptGenerator.GeneratPrompt();
}
}
}

=== FILE: F:\Members\Commands\SearchCommand.cs ===

﻿using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using Services.Interfaces;
namespace Commands
{
public class SearchCommand(
ISearchCoordinator linkedInService,
ILogger<SearchCommand> logger) : ICommand
{
private readonly ISearchCoordinator _linkedInService = linkedInService;
private readonly ILogger<SearchCommand> _logger = logger;
public async Task ExecuteAsync(Dictionary<string, string>? arguments = null)
{
_logger.LogInformation("Starting job search...");
await _linkedInService.SearchConnectionAsync();
}
}
}

=== FILE: F:\Members\Commands\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Commands\obj\Debug\net8.0\Commands.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Commands")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("Commands")]
[assembly: System.Reflection.AssemblyTitleAttribute("Commands")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Commands\obj\Debug\net8.0\Commands.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Commands\obj\Release\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Commands\obj\Release\net8.0\Commands.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Commands")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+1f7b61cc657b6b85a6c4b54e1aee2477c28bbe28")]
[assembly: System.Reflection.AssemblyProductAttribute("Commands")]
[assembly: System.Reflection.AssemblyTitleAttribute("Commands")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Commands\obj\Release\net8.0\Commands.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Configuration\AppConfig.cs ===

﻿namespace Configuration
{
public class AppConfig
{
public Credential LinkedInCredentials { get; set; }
public SearchConfiguration Search { get; set; }
public Logging Logging { get; set; }
public LlmProvider Llm { get; set; }
public PathsConfig Paths { get; set; }
public ExecutionOptions Options { get; set; }
}
}

=== FILE: F:\Members\Configuration\Credential.cs ===

﻿namespace Configuration
{
public class Credential
{
public string Email { get; set; }
public string Password { get; set; }
}
}

=== FILE: F:\Members\Configuration\ExecutionOptions.cs ===

﻿namespace Configuration
{
public class ExecutionOptions
{
public bool EnableCustomMessages { get; set; }
public int MaxInvites { get; set; }
}
}

=== FILE: F:\Members\Configuration\ExecutionTracker.cs ===

﻿namespace Configuration
{
public class ExecutionTracker
{
private readonly string _outPath;
public ExecutionTracker(string outPath)
{
_outPath = outPath;
TimeStamp = ActiveTimeStamp ?? DateTime.Now.ToString("yyyyMMdd_HHmmss");
}
public string ExecutionFolder => Path.Combine(_outPath, $"{FolderName}_{TimeStamp}");
private static string FolderName => "Execution";
public string TimeStamp { get; }
private string? ActiveTimeStamp
{
get
{
return GetCurrentFolder(FolderName);
}
}
public string? GetCurrentFolder(string folder)
{
var current = _outPath;
var pattern = $"{folder}_*";
var directories = Directory.GetDirectories(current, $"{folder}_*");
var lastDirectory = directories
.OrderByDescending(dir => dir)
.FirstOrDefault();
if (lastDirectory == null)
{
return null;
}
var folderName = Path.GetFileName(lastDirectory);
if (folderName != null && folderName.StartsWith($"{folder}_"))
{
return folderName.Substring(folder.Length + 1);
}
return null;
}
}
}

=== FILE: F:\Members\Configuration\FilePathsConfig.cs ===

﻿namespace Configuration
{
namespace Configuration
{
public class FilePathsConfig
{
public string SearchUrlOutputFilePath { get; set; }
}
}
}

=== FILE: F:\Members\Configuration\LlmProvider.cs ===

﻿namespace Configuration
{
public class LlmProvider
{
public string Url { get; set; }
public string ApiKey { get; set; }
}
}

=== FILE: F:\Members\Configuration\Logging.cs ===

﻿namespace Configuration
{
public class Logging
{
public string LogFilePath { get; set; }
public string FileLogLevel { get; set; }
}
}

=== FILE: F:\Members\Configuration\PathsConfig.cs ===

﻿namespace Configuration
{
public class PathsConfig
{
public string SearchUrlOutputFilePath { get; set; }
public string DetailedProfilesOutputFilePath { get; set; }
public string ConversationOutputFilePath { get; set; }
public string OutFolder { get; set; }
public string DownloadFolder { get; set; }
}
}

=== FILE: F:\Members\Configuration\SearchConfiguration.cs ===

﻿namespace Configuration
{
public class SearchConfiguration
{
public string SearchText { get; set; }
public int MaxPages { get; set; }
}
}

=== FILE: F:\Members\Configuration\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Configuration\obj\Debug\net8.0\Configuration.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Configuration")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b0c710b065a455c6e032d341534a5ba843862c20")]
[assembly: System.Reflection.AssemblyProductAttribute("Configuration")]
[assembly: System.Reflection.AssemblyTitleAttribute("Configuration")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Configuration\obj\Debug\net8.0\Configuration.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Configuration\obj\Release\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Configuration\obj\Release\net8.0\Configuration.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Configuration")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+1f7b61cc657b6b85a6c4b54e1aee2477c28bbe28")]
[assembly: System.Reflection.AssemblyProductAttribute("Configuration")]
[assembly: System.Reflection.AssemblyTitleAttribute("Configuration")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Configuration\obj\Release\net8.0\Configuration.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Domain\Entity.cs ===

﻿using Domain.Interfaces.Entity;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
namespace Domain
{
public class Entity : IEntity
{
[Key]
[Required(ErrorMessage = "Id is required.")]
public required string Id { get; set; }
[SetsRequiredMembers]
public Entity(string id)
{
ArgumentNullException.ThrowIfNull(id);
if (string.IsNullOrWhiteSpace(id))
{
throw new ArgumentException("Id cannot be empty or whitespace.", nameof(id));
}
Id = id;
}
public bool Active { get; set; }
}
}

=== FILE: F:\Members\Domain\ErrorLog.cs ===

﻿using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
namespace Domain
{
[method: SetsRequiredMembers]
public class ErrorLog(string id) : Entity(id)
{
public DateTime Timestamp { get; set; } = DateTime.UtcNow;
[Required(ErrorMessage = "Level is required.")]
[MinLength(5, ErrorMessage = "Level must be at least 3 characters long.")]
[MaxLength(150, ErrorMessage = "Level must be maximun 150 characters long.")]
public required string Level { get; set; }
[Required(ErrorMessage = "Message is required.")]
[MinLength(5, ErrorMessage = "Message must be at least 3 characters long.")]
[MaxLength(150, ErrorMessage = "Message must be maximun 150 characters long.")]
public required string Message { get; set; }
[Required(ErrorMessage = "ExceptionType is required.")]
[MinLength(5, ErrorMessage = "ExceptionType must be at least 3 characters long.")]
[MaxLength(150, ErrorMessage = "ExceptionType must be maximun 150 characters long.")]
public string? ExceptionType { get; set; }
[Required(ErrorMessage = "StackTrace is required.")]
[MinLength(5, ErrorMessage = "StackTrace must be at least 3 characters long.")]
[MaxLength(150, ErrorMessage = "StackTrace must be maximun 150 characters long.")]
public string? StackTrace { get; set; }
[Required(ErrorMessage = "Context is required.")]
[MinLength(5, ErrorMessage = "Context must be at least 3 characters long.")]
[MaxLength(150, ErrorMessage = "Context must be maximun 150 characters long.")]
public string? Context { get; set; }
}
}

=== FILE: F:\Members\Domain\Interfaces\Entity\IActivatable.cs ===

﻿namespace Domain.Interfaces.Entity
{
public interface IActivatable
{
bool Active { get; set; }
}
}

=== FILE: F:\Members\Domain\Interfaces\Entity\IEntity.cs ===

﻿namespace Domain.Interfaces.Entity
{
public interface IEntity : IIdentifiable, IActivatable {}
}

=== FILE: F:\Members\Domain\Interfaces\Entity\IIdentifiable.cs ===

﻿namespace Domain.Interfaces.Entity
{
public interface IIdentifiable
{
string Id { get; }
}
}

=== FILE: F:\Members\Domain\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Domain\obj\Debug\net8.0\Domain.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Domain")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b0c710b065a455c6e032d341534a5ba843862c20")]
[assembly: System.Reflection.AssemblyProductAttribute("Domain")]
[assembly: System.Reflection.AssemblyTitleAttribute("Domain")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Domain\obj\Debug\net8.0\Domain.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Domain.Test\EntityTest.cs ===

﻿namespace Domain.Test
{
public class EntityTests
{
[Fact]
public void GivenNewEntity_WhenInstantiated_ThenIsInactiveByDefault()
{
var sut = new Entity(Guid.NewGuid().ToString());
var isActive = sut.Active;
Assert.False(isActive);
}
[Fact]
public void GivenEntity_WhenActivated_ThenActiveIsTrue()
{
var sut = new Entity(Guid.NewGuid().ToString());
sut.Active = true;
Assert.True(sut.Active);
}
[Fact]
public void GivenActiveEntity_WhenDeactivated_ThenActiveIsFalse()
{
var sut = new Entity(Guid.NewGuid().ToString()) { Active = true };
sut.Active = false;
Assert.False(sut.Active);
}
[Fact]
public void GivenValidId_WhenConstructingEntity_ThenIdIsSetCorrectly()
{
var expectedId = Guid.NewGuid().ToString();
var sut = new Entity(expectedId);
Assert.Equal(expectedId, sut.Id);
}
[Fact]
public void GivenNullId_WhenConstructingEntity_ThenThrowsArgumentNullException()
{
string? invalidId = null;
Assert.Throws<ArgumentNullException>(() => new Entity(invalidId!));
}
[Theory]
[InlineData("")]
[InlineData("   ")]
public void GivenEmptyOrWhitespaceId_WhenConstructingEntity_ThenThrowsArgumentException(string invalidId)
{
Assert.Throws<ArgumentException>(() => new Entity(invalidId));
}
}
}

=== FILE: F:\Members\Domain.Test\ErrorLogTests.cs ===

﻿using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Domain;
using Xunit;
namespace Domain.Tests
{
public class ErrorLogTests
{
private static IList<ValidationResult> Validate(object model)
{
var results = new List<ValidationResult>();
var context = new ValidationContext(model, serviceProvider: null, items: null);
Validator.TryValidateObject(model, context, results, validateAllProperties: true);
return results;
}
[Fact]
public void Constructor_SetsTimestampToNow()
{
var before = DateTime.UtcNow;
var log = new ErrorLog(Guid.NewGuid().ToString())
{
Level          = "Error",
Message        = "Something went wrong",
ExceptionType  = "System.Exception",
StackTrace     = "at Foo.Bar()",
Context        = "{}"
};
var after = DateTime.UtcNow;
Assert.InRange(log.Timestamp, before, after);
}
[Fact]
public void ValidErrorLog_PassesValidation()
{
var log = new ErrorLog(Guid.NewGuid().ToString())
{
Level          = "Warning",
Message        = "A minor issue",
ExceptionType  = "System.InvalidOperationException",
StackTrace     = "at Test.Main()",
Context        = "{\"key\":\"value\"}"
};
var results = Validate(log);
Assert.Empty(results);
}
[Theory]
[InlineData("", "Level is required.")]
[InlineData("Err", "Level must be at least 3 characters long.")]
public void InvalidLevel_FailsValidation(string invalidLevel, string expectedMessage)
{
var log = new ErrorLog(Guid.NewGuid().ToString())
{
Level          = invalidLevel,
Message        = "Valid message",
ExceptionType  = "System.Exception",
StackTrace     = "stack",
Context        = "ctx"
};
var results = Validate(log);
Assert.Contains(results, r => r.ErrorMessage == expectedMessage);
}
[Theory]
[InlineData("", "Message is required.")]
[InlineData("Msg", "Message must be at least 3 characters long.")]
public void InvalidMessage_FailsValidation(string invalidMessage, string expectedMessage)
{
var log = new ErrorLog(Guid.NewGuid().ToString())
{
Level          = "Error",
Message        = invalidMessage,
ExceptionType  = "System.Exception",
StackTrace     = "stack",
Context        = "ctx"
};
var results = Validate(log);
Assert.Contains(results, r => r.ErrorMessage == expectedMessage);
}
[Fact]
public void TooLongFields_FailMaxLengthValidation()
{
var longText = new string('x', 151);
var log = new ErrorLog(Guid.NewGuid().ToString())
{
Level          = longText,
Message        = longText,
ExceptionType  = longText,
StackTrace     = longText,
Context        = longText
};
var results = Validate(log);
Assert.Equal(5, results.Count);
Assert.All(results, r =>
Assert.Contains("be maximun 150 characters long", r.ErrorMessage));
}
}
}

=== FILE: F:\Members\Domain.Test\Interfaces\Entity\ActivatableTests.cs ===

﻿using Domain.Interfaces.Entity;
namespace Domain.Test.Interfaces.Entity
{
public class ActivatableTests
{
private class TestActivatable : IActivatable
{
public bool Active { get; set; }
}
[Fact]
public void GivenNewActivatable_WhenChecked_ThenIsInactiveByDefault()
{
var sut = new TestActivatable();
var isActive = sut.Active;
Assert.False(isActive);
}
[Fact]
public void GivenActivatable_WhenSetActive_ThenActiveIsTrue()
{
var sut = new TestActivatable();
sut.Active = true;
Assert.True(sut.Active);
}
[Fact]
public void GivenActiveActivatable_WhenSetInactive_ThenActiveIsFalse()
{
var sut = new TestActivatable { Active = true };
sut.Active = false;
Assert.False(sut.Active);
}
}
}

=== FILE: F:\Members\Domain.Test\Interfaces\Entity\EntityTest.cs ===

﻿using Domain.Interfaces.Entity;
namespace Domain.Test.Interfaces.Entity
{
public class EntityTest
{
private class TestEntity : IEntity
{
public string Id { get; }
public bool Active { get; set; }
public TestEntity(string id)
{
ArgumentNullException.ThrowIfNull(id);
if (string.IsNullOrWhiteSpace(id))
{
throw new ArgumentException("Id cannot be empty or whitespace.", nameof(id));
}
Id = id;
}
}
[Fact]
public void GivenNewActivatable_WhenChecked_ThenIsInactiveByDefault()
{
var sut = new TestEntity(Guid.NewGuid().ToString());
var isActive = sut.Active;
Assert.False(isActive);
}
[Fact]
public void GivenActivatable_WhenSetActive_ThenActiveIsTrue()
{
var sut = new TestEntity(Guid.NewGuid().ToString())
{
Active = true
};
Assert.True(sut.Active);
}
[Fact]
public void GivenActiveActivatable_WhenSetInactive_ThenActiveIsFalse()
{
var sut = new TestEntity(Guid.NewGuid().ToString()) { Active = true };
sut.Active = false;
Assert.False(sut.Active);
}
[Fact]
public void GivenIdentifiableWithSpecificId_WhenAccessingId_ThenReturnsThatId()
{
var expectedId = Guid.NewGuid().ToString();
var sut = new TestEntity(expectedId);
var actualId = sut.Id;
Assert.Equal(expectedId, actualId);
}
[Fact]
public void GivenIdentifiableWithNullId_WhenAccessingId_ThenArgumentException()
{
string expectedId = null;
Assert.Throws<ArgumentNullException>(() => new TestEntity(expectedId));
}
[Fact]
public void GivenIdentifiableWithEmptyId_WhenAccessingId_ThenReturnsException()
{
string expectedId = string.Empty;
Assert.Throws<ArgumentException>(() => new TestEntity(expectedId));
}
}
}

=== FILE: F:\Members\Domain.Test\Interfaces\Entity\IdentifiableTests.cs ===

﻿using Domain.Interfaces.Entity;
namespace Domain.Test.Interfaces.Entity
{
public class IdentifiableTests
{
private class TestIdentifiable(string id) : IIdentifiable
{
public string Id { get; } = id;
}
[Fact]
public void GivenIdentifiableWithSpecificId_WhenAccessingId_ThenReturnsThatId()
{
var expectedId = Guid.NewGuid().ToString();
var sut = new TestIdentifiable(expectedId);
var actualId = sut.Id;
Assert.Equal(expectedId, actualId);
}
[Fact]
public void GivenIdentifiableWithNullId_WhenAccessingId_ThenReturnsNull()
{
string? expectedId = null;
var sut = new TestIdentifiable(expectedId);
var actualId = sut.Id;
Assert.Null(actualId);
}
[Fact]
public void GivenIdentifiableWithEmptyId_WhenAccessingId_ThenReturnsEmptyString()
{
string expectedId = string.Empty;
var sut = new TestIdentifiable(expectedId);
var actualId = sut.Id;
Assert.Equal(string.Empty, actualId);
}
}
}

=== FILE: F:\Members\Domain.Test\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Domain.Test\obj\Debug\net8.0\Domain.Test.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Domain.Test")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b0c710b065a455c6e032d341534a5ba843862c20")]
[assembly: System.Reflection.AssemblyProductAttribute("Domain.Test")]
[assembly: System.Reflection.AssemblyTitleAttribute("Domain.Test")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Domain.Test\obj\Debug\net8.0\Domain.Test.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::Xunit;

=== FILE: F:\Members\Infrastructure\Constants\Message.cs ===

﻿namespace Infrastructure.Constants
{
public static class Message
{
public static class GuidValidator
{
public const string InvalidGuid = "The submitted value was invalid.";
public const string Success = "Success";
}
}
}

=== FILE: F:\Members\Infrastructure\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Infrastructure\obj\Debug\net8.0\Infrastructure.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Infrastructure")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("Infrastructure")]
[assembly: System.Reflection.AssemblyTitleAttribute("Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Infrastructure\obj\Debug\net8.0\Infrastructure.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Infrastructure\Repositories\Abstract\CRUD\Create\CreateLabels.Designer.cs ===

﻿
namespace Infrastructure.Repositories.Abstract.CRUD.Create {
using System;
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
internal class CreateLabels {
private static global::System.Resources.ResourceManager resourceMan;
private static global::System.Globalization.CultureInfo resourceCulture;
[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal CreateLabels() {
}
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
internal static global::System.Resources.ResourceManager ResourceManager {
get {
if (object.ReferenceEquals(resourceMan, null)) {
global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Infrastructure.Repositories.Abstract.CRUD.Create.CreateLabels", typeof(CreateLabels).Assembly);
resourceMan = temp;
}
return resourceMan;
}
}
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
internal static global::System.Globalization.CultureInfo Culture {
get {
return resourceCulture;
}
set {
resourceCulture = value;
}
}
internal static string CreationSuccess {
get {
return ResourceManager.GetString("CreationSuccess", resourceCulture);
}
}
}
}

=== FILE: F:\Members\Infrastructure\Repositories\Abstract\CRUD\Create\CreateRepository.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.CRUD;
using Domain.Interfaces.Entity;
using Persistence.Context.Interface;
using Persistence.Repositories;
namespace Infrastructure.Repositories.Abstract.CRUD.Create
{
public abstract class CreateRepository<T>(IUnitOfWork unitOfWork)
: RepositoryCreate<T>(unitOfWork), ICreate<T> where T : class, IEntity
{
public async Task<Operation<bool>> CreateEntity(T entity)
{
await Create(entity);
var success = CreateLabels.CreationSuccess;
var message = string.Format(success, typeof(T).Name);
return Operation<bool>.Success(true, message);
}
public async Task<Operation<bool>> CreateEntities(List<T> entities)
{
await CreateRange(entities);
var success = CreateLabels.CreationSuccess;
var message = string.Format(success, typeof(T).Name);
return Operation<bool>.Success(true, message);
}
}
}

=== FILE: F:\Members\Infrastructure\Repositories\Abstract\CRUD\Delete\DeleteLabels.Designer.cs ===

﻿
namespace Infrastructure.Repositories.Abstract.CRUD.Delete {
using System;
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
internal class DeleteLabels {
private static global::System.Resources.ResourceManager resourceMan;
private static global::System.Globalization.CultureInfo resourceCulture;
[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal DeleteLabels() {
}
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
internal static global::System.Resources.ResourceManager ResourceManager {
get {
if (object.ReferenceEquals(resourceMan, null)) {
global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Infrastructure.Repositories.Abstract.CRUD.Delete.DeleteLabels", typeof(DeleteLabels).Assembly);
resourceMan = temp;
}
return resourceMan;
}
}
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
internal static global::System.Globalization.CultureInfo Culture {
get {
return resourceCulture;
}
set {
resourceCulture = value;
}
}
internal static string DeletionSuccess {
get {
return ResourceManager.GetString("DeletionSuccess", resourceCulture);
}
}
internal static string EntityNotFound {
get {
return ResourceManager.GetString("EntityNotFound", resourceCulture);
}
}
}
}

=== FILE: F:\Members\Infrastructure\Repositories\Abstract\CRUD\Delete\DeleteRepository.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.CRUD;
using Domain.Interfaces.Entity;
using Persistence.Context.Interface;
using Persistence.Repositories;
namespace Infrastructure.Repositories.Abstract.CRUD.Delete
{
public abstract class DeleteRepository<T>(IUnitOfWork unitOfWork)
: RepositoryDelete<T>(unitOfWork), IDelete<T> where T : class, IEntity
{
public async Task<Operation<bool>> DeleteEntity(string id)
{
var entity = await HasId(id);
if (entity is null)
{
var strategy = new BusinessStrategy<bool>();
return OperationStrategy<bool>.Fail(DeleteLabels.EntityNotFound, strategy);
}
Delete(entity);
var success = DeleteLabels.DeletionSuccess;
var message = string.Format(success, typeof(T).Name);
return Operation<bool>.Success(true, message);
}
}
}

=== FILE: F:\Members\Infrastructure\Repositories\Abstract\CRUD\Query\Read\ReadRepository.cs ===

﻿using Domain.Interfaces.Entity;
using Application.Result;
using Microsoft.EntityFrameworkCore;
using Application.Common.Pagination;
using System.Linq.Expressions;
using Persistence.Context.Interface;
namespace Infrastructure.Repositories.Abstract.CRUD.Query.Read
{
public abstract class ReadRepository<T>(
IUnitOfWork unitOfWork,
Func<IQueryable<T>, IOrderedQueryable<T>> orderBy
) where T : class, IEntity
{
public async Task<Operation<PagedResult<T>>> GetPageAsync(
Expression<Func<T, bool>>? filter,
string? cursor,
int pageSize
)
{
var query = BuildBaseQuery(filter);
var count = query.Count();
if (!string.IsNullOrEmpty(cursor))
query = ApplyCursorFilter(query, cursor);
var items = await query.Take(pageSize + 1).ToListAsync();
var next = BuildNextCursor(items, pageSize);
if (next != null)
items.RemoveAt(pageSize);
var result = new PagedResult<T>
{
Items = items,
NextCursor = next,
TotalCount = count
};
return Operation<PagedResult<T>>.Success(result);
}
public async Task<Operation<PagedResult<T>>> GetAllMembers(CancellationToken cancellationToken = default)
{
var query = unitOfWork.Context.Set<T>().AsNoTracking();
var items = await query.ToListAsync(cancellationToken);
var result = new PagedResult<T>
{
Items = items,
NextCursor = null,
TotalCount = items.Count
};
return Operation<PagedResult<T>>.Success(result);
}
protected virtual IQueryable<T> BuildBaseQuery(Expression<Func<T, bool>>? filter)
{
var q = unitOfWork.Context.Set<T>().AsNoTracking();
if (filter != null)
{
q = q.Where(filter);
}
return orderBy(q);
}
protected abstract IQueryable<T> ApplyCursorFilter(IQueryable<T> query, string cursor);
protected abstract string? BuildNextCursor(List<T> items, int size);
}
}

=== FILE: F:\Members\Infrastructure\Repositories\Abstract\CRUD\Query\ReadId\ReadByIdRepository.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.CRUD.Query;
using Domain.Interfaces.Entity;
using Persistence.Context.Interface;
using Persistence.Repositories;
namespace Infrastructure.Repositories.Abstract.CRUD.Query.ReadId
{
public abstract class ReadByIdRepository<T>(
IUnitOfWork unitOfWork,
IErrorHandler errorHandler
) : EntityChecker<T>(unitOfWork), IReadById<T> where T : class, IEntity
{
public async Task<Operation<T>> ReadById(string id)
{
var found = await HasId(id);
if (found is null)
{
var strategy = new BusinessStrategy<T>();
return OperationStrategy<T>.Fail(ReadIdLabels.EntityNotFound, strategy);
}
var success = ReadIdLabels.ReadIdSuccess;
return Operation<T>.Success(found, success);
}
}
}

=== FILE: F:\Members\Infrastructure\Repositories\Abstract\CRUD\Query\ReadId\ReadIdLabels.Designer.cs ===

﻿
namespace Infrastructure.Repositories.Abstract.CRUD.Query.ReadId {
using System;
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
internal class ReadIdLabels {
private static global::System.Resources.ResourceManager resourceMan;
private static global::System.Globalization.CultureInfo resourceCulture;
[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal ReadIdLabels() {
}
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
internal static global::System.Resources.ResourceManager ResourceManager {
get {
if (object.ReferenceEquals(resourceMan, null)) {
global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Infrastructure.Repositories.Abstract.CRUD.Query.ReadId.ReadIdLabels", typeof(ReadIdLabels).Assembly);
resourceMan = temp;
}
return resourceMan;
}
}
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
internal static global::System.Globalization.CultureInfo Culture {
get {
return resourceCulture;
}
set {
resourceCulture = value;
}
}
internal static string EntityNotFound {
get {
return ResourceManager.GetString("EntityNotFound", resourceCulture);
}
}
internal static string ReadIdSuccess {
get {
return ResourceManager.GetString("ReadIdSuccess", resourceCulture);
}
}
}
}

=== FILE: F:\Members\Infrastructure\Repositories\Abstract\CRUD\Update\UpdateLabels.Designer.cs ===

﻿
namespace Infrastructure.Repositories.Abstract.CRUD.Update {
using System;
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
internal class UpdateLabels {
private static global::System.Resources.ResourceManager resourceMan;
private static global::System.Globalization.CultureInfo resourceCulture;
[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal UpdateLabels() {
}
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
internal static global::System.Resources.ResourceManager ResourceManager {
get {
if (object.ReferenceEquals(resourceMan, null)) {
global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Infrastructure.Repositories.Abstract.CRUD.Update.UpdateLabels", typeof(UpdateLabels).Assembly);
resourceMan = temp;
}
return resourceMan;
}
}
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
internal static global::System.Globalization.CultureInfo Culture {
get {
return resourceCulture;
}
set {
resourceCulture = value;
}
}
internal static string EntityNotFound {
get {
return ResourceManager.GetString("EntityNotFound", resourceCulture);
}
}
internal static string UpdationSuccess {
get {
return ResourceManager.GetString("UpdationSuccess", resourceCulture);
}
}
}
}

=== FILE: F:\Members\Infrastructure\Repositories\Abstract\CRUD\Update\UpdateRepository.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.CRUD;
using Domain.Interfaces.Entity;
using Persistence.Context.Interface;
using Persistence.Repositories;
namespace Infrastructure.Repositories.Abstract.CRUD.Update
{
public abstract class UpdateRepository<T>(IUnitOfWork unitOfWork)
: RepositoryUpdate<T>(unitOfWork), IUpdate<T>
where T : class, IEntity
{
public async Task<Operation<bool>> UpdateEntity(T modify)
{
var entity = await HasId(modify.Id);
if (entity is null)
{
var strategy = new BusinessStrategy<bool>();
return OperationStrategy<bool>.Fail(UpdateLabels.EntityNotFound, strategy);
}
var modified = ApplyUpdates(modify, entity);
Update(modified);
var success = UpdateLabels.UpdationSuccess;
var message = string.Format(success, typeof(T).Name);
return Operation<bool>.Success(true, message);
}
public abstract T ApplyUpdates(T modified, T unmodified);
}
}

=== FILE: F:\Members\Infrastructure\Repositories\CRUD\ErrorLogCreate.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Infrastructure.Repositories.Abstract.CRUD.Create;
using Persistence.Context.Interface;
namespace Infrastructure.Repositories.CRUD
{
using ErrorLog = Domain.ErrorLog;
public class ErrorLogCreate(IUnitOfWork unitOfWork) : CreateRepository<ErrorLog>(unitOfWork), IErrorLogCreate
{
public async Task<Operation<bool>> CreateInvoiceAsync(ErrorLog entity)
{
return await CreateEntity(entity);
}
}
}

=== FILE: F:\Members\Infrastructure\Result\ErrorHandler.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Domain;
using System.Collections.Concurrent;
using System.Text.Json;
namespace Infrastructure.Result
{
public class ErrorHandler : IErrorHandler
{
private static readonly Lazy<ConcurrentDictionary<string, string>> ErrorMappings
= new(() => new ConcurrentDictionary<string, string>());
private static readonly IDictionary<string, string> DefaultMappings = new Dictionary<string, string>
{
{ "SqliteException",           nameof(DatabaseStrategy<object>)       },
{ "HttpRequestException",      nameof(NetworkErrorStrategy<object>)  },
{ "JsonException",             nameof(InvalidDataStrategy<object>)   },
{ "Exception",                 nameof(UnexpectedErrorStrategy<object>) }
};
public Operation<T> Fail<T>(Exception? ex, string errorMessage, IErrorLogCreate errorLogCreate)
{
if (ex == null)
{
return new NullExceptionStrategy<T>().CreateFailure("Exception is null.");
}
if (ErrorMappings.Value.IsEmpty)
{
return new NullExceptionStrategy<T>().CreateFailure("ErrorMappings is not loaded or empty.");
}
if (!ErrorMappings.Value.TryGetValue(ex.GetType().Name, out var strategyName))
{
return new NullExceptionStrategy<T>().CreateFailure($"No strategy matches exception type: {ex.GetType().Name}.");
}
var strategy = CreateStrategyInstance<T>(strategyName);
RegisterErorr(ex, errorLogCreate);
return strategy.CreateFailure(errorMessage);
}
public Operation<T> Fail<T>(Exception? ex, IErrorLogCreate errorLogCreate)
{
if (ex == null)
{
return new NullExceptionStrategy<T>().CreateFailure("Exception is null.");
}
if (ErrorMappings.Value.IsEmpty)
{
return new NullExceptionStrategy<T>().CreateFailure("ErrorMappings is not loaded or empty.");
}
if (!ErrorMappings.Value.TryGetValue(ex.GetType().Name, out var strategyName))
{
return new NullExceptionStrategy<T>().CreateFailure($"No strategy matches exception type: {ex.GetType().Name}.");
}
var strategy = CreateStrategyInstance<T>(strategyName);
RegisterErorr(ex, errorLogCreate);
return strategy.CreateFailure();
}
private static void RegisterErorr(Exception ex, IErrorLogCreate errorLogCreate)
{
var opts = new JsonSerializerOptions
{
WriteIndented = true
};
var errorLog = new ErrorLog(Guid.NewGuid().ToString())
{
Level         = "Error",
Message       = ex.Message,
ExceptionType = ex.GetType().FullName,
StackTrace    = ex.StackTrace ?? string.Empty,
Context       = JsonSerializer.Serialize(ex.Data, opts)
};
errorLogCreate.CreateInvoiceAsync(errorLog).Wait();
}
private static IErrorCreationStrategy<T> CreateStrategyInstance<T>(string strategyName) =>
strategyName switch
{
"NetworkErrorStrategy" => new NetworkErrorStrategy<T>(),
"ConfigMissingStrategy" => new ConfigMissingStrategy<T>(),
"InvalidDataStrategy" => new InvalidDataStrategy<T>(),
"DatabaseStrategy" => new DatabaseStrategy<T>(),
"UnexpectedErrorStrategy" => new UnexpectedErrorStrategy<T>(),
_ => new UnexpectedErrorStrategy<T>()
};
public void LoadErrorMappings(string filePath)
{
foreach (var kv in DefaultMappings)
{
ErrorMappings.Value[kv.Key] = kv.Value;
}
if (!File.Exists(filePath))
{
throw new FileNotFoundException($"Error mappings file not found: {filePath}");
}
try
{
string jsonContent = File.ReadAllText(filePath);
var mappings = JsonSerializer.Deserialize<Dictionary<string, string>>(jsonContent);
if (mappings == null || mappings.Count == 0)
{
throw new InvalidOperationException("ErrorMappings.json is empty or invalid.");
}
foreach (var kvp in mappings)
{
ErrorMappings.Value[kvp.Key] = kvp.Value;
}
}
catch (JsonException ex)
{
throw new InvalidOperationException("ErrorMappings.json contains invalid JSON format.", ex);
}
catch (Exception ex)
{
throw new Exception("An error occurred while loading error mappings.", ex);
}
}
public Operation<T> Business<T>(string errorMessage)
{
return new BusinessStrategy<T>().CreateFailure(errorMessage);
}
public bool Any() => ErrorMappings.IsValueCreated && !ErrorMappings.Value.IsEmpty;
}
}

=== FILE: F:\Members\Infrastructure\Utilities\GuidValidator.cs ===

﻿using Application.Result;
using Infrastructure.Constants;
namespace Infrastructure.Utilities
{
public class GuidValidator
{
public static Operation<string> HasGuid(string id)
{
bool isSuccess = Guid.TryParse(id, out _);
if (!isSuccess)
{
var business = new BusinessStrategy<string>();
var invalidGuidMessage = Message.GuidValidator.InvalidGuid;
return OperationStrategy<string>.Fail(invalidGuidMessage, business);
}
return Operation<string>.Success(id, Message.GuidValidator.Success);
}
}
}

=== FILE: F:\Members\LiveNetwork.Application\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\LiveNetwork.Application\obj\Debug\net8.0\LiveNetwork.Application.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("LiveNetwork.Application")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("LiveNetwork.Application")]
[assembly: System.Reflection.AssemblyTitleAttribute("LiveNetwork.Application")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\LiveNetwork.Application\obj\Debug\net8.0\LiveNetwork.Application.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\LiveNetwork.Application\Services\ICaptureSnapshot.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface ICaptureSnapshot
{
Task<string> CaptureArtifactsAsync(string executionFolder, string stage);
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\IConnectionInfoCollector.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface IConnectionInfoCollector
{
Task LoadConnectionsAsync();
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\IDirectoryCheck.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface IDirectoryCheck
{
void EnsureDirectoryExists(string path);
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\IInviteConnections.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface IInviteConnections
{
Task Invite();
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\ILinkedInChat.cs ===

﻿using LiveNetwork.Domain;
namespace LiveNetwork.Application.Services
{
public interface ILinkedInChat
{
Task SendMessageAsync(List<ConnectionInfo>? connections = null);
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\ILoginService.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface ILoginService
{
Task LoginAsync();
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\IOpenAIClient.cs ===

﻿using LiveNetwork.Domain;
namespace Services.Interfaces
{
public interface IOpenAIClient
{
Task<string> GetChatCompletionAsync(Prompt prompt);
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\IProcessor.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface IProcessor
{
Task ProcessAllPagesAsync();
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\IPromptGenerator.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface IPromptGenerator
{
Task GeneratPrompt();
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\IResumeDetailService.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface IResumeDetailService
{
Task RunResumeDetailProcessAsync();
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\ISearch.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface ISearch
{
Task RunSearchAsync();
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\ISearchCoordinator.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface ISearchCoordinator
{
Task SearchConnectionAsync();
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\ISecurityCheck.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface ISecurityCheck
{
bool IsSecurityCheck();
Task TryStartPuzzle();
Task HandleSecurityPage();
Task HandleUnexpectedPage();
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\ITrackingService.cs ===

﻿
using LiveNetwork.Domain;
namespace LiveNetwork.Application.Services
{
public interface ITrackingService
{
Task<TrackingState> LoadStateAsync();
Task SavePageStateAsync(TrackingState state);
Task<List<Uri>> LoadConnectionsFromSearchAsync(string searchUrlOutputFilePath);
Task<ISet<string>> LoadProcessedUrlsAsync(string searchText);
Task<List<ConversationThread>> LoadConversationThreadAsync(string conversationOutputFilePath);
Task<List<LinkedInProfile>> LoadDetailedProfilesAsync(string detailedProfilesOutputFilePath);
Task<string> SaveProfileJsonAsync(string searchText, LinkedInProfile profile, string folderPath);
Task SaveConnectionsAsync(List<Uri> connections, string searchUrlOutputFilePath);
Task SaveLinkedInProfilesAsync(List<LinkedInProfile> detailed, string detailedProfilesOutputFilePath);
Task SaveConversationThreadAsync(List<ConversationThread> threads, string conversationOutputFilePath);
Task SaveCollectorConnectionsAsync(List<ConnectionInfo> connectionsInfo, string collectorInfoOutputFilePath);
Task<List<ConnectionInfo>> LoadCollectorConnectionsAsync(string collectorInfoOutputFilePath);
Task<DateTime> LoadLastProcessedDateUtcAsync(string deltaFileName);
Task SaveLastProcessedDateUtcAsync(string deltaFileName, DateTime dtUtc);
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\IUtil.cs ===

﻿namespace LiveNetwork.Application.Services
{
public interface IUtil
{
Task<bool> WaitForPageLoadAsync(int timeoutInSeconds = 30);
void ScrollMove();
void ScrollToTop();
void ScrollToExperienceSection();
Task<bool> NavigateToNextPageAsync();
}
}

=== FILE: F:\Members\LiveNetwork.Application\Services\IWebDriverFactory.cs ===

﻿using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
namespace LiveNetwork.Application.Services
{
public interface IWebDriverFactory
{
IWebDriver Create(bool hide = false);
IWebDriver Create(Action<ChromeOptions> configureOptions);
ChromeOptions GetDefaultOptions(string downloadFolder);
}
}

=== FILE: F:\Members\LiveNetwork.Application\UseCases\CRUD\IMessageInteraction\IMessageInteractionCreate.cs ===

﻿using Application.Result;
using LiveNetwork.Domain;
namespace LiveNetwork.Application.UseCases.CRUD.IMessageInteraction
{
public interface IMessageInteractionCreate
{
Task<Operation<MessageInteraction>> CreateMessageInteractionAsync(MessageInteraction entity);
}
}

=== FILE: F:\Members\LiveNetwork.Application\UseCases\CRUD\IMessageInteraction\Query\IMessageInteractionRead.cs ===

﻿using Application.Common.Pagination;
using Application.Result;
using LiveNetwork.Domain;
namespace LiveNetwork.Application.UseCases.CRUD.Profile.Query
{
public interface IMessageInteractionRead
{
Task<Operation<PagedResult<MessageInteraction>>> GetMessageInteractionPageAsync(string? id, string? cursor, int pageSize);
}
}

=== FILE: F:\Members\LiveNetwork.Application\UseCases\CRUD\Profile\IProfileCreate.cs ===

﻿
using Application.Result;
namespace LiveNetwork.Application.UseCases.CRUD.Profile
{
using Profile = Domain.Profile;
public interface IProfileCreate
{
Task<Operation<Profile>> CreateProfileAsync(Profile entity);
Task<Operation<List<Profile>>> CreateProfilesAsync(List<Profile> entities);
}
}

=== FILE: F:\Members\LiveNetwork.Application\UseCases\CRUD\Profile\IProfileDelete.cs ===

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Application.Result;
namespace LiveNetwork.Application.UseCases.CRUD.Profile
{
public interface IProfileDelete
{
Task<Operation<bool>> DeleteProfileAsync(string id);
}
}

=== FILE: F:\Members\LiveNetwork.Application\UseCases\CRUD\Profile\IProfileUpdate.cs ===

﻿using Application.Result;
namespace LiveNetwork.Application.UseCases.CRUD.Profile
{
using Profile = Domain.Profile;
public interface IProfileUpdate
{
Task<Operation<bool>> UpdateProfileAsync(Profile entity);
}
}

=== FILE: F:\Members\LiveNetwork.Application\UseCases\CRUD\Profile\Query\IProfileRead.cs ===

﻿using Application.Common.Pagination;
using Application.Result;
namespace LiveNetwork.Application.UseCases.CRUD.Profile.Query
{
using Profile = Domain.Profile;
public interface IProfileRead
{
Task<Operation<PagedResult<Profile>>> GetProfilesPageAsync(
string? id,
string? name,
string? cursor,
int pageSize);
Task<Operation<PagedResult<Profile>>> GetProfilesByUrlAsync(
string? url,
string? cursor,
int pageSize);
}
}

=== FILE: F:\Members\LiveNetwork.CLI\CommandBootstrap.cs ===

﻿using System.Diagnostics;
using System.Reflection;
using Api.Startup;
using Commands;
using Configuration;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Persistence.Context.Implementation;
using Serilog;
namespace LiveNetwork.CLI
{
internal class CommandBootstrap : Builder
{
private static readonly string[] KnownFlags = new[]
{
"--prompt", "--invite", "--load", "--chat", "--search", "--help"
};
public static HostApplicationBuilder CreateDefaultAppBuilder(string[] args, string? basePath = null)
{
var cmdArgs = (args is { Length: > 0 }) ? args : Array.Empty<string>();
var builder = Host.CreateApplicationBuilder(cmdArgs);
basePath ??= Directory.GetCurrentDirectory();
var envName = builder.Environment.EnvironmentName;
builder.Configuration
.SetBasePath(basePath)
.AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
.AddJsonFile($"appsettings.{envName}.json", optional: true, reloadOnChange: true);
if (builder.Environment.IsDevelopment())
builder.Configuration.AddUserSecrets(Assembly.GetExecutingAssembly(), optional: true);
builder.Configuration.AddEnvironmentVariables();
if (cmdArgs.Length > 0) builder.Configuration.AddCommandLine(cmdArgs);
var executionOptions = new ExecutionTracker(Environment.CurrentDirectory);
var logPath = Path.Combine(executionOptions.ExecutionFolder, "Logs");
Directory.CreateDirectory(logPath);
Log.Logger = new LoggerConfiguration()
.ReadFrom.Configuration(builder.Configuration)
.Enrich.FromLogContext()
.MinimumLevel.Debug()
.WriteTo.Console()
.WriteTo.File(
path: Path.Combine(logPath, "LiveNetwork-.log"),
rollingInterval: RollingInterval.Day,
fileSizeLimitBytes: 5_000_000,
retainedFileCountLimit: 7,
rollOnFileSizeLimit: true,
outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff} [{Level}] {Message}{NewLine}{Exception}"
)
.CreateLogger();
builder.Logging.ClearProviders();
builder.Logging.AddSerilog(Log.Logger, dispose: true);
return builder;
}
public static async Task<int> RunAsync(string[] args, bool enableInteractiveMenu = true)
{
using var cts = new CancellationTokenSource();
Console.CancelKeyPress += (_, e) =>
{
e.Cancel = true;
cts.Cancel();
Log.Warning("Cancellation requested (Ctrl+C)...");
};
try
{
var sw = Stopwatch.StartNew();
Log.Information("🚀 LiveNetwork.CLI started at {Time}", DateTimeOffset.Now);
var effectiveArgs = ResolveArgsWithMenuIfNeeded(args, enableInteractiveMenu);
if (effectiveArgs is null)
{
Log.Information("User aborted before execution.");
return 0;
}
var appBuilder = CreateDefaultAppBuilder(effectiveArgs);
ConfigureServices(appBuilder, effectiveArgs);
using var host = appBuilder.Build();
using (var scope = host.Services.CreateScope())
{
var db = scope.ServiceProvider.GetRequiredService<DataContext>();
if (!db.Initialize())
throw new Exception("Database initialization failed");
}
var exitCode = await ExecuteCommandsAsync(host, cts.Token);
sw.Stop();
Log.Information("✅ Done in {ElapsedMs} ms with exit code {ExitCode}", sw.ElapsedMilliseconds, exitCode);
return exitCode;
}
catch (OperationCanceledException)
{
Log.Warning("❗ Operation canceled by user.");
return 2;
}
catch (Exception ex)
{
Log.Fatal(ex, "❌ Application terminated unexpectedly");
return 1;
}
finally
{
await Log.CloseAndFlushAsync();
}
}
private static string[]? ResolveArgsWithMenuIfNeeded(string[] args, bool enableInteractiveMenu)
{
if (ContainsKnownFlag(args))
return args;
if (!enableInteractiveMenu)
return args;
while (true)
{
Console.Clear();
Console.WriteLine("========================================");
Console.WriteLine("          LiveNetwork.CLI  Menu          ");
Console.WriteLine("========================================");
Console.WriteLine(" 1) Prompt        (equivale a --prompt)");
Console.WriteLine(" 2) Invite        (equivale a --invite)");
Console.WriteLine(" 3) Load          (equivale a --load)");
Console.WriteLine(" 4) Chat          (equivale a --chat)");
Console.WriteLine(" 4) Chat          (equivale a --chat)");
Console.WriteLine(" 5) Search          (equivale a --search)");
Console.WriteLine("----------------------------------------");
Console.WriteLine(" h) Help          (equivale a --help)");
Console.WriteLine(" 0) Exit");
Console.WriteLine("========================================");
Console.Write("Select an option: ");
var key = Console.ReadKey(intercept: true).KeyChar;
Console.WriteLine();
var selectedArgs = key switch
{
'1' => ["--prompt"],
'2' => ["--invite"],
'3' => ["--load"],
'4' => ["--chat"],
'5' => ["--search"],
'h' or 'H' or '?' => new[] { "--help" },
'0' => null,
_ => Array.Empty<string>()
};
if (selectedArgs is null)
return null;
if (selectedArgs.Length == 0)
{
Console.WriteLine("Invalid option. Press any key to continue...");
Console.ReadKey();
continue;
}
return selectedArgs;
}
}
private static bool ContainsKnownFlag(string[]? args)
{
if (args is null || args.Length == 0) return false;
foreach (var a in args)
foreach (var f in KnownFlags)
if (string.Equals(a, f, StringComparison.OrdinalIgnoreCase))
return true;
return false;
}
private static async Task<int> ExecuteCommandsAsync(IHost host, CancellationToken ct)
{
var commandFactory = host.Services.GetRequiredService<CommandFactory>();
var jobArgs = host.Services.GetRequiredService<CommandArgs>();
var commands = commandFactory.CreateCommand().ToList();
if (commands.Count == 0)
{
Log.Warning("No commands were produced by CommandFactory for args: {Args}", string.Join(' ', jobArgs.Arguments));
return 0;
}
var aggregateExit = 0;
foreach (var command in commands)
{
ct.ThrowIfCancellationRequested();
try
{
Log.Information("▶ Executing command {Command}...", command.GetType().Name);
await command.ExecuteAsync(jobArgs.Arguments); ;
}
catch (OperationCanceledException)
{
Log.Warning("⏹ {Command} cancelled by user", command.GetType().Name);
throw;
}
catch (Exception ex)
{
Log.Error(ex, "💥 Execution failed for {Command}", command.GetType().Name);
throw;
}
}
return aggregateExit;
}
}
}

=== FILE: F:\Members\LiveNetwork.CLI\Program.cs ===

﻿using LiveNetwork.CLI;
using Api.Startup;
public class Program : Builder
{
private static readonly string[] KnownFlags =
[
"--prompt", "--invite", "--load", "--chat", "--search", "--help"
];
private static int _previousSelection = 0;
private static bool _firstDraw = true;
private static int[] _optionLinePositions = Array.Empty<int>();
public static async Task<int> Main(string[] args)
{
if (ContainsKnownFlag(args))
{
return await CommandBootstrap.RunAsync(args);
}
Console.CursorVisible = false;
Console.Title = "LiveNetwork.CLI - Interactive Menu";
InitializeConsole();
while (true)
{
DrawMenu();
var selectedOption = HandleMenuNavigation();
if (selectedOption == 0)
{
ShowExitAnimation();
return 0;
}
string[] selectedArgs = selectedOption switch
{
1 => ["--prompt"],
2 => ["--invite"],
3 => ["--load"],
4 => ["--chat"],
5 => ["--search"],
6 => ["--help"],
_ => null!
};
if (selectedArgs != null)
{
await ExecuteCommand(selectedArgs);
}
}
}
private static void DrawMenu()
{
Console.Clear();
Console.ForegroundColor = ConsoleColor.DarkCyan;
Console.WriteLine("  Navigate with ↑↓ arrows or number keys 1-6 • Enter to select • Esc to exit");
Console.ResetColor();
Console.WriteLine();
string[] options = [
"1. Generate AI Messages     (--prompt) - Create personalized outreach content",
"2. Send Invitations         (--invite) - Automate connection requests",
"3. Load Connections         (--load)   - Collect network data & profiles",
"4. Automated Messaging      (--chat)   - Engage in conversation threads",
"5. Search Connections       (--search) - Find and filter your network",
"6. Help & Documentation     (--help)   - View detailed instructions",
"0. Exit Application"
];
string[] descriptions = [
"  • AI-powered message generation for personalized outreach campaigns",
"  • Automated connection invitation sending to targeted prospects",
"  • Data collection and analysis from your existing LinkedIn network",
"  • Automated follow-up messaging and conversation management",
"  • Advanced search capabilities to find specific connections",
"  • Detailed documentation and command reference guide",
"  • Safely close the application"
];
_optionLinePositions = new int[options.Length];
for (int i = 0; i < options.Length; i++)
{
_optionLinePositions[i] = Console.CursorTop;
if (i == options.Length - 1)
{
Console.ForegroundColor = ConsoleColor.DarkGray;
Console.WriteLine("  ───────────────────────────────────────────────────────────────────────────");
Console.ResetColor();
_optionLinePositions[i] = Console.CursorTop;
}
if (i == _previousSelection && !_firstDraw)
{
Console.BackgroundColor = ConsoleColor.DarkBlue;
Console.ForegroundColor = ConsoleColor.White;
Console.WriteLine($" {options[i]}");
Console.ForegroundColor = ConsoleColor.Gray;
Console.WriteLine($" {descriptions[i]}");
Console.ResetColor();
}
else
{
Console.ForegroundColor = i == options.Length - 1 ? ConsoleColor.Red : ConsoleColor.White;
Console.WriteLine($" {options[i]}");
Console.ForegroundColor = ConsoleColor.DarkGray;
Console.WriteLine($" {descriptions[i]}");
Console.ResetColor();
}
Console.WriteLine();
}
Console.ForegroundColor = ConsoleColor.DarkGray;
Console.WriteLine("  Press F1 for help, Home/End to jump to first/last option");
Console.ResetColor();
_firstDraw = false;
}
private static int HandleMenuNavigation()
{
int selectedIndex = _previousSelection;
int totalOptions = 7;
SetCursorPosition(0, _optionLinePositions[selectedIndex]);
while (true)
{
var key = Console.ReadKey(true).Key;
switch (key)
{
case ConsoleKey.UpArrow:
selectedIndex = (selectedIndex - 1 + totalOptions) % totalOptions;
UpdateSelection(selectedIndex);
break;
case ConsoleKey.DownArrow:
selectedIndex = (selectedIndex + 1) % totalOptions;
UpdateSelection(selectedIndex);
break;
case ConsoleKey.Home:
selectedIndex = 0;
UpdateSelection(selectedIndex);
break;
case ConsoleKey.End:
selectedIndex = totalOptions - 1;
UpdateSelection(selectedIndex);
break;
case ConsoleKey.Enter:
_previousSelection = selectedIndex;
return selectedIndex;
case ConsoleKey.Escape:
return 0;
case ConsoleKey.F1:
ShowHelp();
DrawMenu();
break;
case ConsoleKey.D1:
case ConsoleKey.NumPad1:
_previousSelection = 0;
return 1;
case ConsoleKey.D2:
case ConsoleKey.NumPad2:
_previousSelection = 1;
return 2;
case ConsoleKey.D3:
case ConsoleKey.NumPad3:
_previousSelection = 2;
return 3;
case ConsoleKey.D4:
case ConsoleKey.NumPad4:
_previousSelection = 3;
return 4;
case ConsoleKey.D5:
case ConsoleKey.NumPad5:
_previousSelection = 4;
return 5;
case ConsoleKey.D6:
case ConsoleKey.NumPad6:
_previousSelection = 5;
return 6;
case ConsoleKey.D0:
case ConsoleKey.NumPad0:
_previousSelection = 6;
return 0;
}
}
}
private static void UpdateSelection(int selectedIndex)
{
int totalOptions = 7;
for (int i = 0; i < totalOptions; i++)
{
SetCursorPosition(0, _optionLinePositions[i]);
if (i == selectedIndex)
{
Console.BackgroundColor = ConsoleColor.DarkBlue;
Console.ForegroundColor = ConsoleColor.White;
string optionText = GetOptionText(i);
Console.Write(" " + optionText);
Console.Write(new string(' ', Console.WindowWidth - optionText.Length - 1));
Console.ResetColor();
}
else
{
Console.ResetColor();
string optionText = GetOptionText(i);
Console.ForegroundColor = i == totalOptions - 1 ? ConsoleColor.Red : ConsoleColor.White;
Console.Write(" " + optionText);
Console.Write(new string(' ', Console.WindowWidth - optionText.Length - 1));
Console.ResetColor();
}
}
SetCursorPosition(0, _optionLinePositions[selectedIndex]);
_previousSelection = selectedIndex;
}
private static string GetOptionText(int index)
{
return index switch
{
0 => "1. Generate AI Messages     (--prompt) - Create personalized outreach content",
1 => "2. Send Invitations         (--invite) - Automate connection requests",
2 => "3. Load Connections         (--load)   - Collect network data & profiles",
3 => "4. Automated Messaging      (--chat)   - Engage in conversation threads",
4 => "5. Search Connections       (--search) - Find and filter your network",
5 => "6. Help & Documentation     (--help)   - View detailed instructions",
6 => "0. Exit Application",
_ => ""
};
}
private static async Task ExecuteCommand(string[] args)
{
Console.Clear();
Console.ForegroundColor = ConsoleColor.Cyan;
Console.WriteLine("╔══════════════════════════════════════════════════════════════════════════════════╗");
Console.WriteLine("║                             EXECUTING COMMAND                                   ║");
Console.WriteLine("╚══════════════════════════════════════════════════════════════════════════════════╝");
Console.ResetColor();
Console.WriteLine();
Console.WriteLine($"  • Command: {args[0]}");
Console.WriteLine("──────────────────────────────────────────────────────────────────────────────────");
try
{
var stopwatch = System.Diagnostics.Stopwatch.StartNew();
var exitCode = await CommandBootstrap.RunAsync(args);
stopwatch.Stop();
Console.WriteLine();
Console.ForegroundColor = exitCode == 0 ? ConsoleColor.Green : ConsoleColor.Yellow;
Console.WriteLine($"  • Command completed in {stopwatch.Elapsed.TotalSeconds:F2}s");
Console.WriteLine($"Exit code: {exitCode}");
}
catch (Exception ex)
{
Console.ForegroundColor = ConsoleColor.Red;
Console.WriteLine("  • An error occurred:");
Console.WriteLine(ex.Message);
Console.ResetColor();
Console.WriteLine();
Console.WriteLine("Stack trace:");
Console.WriteLine(ex.StackTrace);
}
Console.ResetColor();
Console.WriteLine();
Console.WriteLine("Press any key to return to menu...");
Console.ReadKey();
}
private static void ShowHelp()
{
Console.Clear();
Console.ForegroundColor = ConsoleColor.Cyan;
Console.WriteLine("╔══════════════════════════════════════════════════════════════════════════════════╗");
Console.WriteLine("║                                HELP & DOCUMENTATION                             ║");
Console.WriteLine("╚══════════════════════════════════════════════════════════════════════════════════╝");
Console.ResetColor();
Console.WriteLine();
Console.ForegroundColor = ConsoleColor.White;
Console.WriteLine("Available Commands:");
Console.ForegroundColor = ConsoleColor.Gray;
Console.WriteLine("• --prompt   : Generate AI-powered personalized messages for outreach campaigns");
Console.WriteLine("• --invite   : Automate connection requests with customizable templates");
Console.WriteLine("• --load     : Extract and analyze your LinkedIn network data");
Console.WriteLine("• --chat     : Manage automated messaging with your connections");
Console.WriteLine("• --search   : Advanced search through your network with filters");
Console.WriteLine();
Console.ForegroundColor = ConsoleColor.White;
Console.WriteLine("Navigation Shortcuts:");
Console.ForegroundColor = ConsoleColor.Gray;
Console.WriteLine("• Arrow keys: Navigate through menu options");
Console.WriteLine("• Number keys: Direct selection (0-6)");
Console.WriteLine("• Home/End: Jump to first/last option");
Console.WriteLine("• Enter: Select highlighted option");
Console.WriteLine("• Esc: Exit application");
Console.WriteLine("• F1: Show this help screen");
Console.WriteLine();
Console.ForegroundColor = ConsoleColor.White;
Console.WriteLine("Tips:");
Console.ForegroundColor = ConsoleColor.Gray;
Console.WriteLine("• Use --help with any command for command-specific help");
Console.WriteLine("• Check the documentation for detailed usage examples");
Console.WriteLine("• Ensure your LinkedIn account is properly configured before automation");
Console.WriteLine();
Console.ForegroundColor = ConsoleColor.DarkGray;
Console.Write("Press any key to continue...");
Console.ResetColor();
Console.ReadKey();
}
private static void ShowExitAnimation()
{
Console.Clear();
Console.ForegroundColor = ConsoleColor.Cyan;
Console.WriteLine("╔══════════════════════════════════════════════════════════════════════════════════╗");
Console.WriteLine("║                             THANK YOU FOR USING                                 ║");
Console.WriteLine("╚══════════════════════════════════════════════════════════════════════════════════╝");
Console.ResetColor();
Console.WriteLine();
Console.ForegroundColor = ConsoleColor.Green;
Console.WriteLine("  • Thank you for using LiveNetwork CLI!");
Console.ResetColor();
Console.WriteLine();
Console.Write("Shutting down");
for (int i = 0; i < 5; i++)
{
Console.Write(".");
Thread.Sleep(200);
}
}
private static bool ContainsKnownFlag(string[] args)
{
if (args is null || args.Length == 0) return false;
return args.Any(arg => KnownFlags.Contains(arg, StringComparer.OrdinalIgnoreCase));
}
public static void InitializeConsole()
{
Console.CursorVisible = false;
Console.Title = "LiveNetwork CLI";
}
public static void SetCursorPosition(int left, int top)
{
Console.SetCursorPosition(left, top);
}
}

=== FILE: F:\Members\LiveNetwork.CLI\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\LiveNetwork.CLI\obj\Debug\net8.0\LiveNetwork.CLI.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("LiveNetwork.CLI")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("LiveNetwork.CLI")]
[assembly: System.Reflection.AssemblyTitleAttribute("LiveNetwork.CLI")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\LiveNetwork.CLI\obj\Debug\net8.0\LiveNetwork.CLI.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\LiveNetwork.Domain\AIPromptBuilder.cs ===

﻿using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
namespace LiveNetwork.Domain
{
public class AIPromptBuilder
{
public static string StepTag
{
get { return "###ResultPreviousStep##"; }
}
public string? Role { get; set; } = "assistant";
public string? Task { get; set; }
public string? Context { get; set; }
public string? Format { get; set; }
public string? Tone { get; set; } = "professional";
public string? Style { get; set; } = "concise";
public int? MaxLength { get; set; }
public bool? IncludeSources { get; set; }
public bool? StepByStep { get; set; }
public int? Step
{
get
{
return Parent == null ? 1 : Parent.Step + 1; ;
}
}
public List<string> Examples { get; } = [];
public List<string> Constraints { get; } = [];
public Dictionary<string, string> AdditionalParameters { get; } = [];
public List<ChatMessage> ConversationHistory { get; } = [];
public class ChatMessage
{
[JsonPropertyName("role")]
public string Role { get; }
[JsonPropertyName("content")]
public string Content { get; }
public ChatMessage(string role, string content)
{
Role = role;
Content = content;
}
}
public AIPromptBuilder? Parent { get; private set; }
public void SetParent(AIPromptBuilder parent)
{
Parent = parent;
}
private AIPromptBuilder? _nextTask;
public AIPromptBuilder? NextTask
{
get => _nextTask;
set
{
_nextTask = value;
_nextTask?.SetParent(this);
}
}
public void AddExample(string example) => Examples.Add(example);
public void AddConstraint(string constraint) => Constraints.Add(constraint);
public void AddParameter(string key, string value) => AdditionalParameters[key] = value;
public void AddToConversationHistory(string role, string content) => ConversationHistory.Add(new ChatMessage(role, content));
public void ClearConversationHistory() => ConversationHistory.Clear();
public string BuildPrompt()
{
var sb = new StringBuilder();
AppendLineIfNotNull(sb, "Role", Role);
AppendLineIfNotNull(sb, "Task", Task);
AppendLineIfNotNull(sb, "Context", Context);
AppendLineIfNotNull(sb, "Response Format", Format);
AppendList(sb, "Examples", Examples);
AppendList(sb, "Constraints", Constraints);
sb.AppendLine($"Tone: {Tone}");
sb.AppendLine($"Style: {Style}");
if (MaxLength.HasValue)
{
sb.AppendLine($"Maximum length: {MaxLength} words");
}
if (IncludeSources ?? false)
{
sb.AppendLine("Include relevant sources or references.");
}
if (StepByStep ?? false)
{
sb.AppendLine("Provide step-by-step response.");
}
if (AdditionalParameters.Count > 0)
{
sb.AppendLine("Additional Parameters:");
foreach (var (key, value) in AdditionalParameters)
{
sb.AppendLine($"{key}: {value}");
}
}
return sb.ToString();
}
public Prompt BuildPromptObject(string? result = null)
{
var systemBuilder = new StringBuilder();
AppendLineIfNotNull(systemBuilder, "Task", Task);
AppendLineIfNotNull(systemBuilder, "Context", Context);
AppendList(systemBuilder, "Constraints", Constraints);
var userBuilder = new StringBuilder();
AppendLineIfNotNull(userBuilder, "Role", Role);
AppendLineIfNotNull(userBuilder, "Response Format", Format);
AppendList(userBuilder, "Examples", Examples);
userBuilder.AppendLine($"Tone: {Tone}");
userBuilder.AppendLine($"Style: {Style}");
if (MaxLength.HasValue)
{
userBuilder.AppendLine($"Maximum length: {MaxLength} words");
}
if (IncludeSources ?? false)
{
userBuilder.AppendLine("Include relevant sources or references.");
}
if (StepByStep ?? false)
{
userBuilder.AppendLine("Provide step-by-step response.");
}
if (AdditionalParameters.Count > 0)
{
userBuilder.AppendLine("Additional Parameters:");
foreach (var (key, value) in AdditionalParameters)
{
userBuilder.AppendLine($"{key}: {value}");
}
}
return new Prompt
{
SystemContent = systemBuilder.ToString().Trim().Replace(AIPromptBuilder.StepTag, result ?? string.Empty),
UserContent = userBuilder.ToString().Trim(),
};
}
public List<ChatMessage> GetApiMessages()
{
var messages = new List<ChatMessage>();
var systemBuilder = new StringBuilder();
AppendLineIfNotNull(systemBuilder, "Task", Task);
AppendLineIfNotNull(systemBuilder, "Context", Context);
AppendList(systemBuilder, "Constraints", Constraints);
if (systemBuilder.Length > 0)
{
messages.Add(new ChatMessage("system", systemBuilder.ToString()));
}
if (Examples.Count > 0)
{
var examplesText = string.Join(Environment.NewLine, Examples.Select(e => $"- {e}"));
messages.Add(new ChatMessage("user", $"Examples:\n{examplesText}"));
}
messages.Add(new ChatMessage("user", BuildPrompt()));
messages.AddRange(ConversationHistory);
return messages;
}
public string GetApiRequestJson(bool includeSystemMessage = true)
{
var options = new JsonSerializerOptions
{
PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
WriteIndented = true
};
return JsonSerializer.Serialize(new { messages = GetApiMessages() }, options);
}
private static void AppendLineIfNotNull(StringBuilder sb, string label, string value)
{
if (!string.IsNullOrWhiteSpace(value))
{
sb.AppendLine($"{label}: {value}");
}
}
private static void AppendList(StringBuilder sb, string title, List<string> items)
{
if (items?.Count > 0)
{
sb.AppendLine($"{title}:");
foreach (var item in items)
sb.AppendLine($"- {item}");
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Domain\ConnectionInfo.cs ===

﻿namespace LiveNetwork.Domain
{
public sealed class ConnectionInfo
{
public Uri? ProfileUrl { get; set; }
public string? TitleOrPosition { get; set; }
public DateTime? ConnectedOn { get; set; }
}
}

=== FILE: F:\Members\LiveNetwork.Domain\ConnectionInvite.cs ===

﻿using System.Diagnostics.CodeAnalysis;
namespace LiveNetwork.Domain
{
[method: SetsRequiredMembers]
public sealed class ConnectionInvite(string id, string content, string experiment, ConnectionStatus status = ConnectionStatus.Draft)
: Interaction<ConnectionStatus>(id, content, experiment, status)
{
public DateTimeOffset? SentAt { get; private set; }
public DateTimeOffset? CompletedAt { get; private set; }
public void Send()
{
ChangeStatus(ConnectionStatus.Sent);
}
protected override bool IsAllowedTransition(ConnectionStatus from, ConnectionStatus to)
{
return (from, to) switch
{
(ConnectionStatus.Draft, ConnectionStatus.Sent) or
(ConnectionStatus.Sent, ConnectionStatus.Accepted) or
(ConnectionStatus.Sent, ConnectionStatus.Ignored) or
(ConnectionStatus.Sent, ConnectionStatus.Withdrawn) => true,
_ => false
};
}
public void Accept()
{
ChangeStatus(ConnectionStatus.Accepted);
}
public void Ignore()
{
ChangeStatus(ConnectionStatus.Ignored);
}
public void Withdraw()
{
ChangeStatus(ConnectionStatus.Withdrawn);
}
}
public enum ConnectionStatus { Draft, Sent, Accepted, Ignored, Withdrawn }
}

=== FILE: F:\Members\LiveNetwork.Domain\ConversationThread.cs ===

﻿using System.Security.Cryptography;
using System.Text;
using System.Text.Json.Serialization;
namespace LiveNetwork.Domain
{
public class ConversationThread(LinkedInProfile targetProfile)
{
public LinkedInProfile TargetProfile { get; } = targetProfile ?? throw new ArgumentNullException(nameof(targetProfile));
public List<Communication> Communications { get; set; } = [];
public bool HasActivity => Communications is not null && Communications.Count != 0;
public Communication? GetInitialInvite() =>
Communications.FirstOrDefault(i => IsInvite(i));
private static bool IsInvite(Communication i)
{
return i.TypeName == nameof(Invite) && i.Status == InviteStatus.Draft.ToString();
}
public string AddInvite(Invite invite)
{
if (Communications.OfType<Invite>().Any())
throw new InvalidOperationException("An initial invite already exists.");
return AddCommunication(invite);
}
private static string GenerateHashId(Communication c, string? salt = null)
{
var nonce = salt ?? Guid.NewGuid().ToString("N");
var payload = $"{c.GetType().Name}|{c.CreateDate.ToUniversalTime():O}|{c.Content}|{nonce}";
var bytes = Encoding.UTF8.GetBytes(payload);
using var sha = SHA256.Create();
var hash = sha.ComputeHash(bytes);
return Convert.ToHexString(hash, 0, 16);
}
public string AddCommunication(Communication c)
{
ArgumentNullException.ThrowIfNull(c);
if (c.CreateDate == default) c.CreateDate = DateTime.UtcNow;
if (string.IsNullOrWhiteSpace(c.Id))
{
c.Id = GenerateHashId(c);
}
Communications.Add(c);
return c.Id;
}
public bool TryUpdateComunicationStatus(string inviteId, InviteStatus newStatus)
{
if (string.IsNullOrWhiteSpace(inviteId)) { return false; }
var invite = Communications.FirstOrDefault(i => string.Equals(i.Id, inviteId, StringComparison.OrdinalIgnoreCase));
if (invite is null) { return false; }
invite.Status = newStatus.ToString();
return true;
}
}
public class Communication
{
[JsonInclude] public string Id { get; internal set; } = string.Empty;
[JsonInclude] public string Content { get; private set; } = string.Empty;
[JsonInclude] public DateTime CreateDate { get; internal set; }
[JsonInclude] public string? FeedbackNotes { get; set; }
[JsonInclude] public string Experiment { get; set; } = string.Empty;
[JsonInclude] public string Status { get; set; } = string.Empty;
[JsonInclude] public string TypeName { get; set; } = string.Empty;
public Communication() { }
protected Communication(string content, string experiment, string status, string typeName = "Communication")
{
Content = string.IsNullOrWhiteSpace(content)
? throw new ArgumentException("Content cannot be empty.", nameof(content))
: content;
Experiment = experiment;
Status = status;
TypeName = typeName;
}
}
public sealed class Invite : Communication
{
public Invite(string content, string experiment, InviteStatus status = InviteStatus.Draft)
: base(content, experiment, status.ToString(), nameof(Invite)) { }
}
public sealed class Message : Communication
{
public Message(string content, string experiment, MessageStatus status = MessageStatus.Draft)
: base(content, experiment, status.ToString(), nameof(Message)) { }
}
public enum InviteStatus { Draft, Sent, Accepted, Ignored, Withdrawn }
public enum MessageStatus { Draft, Sent, Delivered, Read, Failed }
}

=== FILE: F:\Members\LiveNetwork.Domain\Education.cs ===

﻿using System.Diagnostics.CodeAnalysis;
using Domain;
namespace LiveNetwork.Domain
{
using System.ComponentModel.DataAnnotations;
[method: SetsRequiredMembers]
public sealed class Education(string id) : Entity(id)
{
public string ProfileId { get; private set; } = string.Empty;
public Profile? Profile { get; private set; }
[Required(ErrorMessage = "School is required.")]
[MinLength(2)]
[MaxLength(200)]
public string School { get; set; } = string.Empty;
[Url]
[MaxLength(500)]
public string SchoolUrl { get; set; } = string.Empty;
[Url]
[MaxLength(500)]
public string LogoUrl { get; set; } = string.Empty;
[MaxLength(200)]
public string LogoAlt { get; set; } = string.Empty;
[MaxLength(200)]
public string Degree { get; set; } = string.Empty;
[MaxLength(200)]
public string Field { get; set; } = string.Empty;
[MaxLength(100)]
public string DateRange { get; set; } = string.Empty;
[MaxLength(2000)]
public string Description { get; set; } = string.Empty;
}
}

=== FILE: F:\Members\LiveNetwork.Domain\Experience.cs ===

﻿using System.Diagnostics.CodeAnalysis;
using Domain;
namespace LiveNetwork.Domain
{
using System.ComponentModel.DataAnnotations;
[method: SetsRequiredMembers]
public sealed class Experience(string id) : Entity(id)
{
public string ProfileId { get; private set; } = string.Empty;
public Profile? Profile { get; private set; }
[Required(ErrorMessage = "Company is required.")]
[MinLength(2)]
[MaxLength(200)]
public string Company { get; set; } = string.Empty;
[Url]
[MaxLength(500)]
public string CompanyUrl { get; set; } = string.Empty;
[Url]
[MaxLength(500)]
public string CompanyLogoUrl { get; set; } = string.Empty;
[MaxLength(200)]
public string CompanyLogoAlt { get; set; } = string.Empty;
[MaxLength(150)]
public string EmploymentSummary { get; set; } = string.Empty;
[MaxLength(200)]
public string Location { get; set; } = string.Empty;
public List<ExperienceRole> Roles { get; set; } = [];
public void AddRole(ExperienceRole role)
{
ArgumentNullException.ThrowIfNull(role);
Roles.Add(role);
}
}
}

=== FILE: F:\Members\LiveNetwork.Domain\ExperienceRole.cs ===

﻿using System.Diagnostics.CodeAnalysis;
using Domain;
namespace LiveNetwork.Domain
{
using System.ComponentModel.DataAnnotations;
[method: SetsRequiredMembers]
public sealed class ExperienceRole(string id) : Entity(id)
{
public string ExperienceId { get; private set; } = string.Empty;
public Experience? Experience { get; private set; }
[Required(ErrorMessage = "Title is required.")]
[MinLength(2)]
[MaxLength(150)]
public string Title { get; set; } = string.Empty;
[Required(ErrorMessage = "Date range is required.")]
[MaxLength(100)]
public string DateRange { get; set; } = string.Empty;
[MaxLength(50)]
public string WorkArrangement { get; set; } = string.Empty;
[MaxLength(2000)]
public string Description { get; set; } = string.Empty;
[MaxLength(200)]
public string ContextualSkills { get; set; } = string.Empty;
}
}

=== FILE: F:\Members\LiveNetwork.Domain\Interaction.cs ===

﻿using System.Diagnostics.CodeAnalysis;
using Domain;
namespace LiveNetwork.Domain
{
[method: SetsRequiredMembers]
public abstract class Interaction(string id) : Entity(id)
{
public string ProfileId { get; init; } = string.Empty;
public Profile? Profile { get; private set; }
public string Content { get; protected set; } = string.Empty;
public string Experiment { get; protected set; } = string.Empty;
public string? FeedbackNotes { get; protected set; }
public DateTimeOffset CreatedAt { get; protected set; } = DateTimeOffset.UtcNow;
public DateTimeOffset UpdatedAt { get; protected set; } = DateTimeOffset.UtcNow;
protected void Touch() => UpdatedAt = DateTimeOffset.UtcNow;
}
public abstract class Interaction<TStatus> : Interaction where TStatus : struct, Enum
{
[method: SetsRequiredMembers]
protected Interaction(string id, string content, string experiment, TStatus initialStatus) : base(id)
{
Content = content;
Experiment = experiment;
Status = initialStatus;
}
protected void ChangeStatus(TStatus to)
{
if (!IsAllowedTransition(Status, to))
throw new InvalidOperationException(
$"Transition {typeof(TStatus).Name}: {Status} → {to} is not allowed for {GetType().Name}.");
Status = to;
Touch();
}
protected abstract bool IsAllowedTransition(TStatus from, TStatus to);
public TStatus Status { get; protected set; }
}
}

=== FILE: F:\Members\LiveNetwork.Domain\LinkedInProfile.cs ===

﻿namespace LiveNetwork.Domain
{
public sealed class ExperienceModel
{
public string Company { get; set; } = "";
public string CompanyUrl { get; set; } = "";
public string CompanyLogoUrl { get; set; } = "";
public string CompanyLogoAlt { get; set; } = "";
public string EmploymentSummary { get; set; } = "";
public string Location { get; set; } = "";
public List<ExperienceRoleModel> Roles { get; set; } = new();
}
public sealed class ExperienceRoleModel
{
public string Title { get; set; } = "";
public string DateRange { get; set; } = "";
public string WorkArrangement { get; set; } = "";
public string Description { get; set; } = "";
public string ContextualSkills { get; set; } = "";
}
public sealed class EducationModel
{
public string School { get; set; } = "";
public string SchoolUrl { get; set; } = "";
public string LogoUrl { get; set; } = "";
public string LogoAlt { get; set; } = "";
public string Degree { get; set; } = "";
public string Field { get; set; } = "";
public string DateRange { get; set; } = "";
public string Description { get; set; } = "";
}
public class LinkedInProfile
{
public string FullName { get; set; }
public string Headline { get; set; }
public string Location { get; set; }
public string CurrentCompany { get; set; }
public string ProfileImageUrl { get; set; }
public string BackgroundImageUrl { get; set; }
public string ConnectionDegree { get; set; }
public string Connections { get; set; }
public string Followers { get; set; }
public string AboutText { get; set; }
public required Uri Url { get; set; }
public List<ExperienceModel> Experiences { get; set; } = [];
public List<EducationModel> Educations { get; set; } = [];
}
}

=== FILE: F:\Members\LiveNetwork.Domain\MessageInteraction.cs ===

﻿using System.Diagnostics.CodeAnalysis;
namespace LiveNetwork.Domain
{
[method: SetsRequiredMembers]
public sealed class MessageInteraction(string id, string content, string experiment, InteractionStatus status = InteractionStatus.Draft)
: Interaction<InteractionStatus>(id, content, experiment, status)
{
protected override bool IsAllowedTransition(InteractionStatus from, InteractionStatus to) => (from, to) switch
{
(InteractionStatus.Draft, InteractionStatus.Sent) or
(InteractionStatus.Sent, InteractionStatus.Delivered) or
(InteractionStatus.Delivered, InteractionStatus.Read) or
(InteractionStatus.Sent, InteractionStatus.Failed) => true,
_ => false
};
public void Send()
{
ChangeStatus(InteractionStatus.Sent);
}
public void MarkDelivered()
{
ChangeStatus(InteractionStatus.Delivered);
}
public void MarkRead()
{
ChangeStatus(InteractionStatus.Read);
}
public void Fail()
{
ChangeStatus(InteractionStatus.Failed);
}
}
public enum InteractionStatus { Draft, Sent, Delivered, Read, Failed }
}

=== FILE: F:\Members\LiveNetwork.Domain\OpenAIChatChoice.cs ===

﻿namespace LiveNetwork.Domain
{
using System.Text.Json.Serialization;
public class OpenAIChatChoice
{
[JsonPropertyName("message")]
public OpenAIMessage Message { get; set; }
[JsonPropertyName("finish_reason")]
public string FinishReason { get; set; }
[JsonPropertyName("index")]
public int Index { get; set; }
}
}

=== FILE: F:\Members\LiveNetwork.Domain\OpenAIChatRequest.cs ===

﻿namespace LiveNetwork.Domain
{
using System.Text.Json.Serialization;
public class OpenAIChatRequest
{
[JsonPropertyName("model")]
public string Model { get; set; }
[JsonPropertyName("messages")]
public List<OpenAIMessage> Messages { get; set; }
}
}

=== FILE: F:\Members\LiveNetwork.Domain\OpenAIChatResponse.cs ===

﻿namespace LiveNetwork.Domain
{
using System.Text.Json.Serialization;
public class OpenAIChatResponse
{
[JsonPropertyName("choices")]
public List<OpenAIChatChoice> Choices { get; set; }
}
}

=== FILE: F:\Members\LiveNetwork.Domain\OpenAIMessage.cs ===

﻿namespace LiveNetwork.Domain
{
using System.Text.Json.Serialization;
public class OpenAIMessage
{
[JsonPropertyName("role")]
public string Role { get; set; }
[JsonPropertyName("content")]
public string Content { get; set; }
}
}

=== FILE: F:\Members\LiveNetwork.Domain\ProcessedProfileRecord.cs ===

﻿namespace LiveNetwork.Domain
{
public sealed class ProcessedProfileRecord
{
public required string Url { get; set; }
public string? FullName { get; set; }
public string? SavedJsonPath { get; set; }
public DateTime SavedAtUtc { get; set; } = DateTime.UtcNow;
}
}

=== FILE: F:\Members\LiveNetwork.Domain\Profile.cs ===

﻿using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
using Domain;
namespace LiveNetwork.Domain
{
[method: SetsRequiredMembers]
public sealed class Profile(string id) : Entity(id)
{
[Required(ErrorMessage = "Full name is required.")]
[MinLength(3)]
[MaxLength(200)]
public string FullName { get; set; } = string.Empty;
[MaxLength(300)]
public string Headline { get; set; } = string.Empty;
[MaxLength(200)]
public string Location { get; set; } = string.Empty;
[MaxLength(200)]
public string CurrentCompany { get; set; } = string.Empty;
[Url]
[MaxLength(500)]
public string ProfileImageUrl { get; set; } = string.Empty;
[Url]
[MaxLength(500)]
public string BackgroundImageUrl { get; set; } = string.Empty;
[MaxLength(50)]
public string ConnectionDegree { get; set; } = string.Empty;
[MaxLength(50)]
public string Connections { get; set; } = string.Empty;
[MaxLength(50)]
public string Followers { get; set; } = string.Empty;
[MaxLength(5000)]
public string AboutText { get; set; } = string.Empty;
[Required]
public required Uri Url { get; set; }
public List<Experience> Experiences { get; private set; } = [];
public List<Education> Educations { get; private set; } = [];
public List<Interaction> Communications { get; private set; } = [];
public bool HasActivity => Communications.Count != 0;
public ConnectionInvite? GetInitialInvite() =>
Communications.OfType<ConnectionInvite>().FirstOrDefault(i => i.Status == ConnectionStatus.Draft);
public string AddInvite(ConnectionInvite invite)
{
ArgumentNullException.ThrowIfNull(invite);
return AddCommunication(invite);
}
public string AddMessage(MessageInteraction message)
{
ArgumentNullException.ThrowIfNull(message);
return AddCommunication(message);
}
private string AddCommunication(Interaction communication)
{
ArgumentNullException.ThrowIfNull(communication);
if (string.IsNullOrWhiteSpace(communication.Id))
throw new InvalidOperationException("Communication must have a non-empty Id.");
Communications.Add(communication);
return communication.Id;
}
public void AddExperience(Experience experience)
{
ArgumentNullException.ThrowIfNull(experience);
Experiences.Add(experience);
}
public void AddEducation(Education education)
{
ArgumentNullException.ThrowIfNull(education);
Educations.Add(education);
}
}
}

=== FILE: F:\Members\LiveNetwork.Domain\ProjectModel.cs ===

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace LiveNetwork.Domain
{
public class ProjectModel
{
public string Title { get; set; }
public string Duration { get; set; }
public string Description { get; set; }
public string Url { get; set; }
}
}

=== FILE: F:\Members\LiveNetwork.Domain\Prompt.cs ===

﻿namespace LiveNetwork.Domain
{
public class Prompt
{
public string SystemContent { get; set; }
public string UserContent { get; set; }
}
}

=== FILE: F:\Members\LiveNetwork.Domain\TrackingState.cs ===

﻿namespace LiveNetwork.Domain
{
public class TrackingState
{
public int LastProcessedPage { get; set; } = 0;
public List<Uri> Connections { get; set; } = [];
public bool IsComplete { get; set; } = false;
}
}

=== FILE: F:\Members\LiveNetwork.Domain\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\LiveNetwork.Domain\obj\Debug\net8.0\LiveNetwork.Domain.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("LiveNetwork.Domain")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("LiveNetwork.Domain")]
[assembly: System.Reflection.AssemblyTitleAttribute("LiveNetwork.Domain")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\LiveNetwork.Domain\obj\Debug\net8.0\LiveNetwork.Domain.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\LiveNetwork.Infrastructure\CaptureSnapshot.cs ===

﻿using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
namespace LiveNetwork.Infrastructure.Services
{
public class CaptureSnapshot : ICaptureSnapshot
{
private readonly IWebDriver _driver;
private readonly ILogger<CaptureSnapshot> _logger;
public CaptureSnapshot(IWebDriverFactory driverFactory, ILogger<CaptureSnapshot> logger)
{
_driver = driverFactory.Create();
_logger = logger;
}
public async Task<string> CaptureArtifactsAsync(string executionFolder, string stage)
{
var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
if (string.IsNullOrWhiteSpace(stage))
stage = "UnknownStage";
_logger.LogInformation("Capturing artifacts for stage: {Stage} at {Timestamp}", stage, timestamp);
var htmlPath = Path.Combine(executionFolder, $"{timestamp}.html");
var screenshotPath = Path.Combine(executionFolder, $"{timestamp}.png");
Directory.CreateDirectory(executionFolder);
await File.WriteAllTextAsync(htmlPath, _driver.PageSource);
var screenshot = ((ITakesScreenshot)_driver).GetScreenshot();
screenshot.SaveAsFile(screenshotPath);
_logger.LogInformation("Artifacts captured: {HtmlPath}, {ScreenshotPath}", htmlPath, screenshotPath);
return timestamp;
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\ChromeDriverFactory.cs ===

﻿using Configuration;
using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using Services.Interfaces;
namespace LiveNetwork.Infrastructure.Services
{
public class ChromeDriverFactory : IWebDriverFactory, IDisposable
{
private bool _hide;
private readonly ILogger<ChromeDriverFactory> _logger;
private readonly ChromeDriverService _driverService;
private readonly AppConfig _appConfig;
private IWebDriver? _driver;
public ChromeDriverFactory(ILogger<ChromeDriverFactory> logger, AppConfig appConfig)
{
_logger = logger;
_driverService = ChromeDriverService.CreateDefaultService();
_driverService.HideCommandPromptWindow = true;
_appConfig = appConfig;
}
public IWebDriver Create(bool hide = false)
{
_hide = hide;
if (_driver == null)
{
var downloadFolder = _appConfig.Paths.DownloadFolder;
var options = _hide ? GetHideOptions(downloadFolder) : GetDefaultOptions(downloadFolder);
_driver = new ChromeDriver(_driverService, options);
SetTimeouts(_driver);
_logger.LogInformation("Creating new ChromeDriver instance");
}
return _driver;
}
private static void SetTimeouts(IWebDriver driver)
{
driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);
driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(120);
driver.Manage().Timeouts().AsynchronousJavaScript = TimeSpan.FromSeconds(10);
}
public IWebDriver Create(Action<ChromeOptions> configureOptions)
{
DisposeDriverIfExists();
var downloadFolder = _appConfig.Paths.DownloadFolder;
var options = _hide ? GetHideOptions(downloadFolder) : GetDefaultOptions(downloadFolder); ;
configureOptions?.Invoke(options);
return CreateDriver(options);
}
private IWebDriver CreateDriver(ChromeOptions options)
{
try
{
_logger.LogInformation("Creating new ChromeDriver instance");
_driver = new ChromeDriver(_driverService, options);
_driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);
_driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(120);
_driver.Manage().Timeouts().AsynchronousJavaScript = TimeSpan.FromSeconds(10);
return _driver;
}
catch (Exception ex)
{
_logger.LogError(ex, "Failed to create ChromeDriver");
throw new WebDriverException("Failed to initialize ChromeDriver", ex);
}
}
public ChromeOptions GetDefaultOptions(string downloadFolder)
{
var options = new ChromeOptions();
options.AddArguments("--start-maximized");
options.AddExcludedArgument("enable-automation");
options.AddAdditionalOption("useAutomationExtension", false);
DownloadConfigure(downloadFolder, options);
return options;
}
public static ChromeOptions GetHideOptions(string downloadFolder)
{
var options = new ChromeOptions();
options.AddArguments("--headless=new");
options.AddArguments("--disable-gpu");
options.AddArguments("--window-size=1920,1080");
options.AddArguments("--start-maximized");
options.AddExcludedArgument("enable-automation");
options.AddAdditionalOption("useAutomationExtension", false);
DownloadConfigure(downloadFolder, options);
return options;
}
private static void DownloadConfigure(string downloadFolder, ChromeOptions options)
{
options.AddUserProfilePreference("download.default_directory", downloadFolder);
options.AddUserProfilePreference("download.prompt_for_download", false);
options.AddUserProfilePreference("profile.default_content_settings.popups", 0);
options.AddUserProfilePreference("safebrowsing.enabled", true);
options.AddUserProfilePreference("plugins.always_open_pdf_externally", true);
}
private void DisposeDriverIfExists()
{
if (_driver != null)
{
_logger.LogInformation("Disposing existing ChromeDriver instance");
try { _driver.Quit(); } catch {  }
_driver.Dispose();
_driver = null;
}
}
public void Dispose()
{
if (_driver != null)
{
_logger.LogInformation("Disposing ChromeDriver instance");
_driver.Quit();
_driver.Dispose();
_driver = null;
}
_driverService?.Dispose();
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\ConnectionInfoCollector.cs ===

﻿using Configuration;
using LiveNetwork.Application.Services;
using LiveNetwork.Application.UseCases.CRUD.Profile;
using LiveNetwork.Application.UseCases.CRUD.Profile.Query;
using LiveNetwork.Domain;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
namespace LiveNetwork.Infrastructure.Services
{
public class ConnectionInfoCollector : IConnectionInfoCollector
{
private readonly AppConfig _config;
private readonly IWebDriver _driver;
private readonly ILogger<InviteConnections> _logger;
private readonly ExecutionTracker _executionOptions;
private readonly ITrackingService _trackingService;
private readonly ILoginService _loginService;
private readonly IUtil _util;
private readonly IProfileCreate _profileCreate;
private readonly IProfileRead _profileRead;
private readonly ILinkedInChat _linkedInChat;
public ConnectionInfoCollector(
AppConfig config,
IWebDriverFactory driverFactory,
ILogger<InviteConnections> logger,
ICaptureSnapshot capture,
ExecutionTracker executionOptions,
ITrackingService trackingService,
ILoginService loginService,
IUtil util,
IProfileCreate profileCreate,
IProfileRead profileRead,
ILinkedInChat linkedInChat)
{
_config = config ?? throw new ArgumentNullException(nameof(config));
_driver = driverFactory?.Create(true) ?? throw new ArgumentNullException(nameof(driverFactory));
_logger = logger ?? throw new ArgumentNullException(nameof(logger));
_executionOptions = executionOptions ?? throw new ArgumentNullException(nameof(executionOptions));
_trackingService = trackingService ?? throw new ArgumentNullException(nameof(trackingService));
_loginService = loginService ?? throw new ArgumentNullException(nameof(loginService));
_util = util;
_profileCreate = profileCreate ?? throw new ArgumentNullException(nameof(profileCreate));
_profileRead = profileRead ?? throw new ArgumentNullException(nameof(profileRead));
_linkedInChat = linkedInChat ?? throw new ArgumentNullException(nameof(linkedInChat));
}
public async Task LoadConnectionsAsync()
{
var url = "https://www.linkedin.com/mynetwork/invite-connect/connections/";
_logger.LogInformation("Navigating to profile: {ProfileUrl}", url);
await _loginService.LoginAsync();
_driver.Navigate().GoToUrl(url);
for (int i = 0; i < 15; i++)
{
await _util.WaitForPageLoadAsync(10);
ScrollWorkspaceDown();
await Task.Delay(50);
}
var list = await GetConnections();
await _linkedInChat.SendMessageAsync(list);
}
public async Task<List<ConnectionInfo>> GetConnections()
{
var results = await _trackingService.LoadCollectorConnectionsAsync("Connections_Collected.json") ?? [];
var existingKeys = new HashSet<string>(
results.Select(r => BuildKey(r.ProfileUrl)),
StringComparer.OrdinalIgnoreCase
);
var added = 0;
var skipped = 0;
try
{
var main = "main#workspace div[data-view-name='connections-list'] > div[componentkey^='auto-component-']";
var cards = _driver.FindElements(By.CssSelector(main));
foreach (var card in cards)
{
try
{
var info = new ConnectionInfo();
var profileTag = "a[data-view-name='connections-profile']";
var profileLink = card.FindElements(By.CssSelector(profileTag))
.FirstOrDefault();
if (profileLink != null)
{
var href = profileLink.GetAttribute("href");
if (Uri.TryCreate(href, UriKind.Absolute, out var uri))
info.ProfileUrl = Canonicalize(uri);
}
var paragraphs = card.FindElements(By.TagName("p"))
.Select(p => p.Text.Trim())
.Where(t => !string.IsNullOrWhiteSpace(t))
.ToList();
var title = paragraphs.FirstOrDefault(t =>
!t.StartsWith("Connected on", StringComparison.OrdinalIgnoreCase) &&
!IsLikelyJustAName(t));
if (!string.IsNullOrEmpty(title))
info.TitleOrPosition = title;
var connectedLine = paragraphs.FirstOrDefault(t => t.StartsWith("Connected on", StringComparison.OrdinalIgnoreCase));
if (!string.IsNullOrEmpty(connectedLine))
{
var dateText = connectedLine.Replace("Connected on", "", StringComparison.OrdinalIgnoreCase).Trim();
if (DateTime.TryParse(dateText, out var dt))
info.ConnectedOn = dt;
}
var key = BuildKey(info.ProfileUrl);
if (string.IsNullOrEmpty(key))
{
skipped++;
_logger.LogDebug("Skipping connection without a valid profile URL.");
continue;
}
if (existingKeys.Contains(key))
{
skipped++;
_logger.LogTrace("Duplicate connection skipped: {Key}", key);
continue;
}
results.Add(info);
existingKeys.Add(key);
added++;
}
catch (Exception ex)
{
_logger.LogWarning(ex, "Failed to parse a connection card, skipping.");
}
}
if (added > 0)
{
await _trackingService.SaveCollectorConnectionsAsync(results, "Connections_Collected.json");
}
_logger.LogInformation("Parsed connections. Added: {Added}, Duplicates/Skipped: {Skipped}, Total stored: {Total}.",
added, skipped, results.Count);
}
catch (Exception ex)
{
_logger.LogError(ex, "Error while extracting connections list.");
}
return results;
static string BuildKey(Uri? uri) => uri is null ? string.Empty : uri.ToString().TrimEnd('/').ToLowerInvariant();
static Uri Canonicalize(Uri uri)
{
var builder = new UriBuilder(uri)
{
Query = string.Empty,
Fragment = string.Empty
};
var normalized = builder.Uri.ToString().TrimEnd('/');
return new Uri(normalized);
}
}
private static bool IsLikelyJustAName(string text)
{
if (string.IsNullOrWhiteSpace(text)) return true;
var words = text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
var hasCompanyCue = text.Contains(" at ", StringComparison.OrdinalIgnoreCase) ||
text.Contains("@") ||
text.Contains("|") ||
text.Contains("•");
return !hasCompanyCue && words.Length <= 3;
}
private void ScrollWorkspaceDown()
{
try
{
var workspace = _driver.FindElement(By.CssSelector("main#workspace"));
var js = (IJavaScriptExecutor)_driver;
js.ExecuteScript("arguments[0].scrollTop = arguments[0].scrollHeight;", workspace);
_logger.LogDebug("Scrolled workspace element (id=workspace) to bottom successfully.");
}
catch (NoSuchElementException)
{
_logger.LogWarning("ScrollWorkspaceDown: Workspace element not found.");
}
catch (Exception ex)
{
_logger.LogError(ex, "ScrollWorkspaceDown: Unexpected error while scrolling workspace.");
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\ConversationThreadMappings.cs ===

﻿using System.Security.Cryptography;
using System.Text;
using LiveNetwork.Application.UseCases.CRUD.Profile.Query;
using LiveNetwork.Domain;
using Invite = LiveNetwork.Domain.Invite;
using Message = LiveNetwork.Domain.Message;
namespace LiveNetwork.Infrastructure.Services
{
public static class ConversationThreadMappings
{
public static async Task<List<Profile>> ToDomainProfiles(this IEnumerable<ConversationThread> threads, IProfileRead profileRead)
{
if (threads is null) throw new ArgumentNullException(nameof(threads));
var profilesById = new Dictionary<string, Profile>();
var experiencesById = new Dictionary<string, Experience>();
var rolesById = new Dictionary<string, ExperienceRole>();
var educationsById = new Dictionary<string, Education>();
var commsById = new Dictionary<string, Interaction>();
foreach (var thread  in threads)
{
if (thread?.TargetProfile is null)
{
continue;
}
var sourceProfile = thread.TargetProfile;
var profileId = await GenerateProfileId(sourceProfile, profileRead);
if (!profilesById.TryGetValue(profileId, out var domainProfile))
{
domainProfile = CreateDomainProfile(sourceProfile, profileId);
profilesById[profileId] = domainProfile;
}
ProcessExperiences(experiencesById, rolesById, sourceProfile, profileId, domainProfile);
ProcessEducations(educationsById, sourceProfile, profileId, domainProfile);
ProcessCommunications(commsById, thread, profileId, domainProfile);
}
return [.. profilesById.Values];
}
private static void ProcessCommunications(Dictionary<string, Interaction> commsById, ConversationThread thread, string profileId, Profile domainProfile)
{
if (thread.Communications is null)
{
return;
}
foreach (var xc in thread.Communications)
{
if (xc is null) continue;
var commId = MakeId($"comm|{profileId}|{xc.TypeName}|{xc.CreateDate.ToUniversalTime():O}|{xc.Content}|{xc.Experiment}");
if (commsById.ContainsKey(commId)) continue;
if (string.Equals(xc.TypeName, nameof(Invite), StringComparison.Ordinal))
{
var status = ParseEnumSafe<ConnectionStatus>(xc.Status, ConnectionStatus.Draft);
var invite = new ConnectionInvite(commId, xc.Content ?? string.Empty, xc.Experiment ?? string.Empty, status);
commsById[commId] = invite;
domainProfile.AddInvite(invite);
}
else if (string.Equals(xc.TypeName, nameof(Message), StringComparison.Ordinal))
{
var status = ParseEnumSafe<InteractionStatus>(xc.Status, InteractionStatus.Draft);
var message = new MessageInteraction(commId, xc.Content ?? string.Empty, xc.Experiment ?? string.Empty, status);
commsById[commId] = message;
domainProfile.AddMessage(message);
}
}
}
private static void ProcessEducations(Dictionary<string, Education> educationsById, LinkedInProfile sourceProfile, string profileId, Profile domainProfile)
{
if (sourceProfile.Educations is not null)
{
foreach (var xe in sourceProfile.Educations)
{
var eduId = MakeId($"education|{profileId}|{xe.School}|{xe.Degree}|{xe.Field}|{xe.DateRange}");
if (!educationsById.ContainsKey(eduId))
{
var de = new Education(eduId)
{
School = xe.School ?? string.Empty,
SchoolUrl = xe.SchoolUrl ?? string.Empty,
LogoUrl = xe.LogoUrl ?? string.Empty,
LogoAlt = xe.LogoAlt ?? string.Empty,
Degree = xe.Degree ?? string.Empty,
Field = xe.Field ?? string.Empty,
DateRange = xe.DateRange ?? string.Empty,
Description = xe.Description ?? string.Empty
};
educationsById[eduId] = de;
domainProfile.AddEducation(de);
}
}
}
}
private static void ProcessExperiences(Dictionary<string, Experience> experiencesById, Dictionary<string, ExperienceRole> rolesById, LinkedInProfile sourceProfile, string profileId, Profile domainProfile)
{
if (sourceProfile.Experiences is not null)
{
foreach (var xe in sourceProfile.Experiences)
{
var expId = MakeId($"experience|{profileId}|{xe.Company}|{xe.EmploymentSummary}");
if (!experiencesById.ContainsKey(expId))
{
var de = new Experience(expId)
{
Company = xe.Company ?? string.Empty,
CompanyUrl = xe.CompanyUrl ?? string.Empty,
CompanyLogoUrl = xe.CompanyLogoUrl ?? string.Empty,
CompanyLogoAlt = xe.CompanyLogoAlt ?? string.Empty,
EmploymentSummary = xe.EmploymentSummary ?? string.Empty,
Location = xe.Location ?? string.Empty,
Roles = []
};
experiencesById[expId] = de;
domainProfile.AddExperience(de);
}
if (xe.Roles is not null)
{
foreach (var xr in xe.Roles)
{
var roleId = MakeId($"role|{profileId}|{xe.Company}|{xr.Title}|{xr.DateRange}|{xr.WorkArrangement}");
if (!rolesById.ContainsKey(roleId))
{
var dr = new ExperienceRole(roleId)
{
Title = xr.Title ?? string.Empty,
DateRange = xr.DateRange ?? string.Empty,
WorkArrangement = xr.WorkArrangement ?? string.Empty,
Description = xr.Description ?? string.Empty,
ContextualSkills = xr.ContextualSkills ?? string.Empty
};
rolesById[roleId] = dr;
experiencesById[expId].Roles.Add(dr);
}
}
}
}
}
}
private static Profile CreateDomainProfile(LinkedInProfile sourceProfile, string profileId)
{
return new Profile(profileId)
{
FullName = sourceProfile.FullName ?? string.Empty,
Headline = sourceProfile.Headline ?? string.Empty,
Location = sourceProfile.Location ?? string.Empty,
CurrentCompany = sourceProfile.CurrentCompany ?? string.Empty,
ProfileImageUrl = sourceProfile.ProfileImageUrl ?? string.Empty,
BackgroundImageUrl = sourceProfile.BackgroundImageUrl ?? string.Empty,
ConnectionDegree = sourceProfile.ConnectionDegree ?? string.Empty,
Connections = sourceProfile.Connections ?? string.Empty,
Followers = sourceProfile.Followers ?? string.Empty,
AboutText = sourceProfile.AboutText ?? string.Empty,
Url = sourceProfile.Url ?? new Uri("about:blank"),
};
}
private static async Task<string> GenerateProfileId(LinkedInProfile sourceProfile, IProfileRead profileRead)
{
var id = await profileRead.GetProfilesByUrlAsync(sourceProfile.Url?.ToString(), null, 1);
if (id is not null && id.IsSuccessful)
{
if (id.Data != null)
{
if (id.Data.Items != null)
{
if (id.Data.Items.FirstOrDefault() !=  null)
{
return id.Data.Items.FirstOrDefault().Id;
}
}
}
}
var profileKey = (sourceProfile.Url?.ToString() ?? sourceProfile.FullName ?? Guid.NewGuid().ToString())
.Trim().ToLowerInvariant();
return GenerateId($"profile|{profileKey}");
}
private static string GenerateId(string seed)
{
if (string.IsNullOrWhiteSpace(seed))
return Guid.NewGuid().ToString("N");
using var sha = SHA256.Create();
var hash = sha.ComputeHash(Encoding.UTF8.GetBytes(seed));
return Convert.ToHexString(hash, 0, 16);
}
private static TEnum ParseEnumSafe<TEnum>(string? value, TEnum @default) where TEnum : struct, Enum
=> Enum.TryParse<TEnum>(value, ignoreCase: true, out var parsed) ? parsed : @default;
private static string MakeId(string seed)
{
if (string.IsNullOrWhiteSpace(seed)) seed = Guid.NewGuid().ToString("N");
using var sha = SHA256.Create();
var bytes = sha.ComputeHash(Encoding.UTF8.GetBytes(seed));
return Convert.ToHexString(bytes, 0, 16);
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\DirectoryCheck.cs ===

﻿using Configuration;
using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using Services.Interfaces;
namespace LiveNetwork.Infrastructure.Services
{
public class DirectoryCheck : IDirectoryCheck
{
private readonly ILogger<DirectoryCheck> _logger;
private readonly ExecutionTracker _executionOptions;
public DirectoryCheck(ILogger<DirectoryCheck> logger, ExecutionTracker executionOptions)
{
_logger = logger;
_executionOptions = executionOptions;
}
public void EnsureDirectoryExists(string path)
{
if (!Directory.Exists(path))
{
Directory.CreateDirectory(path);
_logger.LogInformation($"📁 Created execution folder at: {_executionOptions.ExecutionFolder}");
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\InvitateConnections.cs ===

﻿using System.Diagnostics;
using Configuration;
using LiveNetwork.Application.Services;
using LiveNetwork.Domain;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
namespace LiveNetwork.Infrastructure.Services
{
public class InviteConnections : IInviteConnections
{
private readonly AppConfig _config;
private readonly IWebDriver _driver;
private readonly ILogger<InviteConnections> _logger;
private readonly ICaptureSnapshot _capture;
private readonly ExecutionTracker _executionOptions;
private readonly ITrackingService _trackingService;
private readonly ILoginService _loginService;
const string ExecutionFolder = "Invite";
const string Stage = "Send";
public InviteConnections(
AppConfig config,
IWebDriverFactory driverFactory,
ILogger<InviteConnections> logger,
ICaptureSnapshot capture,
ExecutionTracker executionOptions,
ITrackingService trackingService,
ILoginService loginService)
{
_config = config ?? throw new ArgumentNullException(nameof(config));
_driver = driverFactory?.Create(true) ?? throw new ArgumentNullException(nameof(driverFactory));
_logger = logger ?? throw new ArgumentNullException(nameof(logger));
_capture = capture ?? throw new ArgumentNullException(nameof(capture));
_executionOptions = executionOptions ?? throw new ArgumentNullException(nameof(executionOptions));
_trackingService = trackingService ?? throw new ArgumentNullException(nameof(trackingService));
_loginService = loginService ?? throw new ArgumentNullException(nameof(loginService));
}
public async Task Invite()
{
var sw = Stopwatch.StartNew();
var correlationId = _executionOptions?.TimeStamp ?? DateTime.UtcNow.ToString("yyyyMMdd_HHmmss");
var threadsPath = _config.Paths.ConversationOutputFilePath;
_logger.LogInformation("({CorrelationId}) Invite workflow started. Loading threads from {ThreadsPath}", correlationId, threadsPath);
var threads = await LoadThreadsOrWarnAsync(threadsPath, correlationId);
if (threads is null) { return; }
var connections = GetActiveThreadsOrWarn(threads, correlationId);
if (connections is null) { return; }
if (!await EnsureLoggedInOrLogAbortAsync(correlationId)) { return; }
_logger.LogInformation("({CorrelationId}) Loaded {Count} active conversation thread(s). Beginning processing.", correlationId, connections.Count);
var processed = 0;
var skipped = 0;
var errors = 0;
for (int index = 0; index < connections.Count; index++)
{
var thread = connections[index];
if (!IsThreadProcessable(thread))
{
skipped++;
continue;
}
try
{
Navegate(thread);
if (!ExecuteInviteFlow(thread))
{
skipped++;
}
processed++;
await _trackingService.SaveConversationThreadAsync(threads, threadsPath);
}
catch (Exception ex)
{
errors++;
_logger.LogError(ex, "Error processing profile {ProfileUrl}. Thread skipped.", thread.TargetProfile?.Url);
try { await _capture.CaptureArtifactsAsync(ExecutionFolder, Stage); } catch {  }
}
}
sw.Stop();
_logger.LogInformation(
"({CorrelationId}) Invite workflow finished in {ElapsedMs} ms. Processed: {Processed}, Skipped: {Skipped}, Errors: {Errors}",
correlationId, sw.ElapsedMilliseconds, processed, skipped, errors);
}
private void Navegate(ConversationThread? thread)
{
var profileUrl = thread?.TargetProfile.Url;
_logger.LogInformation("Navigating to profile: {ProfileUrl}", profileUrl);
_driver.Navigate().GoToUrl(profileUrl);
_logger.LogInformation("Navigation completed for {ProfileUrl}", profileUrl);
}
private bool ExecuteInviteFlow(ConversationThread? thread)
{
_logger.LogInformation("ExecuteInviteFlow: Starting invite flow for {ProfileName} ({ProfileUrl}).",
thread?.TargetProfile?.FullName ?? "Unknown", thread?.TargetProfile?.Url?.ToString() ?? "N/A");
var invitationComunication = thread?.GetInitialInvite();
if (invitationComunication == null)
{
_logger.LogWarning("ExecuteInviteFlow: No initial invite communication found. Skipping.");
return false;
}
thread.TryUpdateComunicationStatus(invitationComunication.Id, InviteStatus.Sent);
_logger.LogDebug("ExecuteInviteFlow: Invite status set to 'Sent' for InviteId={InviteId}", invitationComunication.Id);
var invitation = invitationComunication.Content;
if (!ClickConnect())
{
if (!ClickMoreActions())
{
_logger.LogWarning("ExecuteInviteFlow: Could not open 'More actions' menu. Skipping thread.");
return true;
}
else
{
if (!ClickConnectFromOverflow())
{
_logger.LogWarning("ExecuteInviteFlow: Could not open 'Connect' dialog (invite modal). Skipping thread.");
return false;
}
_logger.LogDebug("ExecuteInviteFlow: 'Connect' dialog opened successfully (via overflow).");
if (SkipIfNoInviteContent(invitation))
{
_logger.LogInformation("ExecuteInviteFlow: Skipping thread because invite content is empty.");
return false;
}
if (!SendInvitation(invitation))
{
_logger.LogError("ExecuteInviteFlow: Failed to send invitation.");
return false;
}
}
_logger.LogDebug("ExecuteInviteFlow: 'More actions' menu opened.");
}
else
{
if (SkipIfNoInviteContent(invitation))
{
_logger.LogInformation("ExecuteInviteFlow: Skipping thread because invite content is empty.");
return false;
}
if (!SendInvitation(invitation))
{
_logger.LogError("ExecuteInviteFlow: Failed to send invitation.");
return false;
}
}
_logger.LogInformation("ExecuteInviteFlow: Invitation sent successfully to {ProfileName}.",
thread?.TargetProfile?.FullName ?? "Unknown");
return true;
}
private bool SendInvitation(string messageText)
{
if (_config.Options.EnableCustomMessages)
{
if (!ClickAddFreeNote(messageText))
{
_logger.LogWarning("Failed to send invite with a note (modal did not close or button unavailable). Skipping thread.");
return false;
}
return true;
}
if (!ClickSendWithoutNote())
{
_logger.LogWarning("Failed to send invite without a note (modal did not close or button unavailable). Skipping thread.");
return false;
}
return true;
}
private bool IsThreadProcessable(ConversationThread? thread)
{
if (SkipIfNullThread(thread))
{
return false;
}
var targetProfile = thread?.TargetProfile;
if (SkipIfNullTargetProfile(targetProfile))
{
return false;
}
var profileUrl = targetProfile?.Url;
if (SkipIfInvalidateUrl(profileUrl))
{
return false;
}
return true;
}
private bool SkipIfInvalidateUrl(Uri? profileUrl)
{
if (profileUrl is null || string.IsNullOrWhiteSpace(profileUrl.Host))
{
_logger.LogWarning("Target profile URL is missing/invalid: {ProfileUrl}. Skipping thread.", profileUrl?.ToString());
return true;
}
return false;
}
private bool SkipIfNullTargetProfile(LinkedInProfile? targetProfile)
{
if (targetProfile is null)
{
_logger.LogWarning("Target profile is null. Skipping thread.");
return true;
}
return false;
}
private bool SkipIfNoInviteContent(string? invitation)
{
if (!string.IsNullOrWhiteSpace(invitation))
{
return false;
}
_logger.LogDebug("Thread has no initial invite content. Skipping.");
return true;
}
private async Task<bool> EnsureLoggedInOrLogAbortAsync(string correlationId)
{
var ok = await EnsureLoggedInAsync(correlationId);
if (ok) return true;
_logger.LogError("({CorrelationId}) Aborting workflow due to unsuccessful login.", correlationId);
try { await _capture.CaptureArtifactsAsync(ExecutionFolder, "Login"); } catch {  }
return false;
}
private async Task<List<ConversationThread>?> LoadThreadsOrWarnAsync(string threadsPath, string correlationId)
{
var threads = await _trackingService.LoadConversationThreadAsync(threadsPath);
if (threads is null || threads.Count == 0)
{
var profilesPath = _config.Paths.DetailedProfilesOutputFilePath;
_logger.LogInformation("Step 1/6: Loading detailed profiles from path: {ProfilesPath}", profilesPath);
var swProfiles = Stopwatch.StartNew();
var profiles = await _trackingService.LoadDetailedProfilesAsync(profilesPath);
threads.AddRange(profiles.Select(p => new ConversationThread(p)));
_logger.LogWarning("({CorrelationId}) No conversation threads found at {ThreadsPath}. Nothing to process.", correlationId, threadsPath);
}
return threads;
}
private bool SkipIfNullThread(ConversationThread? thread)
{
if (thread is null)
{
_logger.LogWarning("Thread is null. Skipping.");
return true;
}
return false;
}
private List<ConversationThread>? GetActiveThreadsOrWarn(List<ConversationThread> threads, string correlationId)
{
var connections = threads
.Where(t => t.Communications.Any(c =>
c.TypeName == nameof(Invite) &&
c.Status == InviteStatus.Draft.ToString())).ToList();
if (connections.Count == 0)
{
_logger.LogWarning("({CorrelationId}) No threads with activity found. Nothing to process.", correlationId);
return null;
}
return connections;
}
private async Task<bool> EnsureLoggedInAsync(string correlationId)
{
_logger.LogInformation("({CorrelationId}) Attempting LinkedIn login…", correlationId);
var sw = Stopwatch.StartNew();
try
{
await _loginService.LoginAsync();
sw.Stop();
_logger.LogInformation("({CorrelationId}) Login successful in {ElapsedMs} ms.", correlationId, sw.ElapsedMilliseconds);
return true;
}
catch (Exception ex)
{
sw.Stop();
_logger.LogError(ex, "({CorrelationId}) Login failed after {ElapsedMs} ms.", correlationId, sw.ElapsedMilliseconds);
try { await _capture.CaptureArtifactsAsync(ExecutionFolder, Stage); } catch {  }
return false;
}
}
private bool ClickConnectFromOverflow()
{
var wait = new WebDriverWait(new SystemClock(), _driver, TimeSpan.FromSeconds(12), TimeSpan.FromMilliseconds(250));
var container = wait.Until(d =>
d.FindElements(By.CssSelector("div.artdeco-dropdown__content-inner"))
.FirstOrDefault(e => e.Displayed));
if (container is null)
{
_logger.LogWarning("Overflow menu not found/visible; cannot click 'Connect'.");
return false;
}
By[] candidates =
[
By.XPath(".
By.XPath(".
By.XPath(".
];
IWebElement? connect = null;
foreach (var by in candidates)
{
connect = container.FindElements(by).FirstOrDefault(e => e.Displayed && e.Enabled);
if (connect != null) break;
}
if (connect is null)
{
_logger.LogWarning("'Connect' item not present in overflow menu (maybe already 1st-degree or different UI).");
return false;
}
try
{
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView({block:'center'});", connect);
}
catch {  }
try
{
_logger.LogDebug("Clicking 'Connect' in overflow menu…");
connect.Click();
}
catch (Exception)
{
_logger.LogDebug("Normal click failed. Retrying with JS click…");
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].click();", connect);
}
try
{
wait.Until(d =>
d.FindElements(By.XPath("
.Any(dialog => dialog.Displayed &&
dialog.FindElements(By.XPath(".
_logger.LogInformation("'Connect' dialog opened.");
}
catch (WebDriverTimeoutException)
{
_logger.LogWarning("'Connect' clicked, but invite dialog did not appear within the timeout.");
}
return true;
}
private bool ClickConnect()
{
var wait = new WebDriverWait(new SystemClock(), _driver, TimeSpan.FromSeconds(12), TimeSpan.FromMilliseconds(250));
By[] locators =
[
By.CssSelector("button[aria-label*='connect' i]"),
By.XPath("
By.XPath("
By.CssSelector("button.artdeco-button--primary")
];
IWebElement? btn = null;
foreach (var by in locators)
{
try
{
btn = wait.Until(d =>
{
var e = d.FindElements(by).FirstOrDefault(x => x.Displayed && x.Enabled);
return e;
});
if (btn != null) break;
}
catch (WebDriverTimeoutException)
{
}
}
if (btn is null)
{
_logger.LogInformation("Could not find 'Connect' button on the profile header.");
return false;
}
try
{
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView({block:'center'});", btn);
}
catch {  }
try
{
_logger.LogDebug("Clicking 'Connect' button…");
btn.Click();
return true;
}
catch (Exception)
{
_logger.LogDebug("Normal click failed. Retrying with JS click…");
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].click();", btn);
return false;
}
}
private bool ClickMoreActions()
{
var wait = new WebDriverWait(new SystemClock(), _driver, TimeSpan.FromSeconds(12), TimeSpan.FromMilliseconds(250));
By[] locators =
{
By.CssSelector("button.artdeco-dropdown__trigger[aria-label='More actions']"),
By.XPath("
By.XPath("
By.XPath("
};
IWebElement? btn = null;
foreach (var by in locators)
{
try
{
btn = wait.Until(d =>
{
var e = d.FindElements(by).FirstOrDefault(x => x.Displayed && x.Enabled);
return e;
});
if (btn != null) break;
}
catch (WebDriverTimeoutException)
{
}
}
if (btn is null)
{
_logger.LogInformation("Could not find 'More actions' button on the profile header.");
return false;
}
try
{
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView({block:'center'});", btn);
}
catch {  }
try
{
_logger.LogDebug("Clicking 'More actions' button…");
btn.Click();
return true;
}
catch (Exception)
{
_logger.LogDebug("Normal click failed. Retrying with JS click…");
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].click();", btn);
return false;
}
}
private bool ClickAddFreeNote(string messageText)
{
var wait = new WebDriverWait(new SystemClock(), _driver, TimeSpan.FromSeconds(12), TimeSpan.FromMilliseconds(250));
var modal = wait.Until(d =>
d.FindElements(By.CssSelector("div.artdeco-modal.send-invite[role='dialog']"))
.FirstOrDefault(e => e.Displayed));
if (modal is null)
{
_logger.LogWarning("Invite modal not visible; cannot click 'Add a free note'.");
return false;
}
By[] candidates =
[
By.CssSelector("button[aria-label='Add a free note']"),
By.XPath(".
By.XPath(".
];
IWebElement? addNoteBtn = null;
foreach (var by in candidates)
{
addNoteBtn = modal.FindElements(by).FirstOrDefault(e => e.Displayed && e.Enabled);
if (addNoteBtn != null) break;
}
if (addNoteBtn is null)
{
_logger.LogWarning("'Add a free note' button not found (UI/locale may differ).");
return false;
}
try { ((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView({block:'center'});", addNoteBtn); } catch {  }
try
{
_logger.LogDebug("Clicking 'Add a free note'…");
addNoteBtn.Click();
if (TrySetInvitationMessage(messageText))
{
return true;
}
}
catch (Exception)
{
_logger.LogDebug("Normal click failed. Retrying with JS click…");
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].click();", addNoteBtn);
}
try
{
var noteFieldVisible = wait.Until(d =>
d.FindElements(By.CssSelector("textarea[name='message']")).Any(e => e.Displayed));
if (noteFieldVisible) _logger.LogInformation("'Add a free note' clicked successfully (note field visible).");
return noteFieldVisible;
}
catch (WebDriverTimeoutException)
{
_logger.LogWarning("Clicked 'Add a free note' but the note field did not appear in time.");
return false;
}
}
private bool TrySetInvitationMessage(string messageText)
{
var wait = new WebDriverWait(new SystemClock(), _driver, TimeSpan.FromSeconds(10), TimeSpan.FromMilliseconds(250));
try
{
var textArea = wait.Until(d =>
d.FindElements(By.CssSelector("textarea[name='message']"))
.FirstOrDefault(e => e.Displayed && e.Enabled));
if (textArea is null)
{
_logger.LogWarning("Invitation message textarea not found.");
return false;
}
textArea.Clear();
var truncatedMessage = TruncateMessage(messageText, 200);
textArea.SendKeys(truncatedMessage);
TryClickSendInvitation();
_logger.LogInformation("Invitation message set successfully.");
return true;
}
catch (WebDriverTimeoutException)
{
_logger.LogWarning("Timed out waiting for invitation message textarea.");
return false;
}
catch (Exception ex)
{
_logger.LogError(ex, "Failed to set invitation message.");
return false;
}
}
public string TruncateMessage(string messageText, int maxLength)
{
if (string.IsNullOrEmpty(messageText))
{
_logger.LogWarning("TruncateMessage called with null or empty input.");
return messageText ?? string.Empty;
}
if (messageText.Length <= maxLength)
{
_logger.LogDebug("TruncateMessage: No truncation needed. Length={Length}, Max={MaxLength}", messageText.Length, maxLength);
return messageText;
}
string truncated = messageText.Substring(0, maxLength);
_logger.LogInformation("TruncateMessage: Message truncated. OriginalLength={OriginalLength}, Max={MaxLength}", messageText.Length, maxLength);
return truncated;
}
private bool TryClickSendInvitation()
{
var wait = new WebDriverWait(new SystemClock(), _driver, TimeSpan.FromSeconds(10), TimeSpan.FromMilliseconds(250));
try
{
By[] locators =
[
By.CssSelector("button[aria-label='Send invitation']"),
By.XPath("
];
IWebElement? sendBtn = null;
foreach (var by in locators)
{
sendBtn = wait.Until(d =>
d.FindElements(by).FirstOrDefault(e => e.Displayed && e.Enabled));
if (sendBtn != null) break;
}
if (sendBtn is null)
{
_logger.LogWarning("'Send invitation' button not found.");
return false;
}
try
{
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView({block:'center'});", sendBtn);
}
catch {  }
try
{
_logger.LogDebug("Clicking 'Send invitation' button…");
sendBtn.Click();
}
catch (Exception)
{
_logger.LogDebug("Normal click failed. Retrying with JS click…");
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].click();", sendBtn);
}
var closed = wait.Until(d =>
!d.FindElements(By.CssSelector("div.artdeco-modal.send-invite[role='dialog']"))
.Any(e => e.Displayed));
if (closed)
{
_logger.LogInformation("Invitation sent successfully (modal closed).");
return true;
}
return false;
}
catch (WebDriverTimeoutException)
{
_logger.LogWarning("Timed out waiting for 'Send invitation' action to complete.");
return false;
}
catch (Exception ex)
{
_logger.LogError(ex, "Unexpected error clicking 'Send invitation' button.");
return false;
}
}
private bool ClickSendWithoutNote()
{
var wait = new WebDriverWait(new SystemClock(), _driver, TimeSpan.FromSeconds(12), TimeSpan.FromMilliseconds(250));
var modal = wait.Until(d =>
d.FindElements(By.CssSelector("div.artdeco-modal.send-invite[role='dialog']"))
.FirstOrDefault(e => e.Displayed));
if (modal is null)
{
_logger.LogWarning("Invite modal not visible; cannot click 'Send without a note'.");
return false;
}
By[] candidates =
[
By.CssSelector("button[aria-label='Send without a note']"),
By.XPath(".
By.XPath(".
];
IWebElement? sendBtn = null;
foreach (var by in candidates)
{
sendBtn = modal.FindElements(by).FirstOrDefault(e => e.Displayed && e.Enabled);
if (sendBtn != null) break;
}
if (sendBtn is null)
{
_logger.LogWarning("'Send without a note' button not found (UI/locale may differ).");
return false;
}
try { ((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView({block:'center'});", sendBtn); } catch {  }
try
{
_logger.LogDebug("Clicking 'Send without a note'…");
sendBtn.Click();
}
catch (Exception)
{
_logger.LogDebug("Normal click failed. Retrying with JS click…");
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].click();", sendBtn);
}
try
{
var closed = wait.Until(d =>
!d.FindElements(By.CssSelector("div.artdeco-modal.send-invite[role='dialog']"))
.Any(e => e.Displayed));
if (closed) _logger.LogInformation("Invite sent without a note (modal closed).");
return closed;
}
catch (WebDriverTimeoutException)
{
_logger.LogWarning("Clicked 'Send without a note' but the modal did not close in time.");
return false;
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\InvitePrompt.cs ===

﻿using System.Text;
using System.Text.RegularExpressions;
using LiveNetwork.Domain;
namespace LiveNetwork.Infrastructure.Services
{
public static class InvitePrompt
{
public const string Experiment = "linkedin_invite_content_reference_v1";
private const string DefaultTone = "professional, respectful, thoughtful";
private const string DefaultStyle = "concise, specific, genuine";
private const int DefaultMaxChars = 195;
private const string FallbackName = "there";
public static Prompt BuildPrompt(
LinkedInProfile profile,
string? recentContent = null,
string? sharedChallenge = null,
string tone = DefaultTone,
string style = DefaultStyle,
int maxChars = DefaultMaxChars)
{
ValidateParameters(profile, maxChars);
var profileData = ExtractProfileData(profile, recentContent, sharedChallenge);
var builder = new AIPromptBuilder();
ConfigureAIPromptBuilder(builder, profileData, tone, style, maxChars);
return builder.BuildPromptObject();
}
private static void ValidateParameters(LinkedInProfile profile, int maxChars)
{
if (profile == null)
{
throw new ArgumentNullException(nameof(profile));
}
if (profile.Url == null) throw new ArgumentException("Profile.Url is required.", nameof(profile));
if (maxChars <= 0) throw new ArgumentException("Max characters must be positive.", nameof(maxChars));
}
private static ProfileData ExtractProfileData(LinkedInProfile profile, string? recentContent, string? sharedChallenge)
{
return new ProfileData
{
Name = Safe(profile.FullName, FallbackName),
IndustryArea = DeriveIndustryArea(profile),
NotableAchievement = DeriveNotableAchievement(profile),
Headline = Safe(profile.Headline),
Location = Safe(profile.Location),
CurrentCompany = Safe(profile.CurrentCompany),
RecentContent = Safe(recentContent),
SharedChallenge = Safe(sharedChallenge, "common technical challenges in our field"),
ProfileUrl = profile.Url
};
}
private static void ConfigureAIPromptBuilder(AIPromptBuilder builder, ProfileData profileData, string tone, string style, int maxChars)
{
builder.Role = "assistant";
builder.Task = GetTaskDescription();
builder.Context = profileData.BuildContextString();
builder.Format = GetFormatInstructions(maxChars);
builder.Tone = tone;
builder.Style = style;
builder.MaxLength = null;
builder.IncludeSources = false;
builder.StepByStep = false;
AddConstraints(builder, maxChars);
AddExamples(builder);
AddParameters(builder, maxChars, profileData.RecentContent, profileData.SharedChallenge);
}
private static string GetTaskDescription()
{
return @"Write a thoughtful LinkedIn invite that references the recipient's content and establishes common ground around professional challenges:
- Reference specific content if available (post, article, etc.)
- Mention a genuine professional challenge that creates common ground
- Show respect for their expertise and time
- Give graceful permission to decline";
}
private static string GetFormatInstructions(int maxChars)
{
return $@"Write 2–3 concise sentences (≤ {maxChars} characters).
Start with the recipient's first name (e.g., ""Hi Paula,"").
Structure:
1) Reference their content or work (specific and genuine)
2) Connect it to your own work/experience
3) Mention a specific professional challenge as common ground
4) Express desire to connect for that reason with permission to decline
Output only the invite text (no explanations).";
}
private static void AddConstraints(AIPromptBuilder builder, int maxChars)
{
builder.AddConstraint($"Strict Hard limit: <= {maxChars} characters in total.");
builder.AddConstraint("Start with the recipient's first name (e.g., \"Hi Paula,\").");
builder.AddConstraint("Reference specific content if available, otherwise reference their general area of expertise.");
builder.AddConstraint("Mention a genuine, non-presumptuous professional challenge.");
builder.AddConstraint("Include explicit permission to decline (e.g., \"if not, I understand completely\").");
builder.AddConstraint("Be specific but not overly technical - keep it accessible.");
builder.AddConstraint("No flattery or excessive compliments - keep it professional.");
builder.AddConstraint("No hard selling or pitching.");
builder.AddConstraint("Write in English.");
builder.AddConstraint("Return only the message text (no prefixes like 'Draft:' or code fences).");
}
private static void AddExamples(AIPromptBuilder builder)
{
builder.AddExample(
"GOOD: \"Hi Paula, your post on system architecture resonated with me. I also work in software dev and face similar challenges. Would you be open to connect? No worries if not.\"");
builder.AddExample(
"GOOD: \"\"Hi Mark, your article on data pipeline optimization was insightful. I also work on data engineering challenges. Would you be open to connect? No problem if not.\"");
builder.AddExample(
"GOOD: \"Hi there, I saw your profile and your work in product management at TechCorp stood out. I also focus on engineering + strategy. Open to connect? No pressure if not.\"");
builder.AddExample(
"BAD: \"Dear Sir/Madam, I would like to add you to my professional network on LinkedIn to explore potential synergies for my B2B SaaS solution.\"");
builder.AddExample(
"BAD: \"Hi Anna, we should connect! I see you're a developer. My company helps developers like you reduce technical debt by 50%. Let's hop on a quick call this week?\"");
builder.AddExample(
"BAD: \"Hi Cloud, your profile is amazing! Let's connect and change the world together. I'd love to pick your brain over coffee.\"");
}
private static void AddParameters(AIPromptBuilder builder, int maxChars, string? recentContent, string? sharedChallenge)
{
builder.AddParameter("TargetMaxChars", maxChars.ToString());
builder.AddParameter("Approach", "Content-referencing with shared challenges");
if (!string.IsNullOrWhiteSpace(recentContent))
builder.AddParameter("RecentContent", recentContent);
if (!string.IsNullOrWhiteSpace(sharedChallenge))
builder.AddParameter("SharedChallenge", sharedChallenge);
}
private static string DeriveIndustryArea(LinkedInProfile profile)
{
var contextual = profile.Experiences?
.SelectMany(e => e.Roles ?? Enumerable.Empty<ExperienceRoleModel>())
.Select(r => r.ContextualSkills)
.FirstOrDefault(s => !string.IsNullOrWhiteSpace(s));
if (!string.IsNullOrWhiteSpace(contextual))
return TrimToPhrase(contextual, 80);
if (!string.IsNullOrWhiteSpace(profile.Headline))
return TrimToPhrase(ExtractPrimaryFromHeadline(profile.Headline), 80);
if (!string.IsNullOrWhiteSpace(profile.CurrentCompany))
return TrimToPhrase(profile.CurrentCompany, 80);
return "their field";
}
private static string DeriveNotableAchievement(LinkedInProfile profile)
{
var about = FirstSentence(profile.AboutText);
if (!string.IsNullOrWhiteSpace(about))
return TrimToPhrase(about, 120);
var current = profile.Experiences?
.FirstOrDefault(e => StringEquals(e.Company, profile.CurrentCompany))
?? profile.Experiences?.FirstOrDefault();
var currentRole = current?.Roles?.FirstOrDefault()?.Title;
if (!string.IsNullOrWhiteSpace(currentRole) && !string.IsNullOrWhiteSpace(current?.Company))
return $"{currentRole} at {current.Company}";
var anyDesc = current?.Roles?.FirstOrDefault()?.Description;
if (!string.IsNullOrWhiteSpace(anyDesc))
return TrimToPhrase(FirstSentence(anyDesc), 120);
return "recent leadership and impact";
}
private static string ExtractPrimaryFromHeadline(string headline)
{
var separators = new[] { " | ", "|", " • ", " •", "·", " – ", "-", "," };
var chunk = headline.Split(separators, StringSplitOptions.RemoveEmptyEntries)
.FirstOrDefault();
return chunk?.Trim() ?? headline;
}
private static string FirstSentence(string? text)
{
if (string.IsNullOrWhiteSpace(text)) return string.Empty;
var match = Regex.Match(text.Trim(), @"^(.+?[\.!\?])\s");
if (match.Success) return match.Groups[1].Value.Trim();
return TrimToPhrase(text.Trim(), 120);
}
private static string TrimToPhrase(string? value, int max)
{
if (string.IsNullOrWhiteSpace(value)) return string.Empty;
value = Regex.Replace(value.Trim(), @"\s+", " ");
return value.Length <= max ? value : value[..max].TrimEnd() + "…";
}
private static string Safe(string? value, string fallback = "")
=> string.IsNullOrWhiteSpace(value) ? fallback : value.Trim();
private static bool StringEquals(string? a, string? b)
=> string.Equals(a?.Trim(), b?.Trim(), StringComparison.OrdinalIgnoreCase);
private class ProfileData
{
public string Name { get; set; } = string.Empty;
public string IndustryArea { get; set; } = string.Empty;
public string NotableAchievement { get; set; } = string.Empty;
public string Headline { get; set; } = string.Empty;
public string Location { get; set; } = string.Empty;
public string CurrentCompany { get; set; } = string.Empty;
public string RecentContent { get; set; } = string.Empty;
public string SharedChallenge { get; set; } = string.Empty;
public Uri? ProfileUrl { get; set; }
public string BuildContextString()
{
var sb = new StringBuilder();
sb.AppendLine("You have the following profile details of the person:");
sb.AppendLine($"Name: {Name}");
sb.AppendLine($"Industry/Area: {IndustryArea}");
sb.AppendLine($"Notable achievement or experience: {NotableAchievement}");
sb.AppendLine($"Headline: {Headline}");
sb.AppendLine($"Location: {Location}");
sb.AppendLine($"Current company: {CurrentCompany}");
sb.AppendLine($"Profile URL: {ProfileUrl}");
if (!string.IsNullOrWhiteSpace(RecentContent))
{
sb.AppendLine();
sb.AppendLine("Recent content to reference:");
sb.AppendLine(RecentContent);
}
sb.AppendLine();
sb.AppendLine("Shared professional challenge to mention:");
sb.AppendLine(SharedChallenge);
return sb.ToString();
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\LinkedInChat.cs ===

﻿using System.Diagnostics;
using Configuration;
using LiveNetwork.Application.Services;
using LiveNetwork.Application.UseCases.CRUD.IMessageInteraction;
using LiveNetwork.Application.UseCases.CRUD.Profile;
using LiveNetwork.Application.UseCases.CRUD.Profile.Query;
using LiveNetwork.Domain;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;
namespace LiveNetwork.Infrastructure.Services
{
public class LinkedInChat : ILinkedInChat
{
private readonly AppConfig _config;
private readonly IWebDriver _driver;
private readonly ILogger<LinkedInChat> _logger;
private readonly ICaptureSnapshot _capture;
private readonly ExecutionTracker _executionOptions;
private readonly ITrackingService _trackingService;
private readonly ILoginService _loginService;
private readonly IUtil _util;
private readonly IProfileRead _profileRead;
private readonly IProfileUpdate _profileUpdate;
private readonly IMessageInteractionCreate _messageInteractionCreate;
public LinkedInChat(
AppConfig config,
IWebDriverFactory driverFactory,
ILogger<LinkedInChat> logger,
ICaptureSnapshot capture,
ExecutionTracker executionOptions,
ITrackingService trackingService,
ILoginService loginService,
IUtil util,
IProfileRead profileRead,
IProfileUpdate profileUpdate,
IMessageInteractionCreate messageInteractionCreate)
{
_config = config ?? throw new ArgumentNullException(nameof(config));
_driver = driverFactory?.Create() ?? throw new ArgumentNullException(nameof(driverFactory));
_logger = logger ?? throw new ArgumentNullException(nameof(logger));
_capture = capture ?? throw new ArgumentNullException(nameof(capture));
_executionOptions = executionOptions ?? throw new ArgumentNullException(nameof(executionOptions));
_trackingService = trackingService ?? throw new ArgumentNullException(nameof(trackingService));
_loginService = loginService ?? throw new ArgumentNullException(nameof(loginService));
_util = util ?? throw new ArgumentNullException(nameof(util));
_profileRead = profileRead ?? throw new ArgumentNullException(nameof(profileRead));
_profileUpdate = profileUpdate ?? throw new ArgumentNullException(nameof(profileUpdate));
_messageInteractionCreate = messageInteractionCreate ?? throw new ArgumentNullException(nameof(messageInteractionCreate));
}
public async Task SendMessageAsync(List<ConnectionInfo>? connections = null)
{
int processed = 0, skipped = 0, errors = 0;
connections = connections ?? await _trackingService.LoadCollectorConnectionsAsync("Connections_Collected.json") ?? [];
var remainingConnections  = connections.ToList();
var sw = Stopwatch.StartNew();
try
{
_logger.LogInformation("Starting LinkedInChat.SendMessageAsync at {UtcNow} UTC", DateTimeOffset.UtcNow);
var lastProcessedUtc = await _trackingService.LoadLastProcessedDateUtcAsync("Connections_LastProcessedUtc.txt");
var newestProcessedUtc = lastProcessedUtc;
if (connections.Count == 0)
{
_logger.LogWarning("No connections found to process.");
return;
}
_logger.LogInformation("Loaded {Count} connections. LastProcessedUtc={LastProcessedUtc:o}", connections.Count, lastProcessedUtc);
_logger.LogInformation("Starting LinkedIn login…");
_logger.LogInformation("LinkedIn login completed successfully.");
foreach (var connection in connections)
{
if (connection.ConnectedOn < lastProcessedUtc)
{
_logger.LogDebug("Skipping connection (older than last processed): {ConnectedOn:o}", connection.ConnectedOn);
skipped++;
continue;
}
if (connection?.ProfileUrl == null)
{
_logger.LogWarning("Connection missing ProfileUrl. Title/Position={Title}", connection?.TitleOrPosition);
skipped++;
continue;
}
var url = connection.ProfileUrl.IsAbsoluteUri
? connection.ProfileUrl.AbsoluteUri
: new Uri(new Uri("https://www.linkedin.com"), connection.ProfileUrl).AbsoluteUri;
var path = connection.ProfileUrl.OriginalString;
if (string.IsNullOrWhiteSpace(path))
{
_logger.LogWarning("ProfileUrl path is empty for URL: {Url}", url);
skipped++;
continue;
}
_logger.LogInformation("Resolving profile for URL: {Url} | ConnectedOn: {ConnectedOn:o}", url, connection.ConnectedOn);
var content = BuildWelcomeMessage();
var profileOp = await _profileRead.GetProfilesByUrlAsync(path, null, 10);
if (!profileOp.IsSuccessful)
{
_logger.LogWarning("Profile lookup failed for {Url}. Reason: {Message}", url, profileOp.Message);
skipped++;
continue;
}
var items = profileOp.Data?.Items;
if (items == null || !items.Any())
{
_logger.LogWarning("No profile found in repository for {Url}", url);
await Set(path, content);
remainingConnections.Remove(connection);
await _trackingService.SaveCollectorConnectionsAsync(remainingConnections, "Connections_Collected.json");
skipped++;
continue;
}
var firstProfile = items.FirstOrDefault();
if (firstProfile is null || string.IsNullOrWhiteSpace(firstProfile.Url.AbsolutePath))
{
_logger.LogWarning("Resolved profile is null or missing URL for {Url}", url);
skipped++;
continue;
}
var message = new MessageInteraction
(
Guid.NewGuid().ToString("N"),
content,
"WelcomeMessage",
InteractionStatus.Sent
)
{
ProfileId = firstProfile.Id
};
_logger.LogInformation("Navigating to profile page: {ProfileUrl}", firstProfile.Url);
Set(firstProfile.Url.OriginalString, content);
await _messageInteractionCreate.CreateMessageInteractionAsync(message);
if (connection.ConnectedOn == null)
{
_logger.LogWarning("Connection missing ConnectedOn date for profile {ProfileId}", firstProfile.Id);
skipped++;
continue;
}
if (connection.ConnectedOn > newestProcessedUtc)
{
newestProcessedUtc = connection.ConnectedOn.Value;
}
processed++;
remainingConnections.Remove(connection);
await _trackingService.SaveCollectorConnectionsAsync(remainingConnections, "Connections_Collected.json");
}
await _trackingService.SaveLastProcessedDateUtcAsync("Connections_LastProcessedUtc.txt", newestProcessedUtc);
}
catch (Exception ex)
{
_logger.LogError(ex, "LinkedIn login failed. Aborting message sending.");
errors++;
await _capture.CaptureArtifactsAsync(_executionOptions.ExecutionFolder, "login_failed");
}
sw.Stop();
_logger.LogInformation("LinkedInChat finished in {Ms} ms. Processed={Processed}, Skipped={Skipped}, Errors={Errors}, Total={Total}.",
sw.ElapsedMilliseconds, processed, skipped, errors, connections.Count);
_logger.LogInformation("LinkedInChat finished. Processed={Processed} of {Total}.", processed, connections.Count);
}
private async Task Set(string url, string content)
{
_driver.Navigate().GoToUrl(url);
var button = FindMessageButton();
button.Click();
var textArea = FindMessageTextArea();
await EnterTextInContentEditable(textArea, content);
}
public void DebugChatOverlay()
{
try
{
Console.WriteLine("=== DEBUG: Checking for chat elements ===");
var chatWrappers = _driver.FindElements(By.CssSelector(".msg-convo-wrapper, .msg-overlay-conversation-bubble"));
Console.WriteLine($"Found {chatWrappers.Count} chat wrappers");
foreach (var wrapper in chatWrappers)
{
Console.WriteLine($"Wrapper displayed: {wrapper.Displayed}, enabled: {wrapper.Enabled}");
}
var closeButtonsByIcon = _driver.FindElements(By.XPath("
Console.WriteLine($"Found {closeButtonsByIcon.Count} buttons with close-small icon");
var closeButtonsByText = _driver.FindElements(By.XPath("
Console.WriteLine($"Found {closeButtonsByText.Count} buttons with close text");
var allButtons = _driver.FindElements(By.TagName("button"));
Console.WriteLine($"Total buttons found: {allButtons.Count}");
foreach (var button in allButtons.Take(10))
{
try
{
Console.WriteLine($"Button: {button.Text} | Displayed: {button.Displayed} | ID: {button.GetAttribute("id")}");
}
catch (StaleElementReferenceException)
{
Console.WriteLine("Button became stale while inspecting");
}
}
}
catch (Exception ex)
{
Console.WriteLine($"Debug error: {ex.Message}");
}
}
public async Task CloseChatOverlay()
{
try
{
Thread.Sleep(500);
var wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(15));
IWebElement closeButton = null;
try
{
closeButton = wait.Until(drv =>
{
var buttons = drv.FindElements(By.XPath("
return buttons.FirstOrDefault(btn => btn.Displayed && btn.Enabled);
});
Console.WriteLine("✅ Found button by data-test-icon");
}
catch
{
Console.WriteLine("❌ Button not found by data-test-icon");
}
if (closeButton == null)
{
try
{
closeButton = wait.Until(drv =>
{
var button = drv.FindElement(By.Id("ember500"));
return button.Displayed && button.Enabled ? button : null;
});
Console.WriteLine("✅ Found button by ID");
}
catch
{
Console.WriteLine("❌ Button not found by ID");
}
}
if (closeButton == null)
{
try
{
closeButton = wait.Until(drv =>
{
var buttons = drv.FindElements(By.CssSelector("button[aria-label*='Close your conversation']"));
return buttons.FirstOrDefault(btn => btn.Displayed && btn.Enabled);
});
Console.WriteLine("✅ Found button by aria-label");
}
catch
{
Console.WriteLine("❌ Button not found by aria-label");
}
}
if (closeButton != null)
{
((IJavaScriptExecutor)_driver).ExecuteScript("arguments[0].scrollIntoView(true);", closeButton);
Thread.Sleep(500);
closeButton.Click();
Console.WriteLine("✅ Chat overlay closed successfully.");
Thread.Sleep(1000);
}
else
{
Console.WriteLine("❌ No close button found using any strategy");
TryEmergencyClose();
}
}
catch (WebDriverTimeoutException)
{
Console.WriteLine("❌ Close button not found within timeout. Chat overlay might not be open.");
}
catch (Exception ex)
{
Console.WriteLine($"❌ Error closing chat overlay: {ex.Message}");
}
}
private void TryEmergencyClose()
{
try
{
Console.WriteLine("⚠️ Trying emergency close strategies...");
new Actions(_driver).SendKeys(Keys.Escape).Perform();
Console.WriteLine("Sent ESC key");
Thread.Sleep(1000);
var body = _driver.FindElement(By.TagName("body"));
new Actions(_driver).MoveToElement(body, 10, 10).Click().Perform();
Console.WriteLine("Clicked outside chat area");
}
catch (Exception ex)
{
Console.WriteLine($"Emergency close failed: {ex.Message}");
}
}
public IWebElement? FindMessageButton()
{
try
{
var wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(10));
var button = wait.Until(drv =>
{
var buttons = drv.FindElements(By.CssSelector("button[aria-label^='Message'][class*='artdeco-button']"));
return buttons.FirstOrDefault(btn => btn.Text.Contains("Message"));
});
return button;
}
catch (WebDriverTimeoutException)
{
throw new NoSuchElementException("Message button not found within the timeout period");
}
}
public IWebElement FindMessageTextArea()
{
var wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(10));
return wait.Until(drv =>
{
return drv.FindElement(By.CssSelector("div[role='textbox'][aria-label='Write a message…']"));
});
}
private async Task EnterTextInContentEditable(IWebElement textArea, string message)
{
try
{
textArea.Click();
textArea.Clear();
textArea.SendKeys(message);
textArea.SendKeys(Keys.Enter);
await CloseChatOverlay();
}
catch
{
}
}
static string BuildWelcomeMessage()
{
return "Great to join your network! If you’re facing hiring or project challenges around C# or AI, I’d be glad to share ideas that could help.";
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\LoginService.cs ===

﻿using Configuration;
using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
using Services.Interfaces;
namespace LiveNetwork.Infrastructure.Services
{
public class LoginService : ILoginService
{
private readonly AppConfig _config;
private readonly IWebDriver _driver;
private readonly ILogger<LoginService> _logger;
private readonly ICaptureSnapshot _capture;
private readonly ExecutionTracker _executionOptions;
private const string FolderName = "Login";
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
private readonly ISecurityCheck _securityCheck;
private readonly IDirectoryCheck _directoryCheck;
public LoginService(
AppConfig config,
IWebDriverFactory driverFactory,
ILogger<LoginService> logger,
ICaptureSnapshot capture,
ExecutionTracker executionOptions,
ISecurityCheck securityCheck,
IDirectoryCheck directoryCheck)
{
_config = config;
_driver = driverFactory.Create(true);
_logger = logger;
_capture = capture;
_executionOptions = executionOptions;
_securityCheck = securityCheck;
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(FolderPath);
}
public async Task LoginAsync()
{
_logger.LogInformation($"🔐 ID:{_executionOptions.TimeStamp} Attempting to login to LinkedIn...");
var url = "https://www.linkedin.com/login";
_driver.Navigate().GoToUrl(url);
await _capture.CaptureArtifactsAsync(FolderPath, $"Go to url{url}");
await Task.Delay(3000);
if (!IsOnLoginPage())
{
if (_securityCheck.IsSecurityCheck())
{
await _securityCheck.TryStartPuzzle();
}
}
var emailInput = _driver.FindElement(By.Id("username"));
emailInput.SendKeys(_config.LinkedInCredentials.Email);
await Task.Delay(3000);
await _capture.CaptureArtifactsAsync(FolderPath, "Entered email");
var passwordInput = _driver.FindElement(By.Id("password"));
passwordInput.SendKeys(_config.LinkedInCredentials.Password + Keys.Enter);
await _capture.CaptureArtifactsAsync(FolderPath, "Entered password");
_logger.LogInformation($"✅ ID:{_executionOptions.TimeStamp} Successfully authenticated with LinkedIn");
}
private bool IsOnLoginPage()
{
var usernameElements = _driver.FindElements(By.Id("username"));
var passwordElements = _driver.FindElements(By.Id("password"));
var urlContainsLogin = _driver.Url.Contains("/login");
return usernameElements.Any() && passwordElements.Any() && urlContainsLogin;
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\OpenAIClient.cs ===

﻿using System.Net.Http.Json;
using Configuration;
using LiveNetwork.Domain;
using Services.Interfaces;
namespace LiveNetwork.Infrastructure.Services
{
public class OpenAIClient : IOpenAIClient
{
private readonly string _apiKey;
private static readonly HttpClient _httpClient = new();
public OpenAIClient(AppConfig appConfig)
{
_apiKey = Environment.GetEnvironmentVariable(appConfig.Llm.ApiKey, EnvironmentVariableTarget.Machine)
?? throw new ArgumentException("API key cannot be null or whitespace.", nameof(appConfig.Llm.ApiKey));
_httpClient.BaseAddress ??= new Uri(appConfig.Llm.Url);
if (!_httpClient.DefaultRequestHeaders.Contains("Authorization"))
{
_httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_apiKey}");
}
}
public async Task<string> GetChatCompletionAsync(Prompt prompt)
{
if (string.IsNullOrWhiteSpace(prompt.SystemContent) || string.IsNullOrWhiteSpace(prompt.UserContent))
throw new ArgumentException("Prompt content cannot be null or whitespace.");
var request = new OpenAIChatRequest
{
Model = "deepseek-chat",
Messages = [
new() { Role = "system", Content = prompt.SystemContent },
new() { Role = "user", Content = prompt.UserContent }
]
};
var response = await _httpClient.PostAsJsonAsync("v1/chat/completions", request);
if (!response.IsSuccessStatusCode)
{
var errorContent = await response.Content.ReadAsStringAsync();
throw new Exception($"OpenAI API request failed with status code {response.StatusCode}: {errorContent}");
}
var responseData = await response.Content.ReadFromJsonAsync<OpenAIChatResponse>();
if (responseData?.Choices == null || responseData.Choices.Count == 0)
{
throw new Exception("No response received from OpenAI API.");
}
return responseData.Choices[0].Message.Content.Trim();
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\Processor.cs ===

﻿using Configuration;
using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
using Services.Interfaces;
namespace LiveNetwork.Infrastructure.Services
{
public class Processor : IProcessor
{
private readonly IWebDriver _driver;
private readonly AppConfig _config;
private readonly ILogger<Processor> _logger;
private readonly ExecutionTracker _executionOptions;
private const string FolderName = "Page";
private readonly ISecurityCheck _securityCheck;
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
private readonly ICaptureSnapshot _capture;
private readonly IDirectoryCheck _directoryCheck;
private readonly ITrackingService _trackingService;
private readonly WebDriverWait _wait;
private readonly IUtil _util;
public Processor(IWebDriverFactory driverFactory,
AppConfig config,
ILogger<Processor> logger,
ExecutionTracker executionOptions,
ICaptureSnapshot capture,
ISecurityCheck securityCheck,
IDirectoryCheck directoryCheck,
ITrackingService trackingService,
IUtil util)
{
_driver = driverFactory.Create();
_config = config;
_logger = logger;
_executionOptions = executionOptions;
_capture = capture;
_securityCheck = securityCheck;
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(FolderPath);
_trackingService = trackingService;
_util = util;
}
public async Task ProcessAllPagesAsync()
{
var searchId = _executionOptions.TimeStamp;
var searchText = _config.Search.SearchText;
var maxPages = _config.Search.MaxPages;
_logger.LogInformation($"🔎 ID:{searchId} Starting search processing for '{searchText}'");
var trackingState = await _trackingService.LoadStateAsync();
_logger.LogInformation($"📂 ID:{searchId} Loaded tracking state: Page {trackingState.LastProcessedPage}, Offers: {trackingState.Connections?.Count ?? 0}");
if (trackingState.IsComplete && trackingState.Connections?.Any() == true)
{
_logger.LogInformation($"✅ ID:{searchId} Cached complete result found. Skipping processing.");
return;
}
var connections = trackingState.Connections?.ToList() ?? [];
int startPage = trackingState.LastProcessedPage + 1;
var initialPage = true;
for (int currentPage = startPage; currentPage <= maxPages; currentPage++)
{
if (startPage != 1 && initialPage)
{
for (int i = 0; i < startPage; i++)
{
_util.ScrollMove();
await _util.NavigateToNextPageAsync();
}
initialPage = false;
}
_logger.LogInformation($"📄 ID:{searchId} Processing page {currentPage}...");
try
{
await _capture.CaptureArtifactsAsync(FolderPath, $"Page_{currentPage}");
_util.ScrollMove();
await Task.Delay(3000);
var pageOffers = GetCurrentPage();
if (pageOffers == null || !pageOffers.Any())
{
_logger.LogWarning($"⚠️ ID:{searchId} No offers found on page {currentPage}. Aborting pagination.");
break;
}
connections.AddRange(pageOffers);
trackingState.LastProcessedPage = currentPage;
trackingState.Connections = connections;
await _trackingService.SavePageStateAsync(trackingState);
_logger.LogInformation($"✔️ ID:{searchId} Page {currentPage} done. Offers found: {pageOffers.Count()}");
if (currentPage >= maxPages || !await _util.NavigateToNextPageAsync())
{
_logger.LogInformation($"⏹️ ID:{searchId} No more pages to process or max page limit reached.");
break;
}
}
catch (Exception ex)
{
_logger.LogError(ex, $"❌ ID:{searchId} Error on page {currentPage}. Aborting run.");
break;
}
}
trackingState.IsComplete = true;
trackingState.Connections = connections;
await _trackingService.SavePageStateAsync(trackingState);
var outputFile = Path.Combine(_executionOptions.ExecutionFolder, _config.Paths.SearchUrlOutputFilePath);
await _trackingService.SaveConnectionsAsync(connections, Path.Combine(_executionOptions.ExecutionFolder, _config.Paths.SearchUrlOutputFilePath));
_logger.LogInformation($"🏁 ID:{searchId} Finished search. Total offers: {connections.Count}");
}
private IEnumerable<Uri> GetCurrentPage()
{
_logger.LogInformation("🔍 Extracting unique profile links from current LinkedIn page...");
try
{
var profileElements = _driver.FindElements(By.XPath("
if (profileElements == null || profileElements.Count == 0)
{
_logger.LogWarning("⚠️ No profile links found using XPath.");
return [];
}
var uniqueUrls = new HashSet<Uri>();
int invalidUrls = 0, duplicates = 0;
foreach (var element in profileElements)
{
var rawHref = element.GetAttribute("href");
if (string.IsNullOrWhiteSpace(rawHref))
{
_logger.LogDebug("⛔ Skipped empty or null href.");
continue;
}
try
{
var cleanUrl = rawHref.Split('?')[0].Trim();
if (!cleanUrl.StartsWith("https://www.linkedin.com/in/"))
{
_logger.LogDebug("❌ Skipped non-profile URL: {Url}", cleanUrl);
continue;
}
if (Uri.TryCreate(cleanUrl, UriKind.Absolute, out var uri))
{
if (uniqueUrls.Add(uri))
{
_logger.LogDebug("✅ Added clean URL: {Url}", cleanUrl);
}
else
{
duplicates++;
_logger.LogTrace("🔁 Duplicate skipped: {Url}", cleanUrl);
}
}
else
{
invalidUrls++;
_logger.LogWarning("⚠️ Invalid URI skipped: {Url}", rawHref);
}
}
catch (Exception ex)
{
_logger.LogWarning(ex, "⚠️ Exception while processing URL: {Url}", rawHref);
}
}
_logger.LogInformation("📦 Extraction complete. Total unique profiles: {Count}, Invalid: {Invalid}, Duplicates: {Duplicates}",
uniqueUrls.Count, invalidUrls, duplicates);
return uniqueUrls;
}
catch (Exception ex)
{
_logger.LogError(ex, "❌ Unexpected error during profile link extraction.");
return [];
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\PrompHelpers.cs ===

﻿using System.Text.Json;
using LiveNetwork.Domain;
namespace LiveNetwork.Infrastructure.Services
{
internal static class PrompHelpers
{
public static Prompt GetParseJobOfferPrompt(string jobPostingText)
{
const string JsonSchemaJobOffer = @"{
'CompanyName': 'Corpay',
'JobOfferTitle': 'Senior Full .NET Stack Developer',
'JobOfferSummarize': 'Corpay is seeking a Senior Full .NET Stack Developer...',
'EmailContact': 'Not provided',
'ContactHiringSection': 'Not provided',
'KeySkillsRequired': [
{
'Name': 'C#',
'RelevancePercentage': 30 | Description: Weight of this skill in the job offer. Example: 30 for C# (core skill), 10 for SQL Server (supporting skill). Sum must equal 100 across all entries in this array.
},
{
'Name': '.NET',
'RelevancePercentage': 25 | Description: Criticality of .NET framework expertise. Higher values indicate mandatory requirements.
},
{
'Name': 'JavaScript',
'RelevancePercentage': 15 | Description: Importance of JavaScript proficiency for full-stack development.
},
{
'Name': 'ASP.NET',
'RelevancePercentage': 10 | Description: Weight for ASP.NET-specific experience.
},
{
'Name': 'React',
'RelevancePercentage': 10 | Description: Frontend framework priority level.
},
{
'Name': 'SQL Server',
'RelevancePercentage': 10 | Description: Database skill relevance.
}
],
'EssentialQualifications': [
{
'Name': '8+ years of experience using C#, Javascript and debugging techniques',
'RelevancePercentage': 50 | Description: Highest weight for hands-on experience. Sum must equal 100 within this category.
},
{
'Name': 'B.S./M.S. in Computer Science or equivalent experience',
'RelevancePercentage': 30 | Description: Education/formal credential importance.
},
{
'Name': 'Experience with .NET Full Framework (4.0–4.8) and .NET (2.2–7.0)',
'RelevancePercentage': 20 | Description: Specific version knowledge priority.
}
],
'EssentialTechnicalSkillQualifications': [
{
'Name': 'Expert in HTML/CSS/JavaScript and web protocols',
'RelevancePercentage': 30 | Description: Core web tech weight. Example: 30 for must-have, 10 for nice-to-have.
},
{
'Name': 'Experience with React/Redux/KnockoutJS',
'RelevancePercentage': 25 | Description: Frontend framework criticality.
},
{
'Name': 'SQL Server/MongoDB proficiency',
'RelevancePercentage': 20 | Description: Database skill priority.
},
{
'Name': 'Knowledge of OOP, modular design, and CI/CD',
'RelevancePercentage': 15 | Description: Design/process methodology importance.
},
{
'Name': 'Scrum/Agile experience',
'RelevancePercentage': 10 | Description: Methodology familiarity weight.
}
],
'OtherTechnicalSkillQualifications': [
{
'Name': 'Strong communication skills',
'RelevancePercentage': 70 | Description: Soft skill dominance (higher = more critical).
},
{
'Name': 'Self-motivated and independent',
'RelevancePercentage': 30 | Description: Secondary soft skill weight.
}
],
'SalaryOrBudgetOffered': '$110,000 -$125,000 CAD annually',
'Description': 'The Senior Full .NET Stack Developer will provide technical direction...'
}";
var promptBuilder = new AIPromptBuilder
{
Role = "Information Extraction Specialist",
Task = $"Extract specific information from this job posting and format it as JSON with the following structure:\n{JsonSchemaJobOffer}",
Context = "The text is a job posting that needs to be parsed into structured data",
Format = "JSON format only, no additional commentary",
Tone = "professional",
Style = "concise"
};
promptBuilder.AddConstraint("Company Name should be extracted from the first mention of the company (use names of companies common)");
promptBuilder.AddConstraint("Job Offer Title should be extracted from the 'Job Description' section");
promptBuilder.AddConstraint("For skills, focus on the technical skills mentioned in the Qualifications section");
promptBuilder.AddConstraint("Categorize skills into 'Key Skills Required' (required) and 'Other Technical Skill Qualifications' (nice-to-have)");
promptBuilder.AddConstraint("Description should be 3-5 sentences summarizing the role, responsibilities, and requirements");
promptBuilder.AddConstraint("If salary information exists, include it exactly as written");
promptBuilder.AddConstraint("For missing fields, use 'Not data' as the value");
return new Prompt
{
SystemContent = promptBuilder.BuildPrompt(),
UserContent = jobPostingText
};
}
public static Prompt GetParseResumePrompt(string resumeText)
{
const string JsonSchemaResume = @"
{
""Name"": ""string"",
""Title"": ""string"",
""Location"": ""string"",
""Contact Information"": {
""Phone"": ""string"",
""Email"": ""string"",
""LinkedIn"": ""string""
},
""Professional Summary"": ""string"",
""Bullet Points"": [""string""],
""Technical Skills"": [""string""],
""Soft Skills"": [""string""],
""Languages"": [""string""],
""Professional Experience"": [
{
""Role"": ""string"",
""Company"": ""string"",
""Location"": ""string"",
""Duration"": ""string"",
""Responsibilities"": [""string""],
""Tech Stack"": [""string""]
}
],
""Additional Qualifications"": [""string""],
""Education"": {
""Institution"": ""string"",
""Location"": ""string"",
""Degree"": ""string"",
""Graduation Date"": ""string""
}
}
";
var promptBuilder = new AIPromptBuilder
{
Role = "Resume Information Extraction Specialist",
Task = $"Extract all information from this resume and format it as JSON with the following structure:\n{JsonSchemaResume}",
Context = "The text is a professional resume that needs to be parsed into structured data",
Format = "JSON format only, no additional commentary",
Tone = "professional",
Style = "concise"
};
promptBuilder.AddConstraint("Extract the name from the first line of the resume");
promptBuilder.AddConstraint("Title should be extracted from the professional title near the name");
promptBuilder.AddConstraint("Location should be extracted from the contact information section");
promptBuilder.AddConstraint("Contact Information should include phone, email, and LinkedIn URL");
promptBuilder.AddConstraint("Professional Summary should be the full summary paragraph");
promptBuilder.AddConstraint("For Professional Experience, extract all positions with their details");
promptBuilder.AddConstraint("For each position, include company, role, duration, and responsibilities");
promptBuilder.AddConstraint("Technical Skills should include all listed skills, grouped by category");
promptBuilder.AddConstraint("Languages should include all mentioned languages with proficiency levels");
promptBuilder.AddConstraint("Education should include institution, degree, location, and graduation date");
promptBuilder.AddConstraint("For missing fields, use null as the value");
return new Prompt
{
SystemContent = promptBuilder.BuildPrompt(),
UserContent = resumeText
};
}
public static Prompt GetQualifiedPrompt(string resume, IEnumerable<string> RawJobDescription)
{
var promptBuilder = new AIPromptBuilder
{
Role = "Human Resorces Specialist",
Task = $"Return a single number (0-100) representing the percentage fit between the provided resume and job description",
Context = "Evaluate how well the provided resume matches the requirements of the specified job offer",
Format = "{  \r\n  \"score\": [0-100] \r\n}",
Tone = "professional",
Style = "concise"
};
promptBuilder.AddConstraint("The score must be an integer between 0 and 100.");
promptBuilder.AddConstraint("Round to the nearest whole number for precision.");
promptBuilder.AddConstraint("For skills, focus on the technical skills mentioned in the Qualifications section");
promptBuilder.AddConstraint("Calculate based on keyword matching between resume and job description.");
promptBuilder.AddConstraint("Weight experience duration heavily in the scoring.");
promptBuilder.AddConstraint("If salary information exists, include it exactly as written");
promptBuilder.AddConstraint("Factor in fulfillment of required qualifications");
promptBuilder.AddConstraint("Adjust for relevance of certifications/licenses.");
var jobOffer = string.Join(Environment.NewLine, RawJobDescription);
return new Prompt
{
SystemContent = promptBuilder.BuildPrompt(),
UserContent = $"offer description: {jobOffer} resume:{resume}"
};
}
public static Prompt GetPrompt(Dictionary<string, List<string>> skillCategoryHierarchy, string skill)
{
var options = new JsonSerializerOptions()
{
WriteIndented = true,
PropertyNamingPolicy = JsonNamingPolicy.CamelCase
};
var JsonCategoryHierarchy = JsonSerializer.Serialize(skillCategoryHierarchy, options);
var skillCategorySchema = @"
{
""$schema"": ""http://json-schema.org/draft-07/schema#"",
""type"": ""object"",
""patternProperties"": {
""^.*$"": {
""type"": ""array"",
""items"": {
""type"": ""string""
},
""description"": ""List of skill keyword variations belonging to the category""
}
}
""description"": ""A mapping of skill category names to arrays of related skill expressions.""
}";
var promptBuilder = new AIPromptBuilder
{
Role = "Tech Skill Classifier Specialist",
Task = $"Classify the submitted skill into the provided skill category hierarchy, if you dont find a match category create a new one",
Context = "You are classifying technical and non-technical skills into a comprehensive skill category hierarchy",
Format = $"JSON format skill category hierarchy: {Environment.NewLine}{JsonCategoryHierarchy}",
Tone = "professional",
Style = "concise"
};
var prompt = new Prompt
{
SystemContent = promptBuilder.BuildPrompt(),
UserContent = skill
};
return prompt;
}
public static Prompt GenerateResumeJsonPrompt(string jobOfferString, string resumeString)
{
if (string.IsNullOrWhiteSpace(jobOfferString))
{
throw new ArgumentNullException(nameof(jobOfferString), "Job description cannot be null or empty.");
}
const string JsonSchema = @"
{
""Name"": ""string"",
""Title"": ""string"",
""Location"": ""string"",
""Contact Information"": {
""Phone"": ""string"",
""Email"": ""string"",
""LinkedIn"": ""string""
},
""Professional Summary"": ""string"",
""Technical Skills"": [""string""],
""Soft Skills"": [""string""],
""Languages"": [""string""],
""Professional Experience"": [
{
""Role"": ""string"",
""Company"": ""string"",
""Location"": ""string"",
""Duration"": ""string"",
""Responsibilities"": [""string""],
""Tech Stack"": [""string""]
}
],
""Additional Qualifications"": [""string""],
""Education"": {
""Institution"": ""string"",
""Location"": ""string"",
""Degree"": ""string"",
""Graduation Date"": ""string""
}
}";
const string SystemContent = @"
You are a professional resume assistant specializing in tailoring resumes to highlight relevant technical qualifications.";
const string TaskDescription = @"
Your task is to align a given resume with the provided job offer. The input will consist of a JSON-formatted job offer and resume. You must:
1. Update the Professional Summary to align with the job description and highlight relevant skills, achievements, and experiences. Incorporate key skills and keywords from the job offer into the summary.
2. Update the Tech Stack in each professional experience to reflect the technologies listed under ""Essential Technical Skill Qualifications"" and ""Other Technical Skill Qualifications.""
3. Tailor the Responsibilities in each professional experience to align with the job description while retaining the candidate's original achievements and quantifiable impacts.
4. Update the Role Titles in each professional experience to reflect and align with the job offer’s language, ensuring consistency with the target position (e.g., ""Software Developer – AI Trainer""). Titles should remain truthful to the experience level and responsibilities but should use language and phrasing from the job offer when applicable.
### Guidelines:
- **Professional Summary**:
- Extract key themes, skills, and qualifications from the job offer and integrate them into the summary.
- Highlight years of experience, key technical skills (e.g., Oracle, SQL, ETL, Agile), and significant achievements.
- Emphasize alignment with the role's requirements, such as database development, Agile SDLC, and leadership experience.
- Ensure the summary reflects the candidate's ability to meet the job offer's expectations and contribute value to the company.
#### Example:
**Job Offer Keywords**: ""10+ years of database development, Agile SDLC, Oracle, SQL, leadership.""
#### Before:
""Innovative Full Stack Developer with over 17 years of experience designing and implementing enterprise-level solutions in .NET Framework, Angular, and Azure.""
#### After:
""Experienced Senior Database Developer with over 17 years of expertise in designing and managing enterprise-level databases, specializing in Oracle, SQL, and ETL processes. Proven track record of leading Agile teams to deliver high-impact solutions while optimizing database performance and scalability. Adept at aligning database architecture with modern SDLC methodologies to support critical business operations.""
- **Tech Stack Updates**:
- Replace outdated technologies with modern equivalents, ensuring consistency with the timeframe of each role.
- Example: Replace "".NET Framework"" with "".NET Core"" for roles after 2016, where applicable.
- Retain or add only technologies mentioned in the job offer (Essential/Other Technical Skills) unless the resume indicates otherwise.
- Ensure older technologies, such as ""Web Forms,"" are updated to modern equivalents for recent experiences.
- **Responsibilities Tailoring**:
- Align the descriptions of responsibilities to reflect keywords and themes in the job offer.
- Include measurable outcomes (e.g., ""Improved database performance by 30%"" or ""Reduced deployment time by 35%"").
- Reflect domain-specific skills from the job offer where relevant (e.g., ""ETL development,"" ""Agile,"" or ""Stored procedures"").
- **Preserve Resume Integrity**:
- Do not invent achievements; base changes on provided data and job offer context.
- Ensure descriptions remain true to the candidate's experience while highlighting relevant skills.
- **Example of Alignment**:
#### Before:
**Responsibilities**: ""Developed APIs and optimized queries for better performance.""
**Tech Stack**: "".NET Framework, SQL Server.""
#### After:
**Responsibilities**: ""Developed RESTful APIs for CRM-EMR integration, reducing data inconsistencies by 20%. Optimized SQL Server queries, enhancing database performance by 25%. Aligned database design with Agile development practices.""
**Tech Stack**: "".NET Core, SQL Server, RESTful APIs, Agile.""
### Input:
Provide the job offer and resume in JSON format. Ensure the output is presented as a JSON object matching this schema:
";
string userContent = $@"
{TaskDescription}
Job Description:
{jobOfferString}
Resume:
{resumeString}
Output Requirements:
Present the extracted information in the following JSON schema:
JSON Schema:
{JsonSchema}";
return new Prompt
{
SystemContent = SystemContent,
UserContent = userContent
};
}
public static Prompt GenerateCoverLetterPrompt(string jobOfferString, string resumeString)
{
if (string.IsNullOrWhiteSpace(jobOfferString))
{
throw new ArgumentNullException(nameof(jobOfferString), "Job description cannot be null or empty.");
}
if (string.IsNullOrWhiteSpace(resumeString))
{
throw new ArgumentNullException(nameof(resumeString), "Resume cannot be null or empty.");
}
const string JsonSchema = @"
{
""Name"": ""string"",
""Title"": ""string"",
""Location"": ""string"",
""Contact Information"": {
""Phone"": ""string"",
""Email"": ""string"",
""LinkedIn"": ""string""
},
""Professional Summary"": ""string"",
""Bullet Points"": [""string""],
""Closing Paragraph"": ""string"",
""Technical Skills"": [""string""],
""Soft Skills"": [""string""],
""Languages"": [""string""],
""Professional Experience"": [
{
""Role"": ""string"",
""Company"": ""string"",
""Location"": ""string"",
""Duration"": ""string"",
""Responsibilities"": [""string""],
""Tech Stack"": [""string""]
}
],
""Additional Qualifications"": [""string""],
""Education"": {
""Institution"": ""string"",
""Location"": ""string"",
""Degree"": ""string"",
""Graduation Date"": ""string""
}
}";
const string SystemContent = @"
You are a professional career assistant specializing in crafting compelling and personalized cover letters.
Your expertise lies in tailoring each cover letter to highlight the most relevant essential technical skills qualifications,
other essential technical skills qualifications, and accomplishments, ensuring alignment with the job description and industry standards.
Your goal is to present the candidate as the ideal fit for the role,
showcasing their value and enthusiasm in a professional and engaging manner.";
const string TaskDescription = @"
You will receive two JSON-formatted inputs: a job offer and a resume.
Your task is to generate a tailored and professional cover letter that aligns with the information provided in both inputs.";
string userContent = $@"
{TaskDescription}
Job Description:
{jobOfferString}
Resume:
{resumeString}
Output Requirements:
Present the extracted information in the following JSON schema:
JSON Schema:
{JsonSchema}";
return new Prompt
{
SystemContent = SystemContent,
UserContent = userContent
};
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\PromptGenerator.cs ===

﻿using System.Diagnostics;
using Configuration;
using LiveNetwork.Application.Services;
using LiveNetwork.Domain;
using Microsoft.Extensions.Logging;
using Services.Interfaces;
namespace LiveNetwork.Infrastructure.Services
{
public class PromptGenerator(IOpenAIClient openAIClient,
ILogger<PromptGenerator> logger,
ITrackingService trackingService,
AppConfig config) : IPromptGenerator
{
private readonly IOpenAIClient _openAIClient = openAIClient ?? throw new ArgumentNullException(nameof(openAIClient));
private readonly ILogger<PromptGenerator> _logger = logger ?? throw new ArgumentNullException(nameof(logger));
private readonly ITrackingService _trackingService = trackingService ?? throw new ArgumentNullException(nameof(trackingService));
private readonly AppConfig _config = config ?? throw new ArgumentNullException(nameof(config));
private static readonly Random _random = new();
private int MaxInvites = 100;
public async Task GeneratPrompt()
{
var runId = Guid.NewGuid().ToString("N");
var swRun = Stopwatch.StartNew();
using (_logger.BeginScope(new Dictionary<string, object?>
{
["RunId"] = runId
}))
{
_logger.LogInformation("Starting invite generation run. MaxInvites={MaxInvites}.", MaxInvites);
try
{
MaxInvites = Math.Max(1, Math.Min(1000, _config.Options.MaxInvites));
var profilesPath = _config.Paths.DetailedProfilesOutputFilePath;
_logger.LogInformation("Step 1/6: Loading detailed profiles from path: {ProfilesPath}", profilesPath);
var swProfiles = Stopwatch.StartNew();
var profiles = await _trackingService.LoadDetailedProfilesAsync(profilesPath);
swProfiles.Stop();
if (profiles == null || profiles.Count == 0)
{
_logger.LogInformation("No profiles found (elapsed {ElapsedMs} ms). Nothing to do.", swProfiles.ElapsedMilliseconds);
return;
}
_logger.LogInformation("Loaded {ProfileCount} profiles (elapsed {ElapsedMs} ms).",
profiles.Count, swProfiles.ElapsedMilliseconds);
var threadsPath = _config.Paths.ConversationOutputFilePath;
_logger.LogInformation("Step 2/6: Loading conversation threads from path: {ThreadsPath}", threadsPath);
var swThreads = Stopwatch.StartNew();
var threads = await _trackingService.LoadConversationThreadAsync(threadsPath) ?? [];
swThreads.Stop();
if (threads.Count == 0)
{
_logger.LogInformation("No existing threads found. Initializing from profiles...");
var swInit = Stopwatch.StartNew();
threads.AddRange(profiles.Select(p => new ConversationThread(p)));
swInit.Stop();
_logger.LogInformation("Initialized {ThreadCount} threads from profiles (elapsed {ElapsedMs} ms).",
threads.Count, swInit.ElapsedMilliseconds);
}
else
{
_logger.LogInformation("Loaded {ThreadCount} existing threads (elapsed {ElapsedMs} ms).",
threads.Count, swThreads.ElapsedMilliseconds);
}
_logger.LogInformation("Step 3/6: Selecting eligible threads (no initial invite).");
var eligible = threads.Where(t => !t.HasActivity).ToList();
_logger.LogInformation("{EligibleCount} threads are eligible out of {TotalThreads}.",
eligible.Count, threads.Count);
if (eligible.Count == 0)
{
_logger.LogInformation("All threads already have an initial invite. Exiting.");
return;
}
_logger.LogInformation("Step 4/6: Shuffling eligible threads and taking up to {MaxInvites}.", MaxInvites);
var swShuffle = Stopwatch.StartNew();
ShuffleInPlace(eligible);
var selected = eligible.Take(MaxInvites).ToList();
swShuffle.Stop();
_logger.LogInformation("Selected {SelectedCount} threads (elapsed {ElapsedMs} ms).",
selected.Count, swShuffle.ElapsedMilliseconds);
_logger.LogInformation("Step 5/6: Generating invites for selected threads.");
int successCount = 0;
int failCount = 0;
for (int i = 0; i < selected.Count; i++)
{
var thread = selected[i];
using (_logger.BeginScope(new Dictionary<string, object?>
{
["ThreadIndex"] = i,
["SelectedCount"] = selected.Count,
["RunId"] = runId
}))
{
_logger.LogDebug("Processing thread {Index}/{Total}.", i + 1, selected.Count);
try
{
_logger.LogDebug("Building prompt for target profile.");
var swPrompt = Stopwatch.StartNew();
var prompt = InvitePrompt.BuildPrompt(thread.TargetProfile);
swPrompt.Stop();
_logger.LogDebug("Prompt built (elapsed {ElapsedMs} ms).", swPrompt.ElapsedMilliseconds);
_logger.LogDebug("Requesting OpenAI chat completion...");
var swAi = Stopwatch.StartNew();
var content = "Hi, I’m always curious about the challenges others are working through. I’ve learned so much from colleagues and peers, and I’d love to connect—maybe we can share ideas and support each other along the way.";
if (_config.Options.EnableCustomMessages)
{
content = await _openAIClient.GetChatCompletionAsync(prompt);
}
swAi.Stop();
_logger.LogDebug("Received OpenAI response (elapsed {ElapsedMs} ms, ContentLength={ContentLength}).",
swAi.ElapsedMilliseconds, content?.Length ?? 0);
_logger.LogDebug("Adding invite to thread.");
if (string.IsNullOrWhiteSpace(content))
throw new InvalidOperationException("Received empty content from OpenAI.");
var invite = new Invite(content, InvitePrompt.Experiment, InviteStatus.Draft);
var contentScore = string.Empty;
if (_config.Options.EnableCustomMessages)
{
var scorePrompt = ScorePrompt.BuildSandlerReviewPrompt(content, thread.TargetProfile);
contentScore = await _openAIClient.GetChatCompletionAsync(scorePrompt);
}
invite.FeedbackNotes = contentScore;
thread.AddInvite(invite);
successCount++;
_logger.LogInformation("Invite added successfully for thread {Index}.", i + 1);
_logger.LogInformation("Step 6/6: Saving conversation threads to path: {ThreadsPath}", threadsPath);
await _trackingService.SaveConversationThreadAsync(threads, threadsPath);
}
catch (Exception exThread)
{
failCount++;
_logger.LogError(exThread, "Failed to generate invite for thread {Index}. Continuing with next.", i + 1);
}
}
}
_logger.LogInformation("Invite generation complete: Success={SuccessCount}, Failed={FailCount}.", successCount, failCount);
_logger.LogInformation("Step 6/6: Saving conversation threads to path: {ThreadsPath}", threadsPath);
var swSave = Stopwatch.StartNew();
await _trackingService.SaveConversationThreadAsync(threads, threadsPath);
swSave.Stop();
_logger.LogInformation("Conversation threads saved (elapsed {ElapsedMs} ms).", swSave.ElapsedMilliseconds);
_logger.LogInformation("Run finished successfully in {ElapsedMs} ms. RunId={RunId}.", swRun.ElapsedMilliseconds, runId);
}
catch (Exception ex)
{
_logger.LogError(ex, "Run failed with an unhandled error. RunId={RunId}.", runId);
throw;
}
finally
{
swRun.Stop();
}
}
}
private static void ShuffleInPlace<T>(IList<T> list)
{
for (int i = list.Count - 1; i > 0; i--)
{
int j = _random.Next(i + 1);
(list[i], list[j]) = (list[j], list[i]);
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\ResumeDetailService.cs ===

﻿using System.Diagnostics;
using System.Text;
using Configuration;
using LiveNetwork.Application.Services;
using LiveNetwork.Domain;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
using Services.Interfaces;
namespace LiveNetwork.Infrastructure.Services
{
public class ResumeDetailService : IResumeDetailService
{
private readonly IWebDriver _driver;
private readonly AppConfig _config;
private readonly ILogger<ResumeDetailService> _logger;
private readonly ExecutionTracker _executionOptions;
private readonly IDirectoryCheck _directoryCheck;
private readonly ITrackingService _trackingService;
private readonly ICaptureSnapshot _capture;
private readonly IUtil _util;
private const string FolderName = "Detail";
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
public ResumeDetailService(
IWebDriverFactory driverFactory,
AppConfig config,
ILogger<ResumeDetailService> logger,
ICaptureSnapshot capture,
ExecutionTracker executionOptions,
IDirectoryCheck directoryCheck,
ITrackingService trackingService,
IUtil util)
{
_driver = driverFactory.Create();
_config = config;
_logger = logger;
_executionOptions = executionOptions;
_logger.LogInformation("📁 [Init/Step 1] Execution folder: {ExecutionFolder}", _executionOptions.ExecutionFolder);
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(FolderPath);
_logger.LogInformation("📁 [Init/Step 2] Ensured detail folder exists: {FolderPath}", FolderPath);
_trackingService = trackingService;
_capture = capture;
_util = util;
}
public async Task RunResumeDetailProcessAsync()
{
var swTotal = Stopwatch.StartNew();
_logger.LogInformation("🚀 [Process/Step 1] Starting in-page profile extraction | Search=\"{SearchText}\"",
_config.Search.SearchText);
var outputFile = Path.Combine(_executionOptions.ExecutionFolder, _config.Paths.SearchUrlOutputFilePath);
var connections = await _trackingService.LoadConnectionsFromSearchAsync(outputFile);
_logger.LogInformation("📄 [Process/Step 2] Loaded {Count} profile URL(s) from {File}",
connections.Count, _config.Paths.SearchUrlOutputFilePath);
if (connections.Count == 0)
{
_logger.LogWarning("⚠️ [Process/Step 3] No profiles found. Nothing to process.");
return;
}
var processed = await _trackingService.LoadProcessedUrlsAsync(_config.Search.SearchText);
if (processed.Count > 0)
{
_logger.LogInformation("🔁 [Process/Step 3b] Found {Count} previously processed URL(s). They will be skipped.", processed.Count);
}
try
{
var detailed = new List<LinkedInProfile>();
detailed = await _trackingService.LoadDetailedProfilesAsync(_config.Paths.DetailedProfilesOutputFilePath);
for (int i = 0; i < connections.Count; i++)
{
var url = connections[i];
var urlStr = url.ToString();
if (processed.Contains(urlStr))
{
_logger.LogInformation("⏭️ [Profile {Index}/{Total}] Skipping already processed: {Url}", i + 1, connections.Count, urlStr);
continue;
}
var swItem = Stopwatch.StartNew();
_logger.LogInformation("🔗 [Profile {Index}/{Total}/Step 1] Navigating to: {Url}",
i + 1, connections.Count, urlStr);
_driver.Navigate().GoToUrl(url);
_logger.LogInformation("🌐 [Profile {Index}/{Total}/Step 2] Page requested. Waiting briefly for the DOM to stabilize...",
i + 1, connections.Count);
await Task.Delay(800);
var profile = await ExtractLinkedInProfile(_driver, url);
_logger.LogInformation("🧾 [Profile {Index}/{Total}/Step 3] Extracted top-card data for: {Name}",
i + 1, connections.Count, profile.FullName ?? "(unknown)");
detailed.Add(profile);
await _trackingService.SaveLinkedInProfilesAsync(detailed, _config.Paths.DetailedProfilesOutputFilePath);
processed.Add(urlStr);
swItem.Stop();
_logger.LogInformation("⏱️ [Profile {Index}/{Total}/Done] Completed in {ElapsedMs} ms",
i + 1, connections.Count, swItem.ElapsedMilliseconds);
}
swTotal.Stop();
_logger.LogInformation("🎯 [Process/Done] Finished extraction for {Count} profile(s) in {ElapsedMs} ms | Search=\"{SearchText}\"",
connections.Count, swTotal.ElapsedMilliseconds, _config.Search.SearchText);
}
catch (Exception ex)
{
swTotal.Stop();
_logger.LogError(ex, "❌ [Process/Failed] Extraction failed after {ElapsedMs} ms | Search=\"{SearchText}\"",
swTotal.ElapsedMilliseconds, _config.Search.SearchText);
throw;
}
}
public async Task<List<ExperienceModel>> GetExperienceListAsync(IWebDriver driver)
{
_logger.LogInformation("🧭 [Experience/Step 1] Locating the Experience section...");
var results = new List<ExperienceModel>();
try
{
var section = driver.FindElements(By.XPath("
if (section == null)
{
_logger.LogInformation("ℹ️ [Experience/Step 2] Experience section not found.");
return results;
}
var companyBlocks = section.FindElements(By.XPath(".
_logger.LogInformation("📦 [Experience/Step 3] Found {Count} top-level experience block(s).", companyBlocks.Count);
foreach (var companyBlock in companyBlocks)
{
try
{
var companyLink = companyBlock.FindElements(By.XPath(".
.FirstOrDefault();
var companyUrl = companyLink?.GetAttribute("href") ?? "";
var companyName = companyBlock.FindElements(By.XPath(".
.FirstOrDefault()?.Text?.Trim() ?? "";
var logoImg = companyBlock.FindElements(By.XPath(".
.FirstOrDefault();
var logoUrl = logoImg?.GetAttribute("src") ?? "";
var logoAlt = logoImg?.GetAttribute("alt") ?? "";
var employmentSummary = companyBlock.FindElements(By.XPath(".
.FirstOrDefault()?.Text?.Trim() ?? "";
var location = companyBlock.FindElements(By.XPath(".
.FirstOrDefault()?.Text?.Trim() ?? "";
var companyModel = new ExperienceModel
{
Company = companyName,
CompanyUrl = companyUrl,
CompanyLogoUrl = logoUrl,
CompanyLogoAlt = logoAlt,
EmploymentSummary = employmentSummary,
Location = location
};
var roleBlocks = companyBlock.FindElements(By.XPath(".
if (roleBlocks.Any())
{
_logger.LogDebug("🔎 [Experience] Company '{Company}' has {Count} nested role(s).", companyName, roleBlocks.Count);
foreach (var role in roleBlocks)
{
companyModel.Roles.Add(ParseRoleBlock(role));
}
}
else
{
var singleRole = ParseRoleBlock(companyBlock);
if (!string.IsNullOrWhiteSpace(singleRole.Title) || !string.IsNullOrWhiteSpace(singleRole.DateRange))
{
companyModel.Roles.Add(singleRole);
}
}
var skills = companyBlock.FindElements(By.XPath(".
.Select(s => s.Text?.Trim())
.FirstOrDefault(t => !string.IsNullOrWhiteSpace(t));
if (!string.IsNullOrWhiteSpace(skills))
{
foreach (var r in companyModel.Roles.Where(r => string.IsNullOrEmpty(r.ContextualSkills)))
r.ContextualSkills = skills!;
}
results.Add(companyModel);
_logger.LogInformation("✅ [Experience/Add] Company '{Company}' with {Count} role(s).", companyModel.Company, companyModel.Roles.Count);
}
catch (Exception exCompany)
{
_logger.LogWarning(exCompany, "⚠️ [Experience] Failed to parse a top-level experience block.");
}
}
_logger.LogInformation("🎯 [Experience/Done] Parsed {Count} company experience item(s).", results.Count);
}
catch (Exception ex)
{
_logger.LogError(ex, "❌ [Experience/Failed] Unexpected error while parsing the Experience section.");
}
return results;
}
public async Task<List<EducationModel>> GetEducationListAsync(IWebDriver driver)
{
_logger.LogInformation("🧭 [Education/Step 1] Locating the Education section...");
var list = new List<EducationModel>();
try
{
var container = driver.FindElements(By.XPath(
"
.FirstOrDefault();
if (container == null)
{
container = driver.FindElements(By.XPath(
"
.FirstOrDefault();
}
if (container == null)
{
_logger.LogInformation("ℹ️ [Education/Step 2] Education section not found.");
return list;
}
var nodes = container.FindElements(By.XPath(".
_logger.LogInformation("📦 [Education/Step 3] Found {Count} education item(s).", nodes.Count);
foreach (var el in nodes)
{
try
{
var school = el.FindElements(By.XPath(".
.FirstOrDefault()?.Text?.Trim() ?? "";
var schoolLink = el.FindElements(By.XPath(".
.FirstOrDefault()?.GetAttribute("href") ?? "";
var logoImg = el.FindElements(By.XPath(".
.FirstOrDefault();
var logoUrl = logoImg?.GetAttribute("src") ?? "";
var logoAlt = logoImg?.GetAttribute("alt") ?? "";
var degreeFieldRaw = el.FindElements(By.XPath(".
.Select(x => x.Text?.Trim())
.FirstOrDefault(t => !string.IsNullOrWhiteSpace(t))
?? "";
string degree = "", field = "";
if (!string.IsNullOrWhiteSpace(degreeFieldRaw))
{
var parts = degreeFieldRaw.Split(',', 2, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
degree = parts.Length > 0 ? parts[0] : degreeFieldRaw;
field = parts.Length > 1 ? parts[1] : "";
}
var dateRange = el.FindElements(By.XPath(".
.Select(x => x.Text?.Trim())
.FirstOrDefault(t => !string.IsNullOrWhiteSpace(t))
?? "";
var description = el.FindElements(By.XPath(".
.Select(x => x.Text?.Trim())
.FirstOrDefault(t => !string.IsNullOrWhiteSpace(t))
?? "";
list.Add(new EducationModel
{
School = school,
SchoolUrl = schoolLink,
LogoUrl = logoUrl,
LogoAlt = logoAlt,
Degree = degree,
Field = field,
DateRange = dateRange,
Description = NormalizeWhitespace(description)
});
_logger.LogInformation("✅ [Education/Add] '{School}' | {Degree}{FieldSep}{Field} | {Date}",
school, degree, string.IsNullOrEmpty(field) ? "" : ", ", field, dateRange);
}
catch (Exception exItem)
{
_logger.LogWarning(exItem, "⚠️ [Education] Failed to parse an education item.");
}
}
_logger.LogInformation("🎯 [Education/Done] Parsed {Count} education record(s).", list.Count);
}
catch (Exception ex)
{
_logger.LogError(ex, "❌ [Education/Failed] Unexpected error while parsing the Education section.");
}
return list;
}
private ExperienceRoleModel ParseRoleBlock(IWebElement roleBlock)
{
var role = new ExperienceRoleModel();
try
{
role.Title = roleBlock.FindElements(By.XPath(".
.FirstOrDefault()?.Text?.Trim() ?? "";
role.DateRange = roleBlock.FindElements(By.XPath(".
.Select(e => e.Text?.Trim())
.FirstOrDefault(t => !string.IsNullOrWhiteSpace(t)) ?? "";
var workArrangement = roleBlock.FindElements(By.XPath(".
.Select(e => e.Text?.Trim())
.FirstOrDefault(t => t is "On-site" or "Remote" or "Hybrid");
role.WorkArrangement = workArrangement ?? "";
var desc = roleBlock.FindElements(By.XPath(".
.Select(e => e.Text?.Trim())
.FirstOrDefault(t => !string.IsNullOrWhiteSpace(t)) ?? "";
role.Description = NormalizeWhitespace(desc);
var contextual = roleBlock.FindElements(By.XPath(".
.Select(e => e.Text?.Trim())
.FirstOrDefault(t => !string.IsNullOrWhiteSpace(t));
if (!string.IsNullOrWhiteSpace(contextual))
role.ContextualSkills = contextual!;
}
catch (Exception ex)
{
_logger.LogWarning(ex, "⚠️ [Experience] Failed to parse a role block.");
}
return role;
}
private static string NormalizeWhitespace(string input)
{
if (string.IsNullOrWhiteSpace(input)) return string.Empty;
var sb = new StringBuilder(input.Length);
bool ws = false;
foreach (var ch in input)
{
if (char.IsWhiteSpace(ch))
{
if (!ws) { sb.Append(' '); ws = true; }
}
else
{
sb.Append(ch);
ws = false;
}
}
return sb.ToString().Trim();
}
public async Task<LinkedInProfile> ExtractLinkedInProfile(IWebDriver driver, Uri url)
{
_logger.LogInformation("🧭 [Extract/Step 1] Extracting top-card fields...");
var sw = Stopwatch.StartNew();
var profile = new LinkedInProfile
{
FullName = TryGetText(By.CssSelector("h1.inline.t-24"), driver),
Headline = TryGetText(By.CssSelector("div.text-body-medium.break-words"), driver),
Location = TryGetText(By.CssSelector("span.text-body-small.inline.t-black--light.break-words"), driver),
CurrentCompany = TryGetText(By.XPath("
ProfileImageUrl = TryGetAttribute(By.CssSelector("img.pv-top-card-profile-picture__image--show"), "src", driver),
BackgroundImageUrl = TryGetAttribute(By.CssSelector("img.profile-background-image__image"), "src", driver),
ConnectionDegree = TryGetText(By.CssSelector("span.dist-value"), driver),
Connections = TryGetText(By.XPath("
Followers = TryGetText(By.XPath("
AboutText = GetAboutSection(driver),
Url = url,
Experiences = await GetExperienceListAsync(driver),
Educations = await GetEducationListAsync(driver),
};
sw.Stop();
_logger.LogInformation("✅ [Extract/Done] Extracted profile '{Name}' in {ElapsedMs} ms",
profile.FullName ?? "(unknown)", sw.ElapsedMilliseconds);
return profile;
}
private static string? TryGetText(By by, IWebDriver driver)
{
try
{
var el = driver.FindElement(by);
return el?.Text?.Trim();
}
catch (NoSuchElementException)
{
return null;
}
}
private static string? TryGetAttribute(By by, string attribute, IWebDriver driver)
{
try
{
var el = driver.FindElement(by);
return el?.GetAttribute(attribute);
}
catch (NoSuchElementException)
{
return null;
}
}
public string GetAboutSection(IWebDriver driver)
{
_logger.LogInformation("📄 [About/Step 1] Reading About section...");
try
{
var aboutElement = driver.FindElements(By.XPath(
"
"
.FirstOrDefault(el => el.Displayed);
if (aboutElement == null)
{
_logger.LogInformation("ℹ️ [About/Done] About section not found.");
return string.Empty;
}
var text = aboutElement.Text.Trim();
_logger.LogInformation("✅ [About/Done] Extracted {Length} character(s).", text.Length);
return text;
}
catch (Exception ex)
{
_logger.LogError(ex, "❌ [About/Failed] Failed to extract the About section.");
return string.Empty;
}
}
public async Task<List<ProjectModel>> GetProjectListAsync(IWebDriver driver)
{
_logger.LogInformation("🧭 [Projects/Step 1] Locating the Projects section...");
var projects = new List<ProjectModel>();
try
{
var section = driver.FindElements(By.XPath("
.FirstOrDefault();
if (section == null)
{
_logger.LogWarning("⚠️ [Projects/Step 2] Projects section not found.");
return projects;
}
var nodes = section.FindElements(By.XPath(".
_logger.LogInformation("📦 [Projects/Step 3] Found {Count} project item(s).", nodes.Count);
foreach (var el in nodes)
{
try
{
var title = el.FindElement(By.XPath(".
var durationEl = el.FindElements(By.XPath(".
var duration = durationEl?.Text?.Trim() ?? string.Empty;
var descriptionEl = el.FindElements(By.XPath(".
var description = descriptionEl?.Text?.Trim() ?? string.Empty;
var linkEl = el.FindElements(By.XPath(".
var url = linkEl?.GetAttribute("href") ?? string.Empty;
projects.Add(new ProjectModel
{
Title = title,
Duration = duration,
Description = description,
Url = url
});
_logger.LogInformation("✅ [Projects/Add] '{Title}' | {Duration} | {Url}", title, duration, url);
}
catch (Exception ex)
{
_logger.LogWarning(ex, "⚠️ [Projects] Failed to parse a project item.");
}
}
_logger.LogInformation("🎯 [Projects/Done] Parsed {Count} project(s).", projects.Count);
}
catch (Exception ex)
{
_logger.LogError(ex, "❌ [Projects/Failed] Error while locating or parsing the Projects section.");
}
return projects;
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\ScorePrompt.cs ===

﻿using System.Text;
using LiveNetwork.Domain;
namespace LiveNetwork.Infrastructure.Services
{
public static class ScorePrompt
{
public const string Experiment = "linkedin_invite_sandler_review_v1";
public static Prompt BuildSandlerReviewPrompt(string invitationText, LinkedInProfile? targetProfile = null)
{
if (string.IsNullOrWhiteSpace(invitationText))
throw new ArgumentException("Invitation text must not be empty.", nameof(invitationText));
var ctx = new StringBuilder();
ctx.AppendLine("Operating principles (apply to all replies):");
ctx.AppendLine("From now on, don’t just agree with my ideas or take my conclusions for granted.");
ctx.AppendLine("When I propose an idea, do the following:");
ctx.AppendLine("• Question my assumptions.");
ctx.AppendLine("• Take a skeptical stance.");
ctx.AppendLine("• Verify my reasoning.");
ctx.AppendLine("• Propose other approaches.");
ctx.AppendLine("• Prioritize accuracy over approval.");
ctx.AppendLine("• Be constructive yet rigorous.");
ctx.AppendLine("If you notice biases or unfounded beliefs, say it clearly. The goal is to refine our conclusions and our process.");
ctx.AppendLine();
if (targetProfile != null)
{
ctx.AppendLine("Target Profile (optional, for light context only):");
if (!string.IsNullOrWhiteSpace(targetProfile.FullName)) ctx.AppendLine($"• Name: {targetProfile.FullName}");
if (!string.IsNullOrWhiteSpace(targetProfile.Headline)) ctx.AppendLine($"• Headline: {targetProfile.Headline}");
if (!string.IsNullOrWhiteSpace(targetProfile.CurrentCompany)) ctx.AppendLine($"• Company: {targetProfile.CurrentCompany}");
if (!string.IsNullOrWhiteSpace(targetProfile.Location)) ctx.AppendLine($"• Location: {targetProfile.Location}");
if (targetProfile.Url != null) ctx.AppendLine($"• URL: {targetProfile.Url}");
ctx.AppendLine();
}
var task = new StringBuilder();
task.AppendLine("Role:");
task.AppendLine("You are a seasoned sales coach and an expert in the Sandler Sales Method.");
task.AppendLine("Your specialty is using this methodology to build genuine, professional relationships on LinkedIn,");
task.AppendLine("moving away from pushy sales tactics and toward creating trust and value.");
task.AppendLine();
task.AppendLine("Context:");
task.AppendLine("The user needs to evaluate a LinkedIn connection invitation. The goal is not just to get a connection");
task.AppendLine("but to start a meaningful professional relationship that could lead to a conversation.");
task.AppendLine("The Sandler method emphasizes being upfront, mutually respectful, and avoiding \"free consulting\"");
task.AppendLine("or overly eager pitches. A good invitation should feel like a peer-to-peer conversation, not a cold call.");
task.AppendLine();
task.AppendLine("Task:");
task.AppendLine("Analyze the provided LinkedIn invitation based on the following Sandler-inspired criteria:");
task.AppendLine("Naturalness & Tone: Does it sound like a genuine human message, or like a canned sales pitch?");
task.AppendLine("Is the tone peer-to-peer and respectful?");
task.AppendLine("Effectiveness & Sandler Alignment:");
task.AppendLine("- Up-Front Contract: Does it set a clear, low-pressure expectation for the connection (e.g., \"to share ideas,\" \"to expand my network\")?");
task.AppendLine("- Pain: Does it hint at a possible shared challenge or area of interest without being presumptuous or negative?");
task.AppendLine("- No Pitching: Does it avoid offering unsolicited advice, solutions, or a sales pitch immediately?");
task.AppendLine("- Permission-Based: Does it feel like it asks for permission to connect in a respectful way?");
task.AppendLine("Improvement Points: Provide a specific rewrite of the invitation.");
task.AppendLine("Explain why your changes make it more effective according to the Sandler principles.");
task.AppendLine("Offer 2–3 alternative phrasings for key sentences.");
task.AppendLine();
var format = new StringBuilder();
format.AppendLine("Format:");
format.AppendLine("Provide your analysis in the following structured format (plain text, in English):");
format.AppendLine("Overall Score: (X/10)");
format.AppendLine("Naturalness Analysis: [2–3 sentences]");
format.AppendLine("Effectiveness & Sandler Analysis:");
format.AppendLine("- Up-Front Contract: [...]");
format.AppendLine("- Pain: [...]");
format.AppendLine("- No Pitching: [...]");
format.AppendLine("- Permission-Based: [...]");
format.AppendLine("Improved Invitation:");
format.AppendLine("Rewritten Message: [Full rewritten text]");
format.AppendLine("Rationale for Changes: [Explain the Sandler reasoning behind key changes]");
format.AppendLine("Alternative Phrases:");
format.AppendLine("- [Short standalone phrase 1]");
format.AppendLine("- [Short standalone phrase 2]");
format.AppendLine("- [Short standalone phrase 3]");
format.AppendLine();
format.AppendLine("Example:");
format.AppendLine("User's Invitation: \"Hi, I see you work in SaaS. My company helps businesses like yours scale revenue by 30%. Let's connect so I can tell you more!\"");
format.AppendLine("Your Analysis (Example):");
format.AppendLine("Overall Score: 3/10");
format.AppendLine("Naturalness Analysis: Sounds like a generic sales pitch. The tone is vendor-to-prospect, not peer-to-peer.");
format.AppendLine("Effectiveness & Sandler Analysis:");
format.AppendLine("- Up-Front Contract: Unclear; the connection request implies a sales conversation, which adds pressure.");
format.AppendLine("- Pain: Tries to inject a solution (\"scale revenue by 30%\") without context; feels presumptuous.");
format.AppendLine("- No Pitching: Violated; it pitches a solution immediately.");
format.AppendLine("- Permission-Based: Weak; it pushes for a follow-up rather than offering a low-pressure connection.");
format.AppendLine("Improved Invitation:");
format.AppendLine("Rewritten Message: \"Hi [Name], I’m exploring how SaaS teams approach sustainable growth and found your background relevant. I prefer low-pressure, peer connections to share perspectives. If that’s useful, I’d be glad to connect—no problem if not.\"");
format.AppendLine("Rationale for Changes: Sets a clear, low-pressure purpose (up-front contract), removes pitching, and requests permission.");
format.AppendLine("Alternative Phrases:");
format.AppendLine("- \"Open to a peer connection to exchange perspectives?\"");
format.AppendLine("- \"Happy to connect if it’s useful—no pressure either way.\"");
format.AppendLine("- \"Exploring how peers approach this—would a light connection help?\"");
var builder = new AIPromptBuilder
{
Role = "assistant",
Task = task.ToString(),
Context = ctx.ToString(),
Format = format.ToString(),
Tone = "analytical, respectful, constructive",
Style = "clear, specific, actionable",
MaxLength = null,
IncludeSources = false,
StepByStep = false
};
builder.AddConstraint("Write in English.");
builder.AddConstraint("Follow the exact output headings and order specified in the Format section.");
builder.AddConstraint("Do not add extra sections or code fences.");
builder.AddConstraint("Keep the rewritten message concise (<= 350 characters if possible).");
builder.AddConstraint("Avoid any sales pitch or implied consulting in the rewritten message.");
builder.AddConstraint("Use a peer-to-peer, permission-based tone.");
builder.AddParameter("InvitationText", invitationText.Trim());
return builder.BuildPromptObject();
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\Search.cs ===

﻿using System.Diagnostics;
using Configuration;
using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
using Services.Interfaces;
namespace LiveNetwork.Infrastructure.Services
{
public class Search : ISearch
{
private readonly IWebDriver _driver;
private readonly AppConfig _config;
private readonly ILogger<Search> _logger;
private readonly ExecutionTracker _executionOptions;
private const string FolderName = "Search";
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
private readonly IDirectoryCheck _directoryCheck;
private readonly IUtil _util;
public Search(IWebDriverFactory driverFactory,
AppConfig config,
ILogger<Search> logger,
ICaptureSnapshot capture,
ExecutionTracker executionOptions,
IDirectoryCheck directoryCheck,
IUtil util)
{
_driver = driverFactory.Create();
_config = config;
_logger = logger;
_executionOptions = executionOptions;
_logger.LogInformation($"📁 Created execution folder at: {_executionOptions.ExecutionFolder}");
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(FolderPath);
_util = util;
}
public async Task RunSearchAsync()
{
_logger.LogInformation("🔍 Starting LinkedIn search process | Search text: {SearchText}", _config.Search.SearchText);
try
{
var encodedSearchText = Uri.EscapeDataString(_config.Search.SearchText);
var url = $"https://www.linkedin.com/search/results/people/?geoUrn=[\"102044150\"]&keywords={encodedSearchText}";
_logger.LogDebug("🌐 Navigating to LinkedIn search URL: {SearchUrl}", url);
_driver.Navigate().GoToUrl(url);
_logger.LogInformation("✅ LinkedIn search completed successfully | Search text: {SearchText}", _config.Search.SearchText);
}
catch (Exception ex)
{
_logger.LogError(ex, "❌ LinkedIn search failed | Search text: {SearchText} | Error: {ErrorMessage}",
_config.Search.SearchText, ex.Message);
throw;
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\SearchCoordinator.cs ===

﻿using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using Services.Interfaces;
namespace LiveNetwork.Infrastructure.Services
{
public class SearchCoordinator : ISearchCoordinator
{
private readonly ILoginService _loginService;
private readonly ISearch _search;
private readonly IProcessor _pageProcessor;
private readonly ILogger<SearchCoordinator> _logger;
private readonly IResumeDetailService _resumeDetailService;
public SearchCoordinator(
ILoginService loginService,
ISearch search,
IProcessor pageProcessor,
ILogger<SearchCoordinator> logger,
IResumeDetailService resumeDetailService)
{
_loginService = loginService;
_search = search;
_pageProcessor = pageProcessor;
_logger = logger;
_resumeDetailService = resumeDetailService;
}
public async Task SearchConnectionAsync()
{
_logger.LogInformation("🔍 Starting LinkedIn search connection process");
try
{
_logger.LogDebug("🔑 Attempting to log in to LinkedIn...");
await _loginService.LoginAsync();
_logger.LogInformation("✅ Logged in to LinkedIn successfully");
_logger.LogDebug("🌐 Initiating LinkedIn search...");
await _search.RunSearchAsync();
_logger.LogInformation("✅ LinkedIn search executed successfully");
_logger.LogDebug("📄 Beginning page processing...");
await _pageProcessor.ProcessAllPagesAsync();
_logger.LogInformation("✅ Page processing completed");
_logger.LogDebug("📑 Starting detailed resume extraction process...");
await _resumeDetailService.RunResumeDetailProcessAsync();
_logger.LogInformation("✅ Resume detail extraction process completed");
_logger.LogInformation("🎉 LinkedIn search connection process completed successfully");
}
catch (Exception ex)
{
_logger.LogError(ex, "❌ LinkedIn search connection failed | Error: {ErrorMessage}", ex.Message);
throw;
}
finally
{
_logger.LogDebug("🏁 Finalizing LinkedIn search connection process");
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\SecurityCheck.cs ===

﻿using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
using Services.Interfaces;
using Configuration;
using LiveNetwork.Application.Services;
namespace LiveNetwork.Infrastructure.Services
{
public class SecurityCheck : ISecurityCheck
{
private readonly IWebDriver _driver;
private readonly ICaptureSnapshot _capture;
private readonly ExecutionTracker _executionOptions;
private readonly ILogger<SecurityCheck> _logger;
private const string FolderName = "SecurityCheck";
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
private readonly IDirectoryCheck _directoryCheck;
public SecurityCheck(IWebDriverFactory driverFactory,
ILogger<SecurityCheck> logger,
ICaptureSnapshot capture,
ExecutionTracker executionOptions,
IDirectoryCheck directoryCheack)
{
_logger = logger;
_capture = capture;
_executionOptions = executionOptions;
_directoryCheck = directoryCheack;
_driver = driverFactory.Create();
_directoryCheck.EnsureDirectoryExists(FolderPath);
}
public bool IsSecurityCheck()
{
try
{
var title = _driver.Title.Contains("Security Verification");
if (title)
{
_logger.LogWarning("⚠️ Title Security Verification detected on the page.");
return true;
}
var captcha = _driver.FindElements(By.Id("captcha-internal")).Any();
if (captcha)
{
_logger.LogWarning("⚠️ CAPTCHA image detected on the page.");
return true;
}
var text = _driver.FindElements(By.XPath("
if (text)
{
_logger.LogWarning("⚠️ Text 'Let’s do a quick security check' detected on the page.");
return true;
}
var captchaImages = _driver.FindElements(By.XPath("
if (captchaImages)
{
_logger.LogWarning("⚠️ CAPTCHA image detected on the page.");
return true;
}
var bodyText = _driver.FindElement(By.TagName("body")).Text;
var indicators = new[] { "are you a human", "please verify", "unusual activity", "security check", "confirm your identity" };
if (indicators.Any(indicator => bodyText.IndexOf(indicator, StringComparison.OrdinalIgnoreCase) >= 0))
{
_logger.LogWarning("⚠️ Security check text detected on the page.");
return true;
}
var loginForm = _driver.FindElements(By.XPath("
if (loginForm.Any())
{
_logger.LogWarning("⚠️ Unexpected LinkedIn login form detected. Session might have expired.");
return true;
}
return false;
}
catch (Exception ex)
{
_logger.LogError(ex, "⚠️ Error while checking for security verification.");
return false;
}
}
public async Task TryStartPuzzle()
{
try
{
_logger.LogInformation("🧩 Attempting to click on 'Start Puzzle' button...");
Console.WriteLine("🛑 Pausado. Por favor, resuelve el captcha y presiona ENTER para continuar...");
Console.ReadLine();
var timestampEnd = await _capture.CaptureArtifactsAsync(FolderPath, "Start_Puzzle_Clicked");
_logger.LogInformation($"📸 Captured screenshot after clicking 'Start Puzzle' at {timestampEnd}.");
}
catch (Exception ex)
{
_logger.LogError(ex, $"❌ ID:{_executionOptions.TimeStamp} Failed to simulate click on 'Start Puzzle' button.");
}
}
public async Task HandleSecurityPage()
{
var timestamp = await _capture.CaptureArtifactsAsync(FolderPath, "SecurityPageDetected");
_logger.LogError($" ID:{_executionOptions.TimeStamp} Unexpected page layout detected.");
Console.WriteLine("\n╔════════════════════════════════════════════╗");
Console.WriteLine("║           SECURITY PAGE DETECTED          ║");
Console.WriteLine("╠════════════════════════════════════════════╣");
Console.WriteLine($"║ Current URL: {_driver.Url,-30} ║");
Console.WriteLine("║                                            ║");
Console.WriteLine($"║ HTML saved to: {timestamp}.html ║");
Console.WriteLine($"║ Screenshot saved to: {timestamp}.png ║");
Console.WriteLine("╚════════════════════════════════════════════╝\n");
}
public async Task HandleUnexpectedPage()
{
var timestamp = await _capture.CaptureArtifactsAsync(FolderPath, "UnexpectedPageDetected");
_logger.LogError($" ID:{_executionOptions.TimeStamp} Unexpected page layout detected.");
Console.WriteLine("\n╔════════════════════════════════════════════╗");
Console.WriteLine("║           UNEXPECTED PAGE DETECTED          ║");
Console.WriteLine("╠════════════════════════════════════════════╣");
Console.WriteLine($"║ Current URL: {_driver.Url,-30} ║");
Console.WriteLine("║                                            ║");
Console.WriteLine($"║ HTML saved to: {timestamp}.html ║");
Console.WriteLine($"║ Screenshot saved to: {timestamp}.png ║");
Console.WriteLine("╚════════════════════════════════════════════╝\n");
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\SkillHelpers.cs ===

﻿namespace LiveNetwork.Infrastructure.Services
{
using System.Text.RegularExpressions;
public static class SkillHelpers
{
public static string CleanSkill(string name)
{
if (string.IsNullOrWhiteSpace(name))
return string.Empty;
var normalizedName = NormalizeSkill(name);
var withoutNoiseWords = RemoveCommonPrefixes(normalizedName);
var noUnicode = RemoveUnicodeEscapes(withoutNoiseWords);
var normalizedSkill = CleanSkillNameLettersAndNumbers(withoutNoiseWords);
return normalizedSkill;
}
public static string CleanSkillNameLettersAndNumbers(string name)
{
if (string.IsNullOrWhiteSpace(name))
return string.Empty;
var alphanumeric = Regex.Replace(name.ToLowerInvariant(), @"[^a-z0-9]", "");
return alphanumeric;
}
public static string RemoveCommonPrefixes(string input)
{
if (string.IsNullOrWhiteSpace(input)) return string.Empty;
var text = input.ToLowerInvariant();
string[] noiseWords =
[
"experience", "knowledge", "familiarity", "background", " with ", "working", " and ", " in ", " development ", " of ", " proficiency ", " proficient "
];
foreach (var word in noiseWords)
{
text = Regex.Replace(text, $@"\b{word}\b", "", RegexOptions.IgnoreCase);
}
return Regex.Replace(text, @"\s+", " ").Trim();
}
public static string RemoveUnicodeEscapes(string input)
{
if (string.IsNullOrWhiteSpace(input)) return string.Empty;
return Regex.Replace(input, @"\\u[0-9a-fA-F]{4}", string.Empty);
}
public static string NormalizeSkill(string skill)
{
return skill.ToLowerInvariant()
.Replace("vb.net", "vbnet")
.Replace(".net", "dotnet")
.Replace("c#", "csharp")
.Replace("c++", "cpp")
.Replace("&", " and ")
.Replace("/", " ")
.Replace("-", " ")
.Replace("(", " ")
.Replace(")", " ")
.Replace("[", " ")
.Replace("]", " ")
.Replace("  ", " ")
.Trim();
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\StringHelpers.cs ===

﻿namespace LiveNetwork.Infrastructure.Services
{
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
public static class StringHelpers
{
private static readonly HashSet<string> CommonCountries = new(
[
"canada", "united states", "brazil", "mexico", "argentina", "united kingdom",
"france", "germany", "italy", "spain", "australia", "new zealand", "japan",
"china", "india", "russia", "south africa", "egypt", "nigeria", "kenya",
"sweden", "norway", "finland", "denmark", "portugal", "netherlands",
"belgium", "switzerland", "austria", "greece", "turkey", "saudi arabia",
"uae", "south korea", "vietnam", "thailand", "philippines", "indonesia",
"malaysia", "singapore", "israel", "pakistan", "bangladesh", "iran",
"iraq", "syria", "afghanistan", "ukraine", "poland", "czech republic",
"hungary", "slovakia", "romania", "bulgaria", "serbia", "croatia",
"bosnia", "slovenia", "albania", "macedonia", "montenegro", "iceland",
"ireland", "scotland", "wales", "england", "cuba", "jamaica", "haiti",
"dominican republic", "colombia", "venezuela", "chile", "peru", "bolivia",
"ecuador", "paraguay", "uruguay", "guyana", "suriname", "belize",
"guatemala", "honduras", "el salvador", "costa rica", "panama"
],
StringComparer.OrdinalIgnoreCase);
private static readonly HashSet<string> ExcludeWords = new(
[
"with",
"and",
"&",
"the",
"a",
"an"
],
StringComparer.OrdinalIgnoreCase);
private static readonly HashSet<string> CommonWords = new(
[
"csharp", "dotnet", "angular", "react", "vue", "java", "python",
"javascript", "typescript", "sql", "nosql", "aws", "azure",
"devops", "cloud", "engineer", "developer", "architect", "manager",
"consultant", "data", "scientist", "machine", "learning", "ai",
"software", "fullstack", "backend", "frontend", "qa", "tester",
"mobile", "android", "ios"
],
StringComparer.OrdinalIgnoreCase);
private static readonly Dictionary<string, string> ReplaceTerms = new(StringComparer.OrdinalIgnoreCase)
{
{ "C#", "CSharp" },
{ ".NET", "DotNet" },
{ "++", "PlusPlus" },
{ "+", "Plus" },
{"FULLSTACK", "Fullstack" }
};
public static string ExtractJsonContent(string input)
{
string startMarker = "```json";
string endMarker = "```";
if (!input.Contains(startMarker) && !input.Contains(endMarker))
return input;
int startIndex = input.IndexOf(startMarker);
if (startIndex == -1)
return input.Trim();
startIndex += startMarker.Length;
int endIndex = input.IndexOf(endMarker, startIndex);
if (endIndex == -1)
endIndex = input.Length;
string jsonContent = input.Substring(startIndex, endIndex - startIndex).Trim();
return jsonContent;
}
public static string NormalizeCompanyName(string companyName)
{
return Normalize(companyName, CommonWords, ReplaceTerms);
}
public static string NormalizeLocationName(string locationName)
{
return Normalize(locationName, CommonCountries);
}
public static string NormalizeWords(string words)
{
return Normalize(words, CommonWords, ReplaceTerms);
}
public static string NormalizeJobTitle(string jobTitle)
{
return Normalize(jobTitle, CommonWords, ReplaceTerms, ExcludeWords);
}
private static string RemoveDiacritics(string text)
{
if (string.IsNullOrWhiteSpace(text))
return string.Empty;
var normalizedText = text.Normalize(NormalizationForm.FormD);
return new string([.. normalizedText.Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)]);
}
private static string Normalize(string textToNormalize, HashSet<string> recognizedTerms, Dictionary<string, string>? replacementTerms = null, HashSet<string>? excludeWords = null)
{
if (string.IsNullOrWhiteSpace(textToNormalize))
return string.Empty;
var normalizedPattern = @"^([A-Z][a-z0-9]*)(-[A-Z][a-z0-9]*)*$";
if (Regex.IsMatch(textToNormalize, normalizedPattern))
return textToNormalize;
textToNormalize = RemoveDiacritics(textToNormalize);
textToNormalize = ApplyTermReplacements(textToNormalize, replacementTerms);
var words = Regex.Split(textToNormalize, @"[^A-Za-z0-9]+")
.Where(word => !string.IsNullOrEmpty(word) && IsExcludedWord(excludeWords, word))
.Select(w => NormalizeWord(w, recognizedTerms))
.ToList();
var normalizedText = string.Join("-", words);
return normalizedText.Length > 50 ? normalizedText[..50] : normalizedText;
}
private static string ApplyTermReplacements(string textToNormalize, Dictionary<string, string>? replacementTerms)
{
if (replacementTerms != null)
{
foreach (var term in replacementTerms)
{
textToNormalize = Regex.Replace(textToNormalize, Regex.Escape(term.Key), term.Value, RegexOptions.IgnoreCase);
}
}
return textToNormalize;
}
private static string NormalizeWord(string word, HashSet<string> recognizedTerms)
{
var lowerWord = word.ToLowerInvariant();
var matchedTerm = recognizedTerms.FirstOrDefault(term => lowerWord.Contains(term));
if (matchedTerm != null)
{
string normalizedTerm = CapitalizeFirstLetter(matchedTerm);
bool isExactMatch = matchedTerm.Length == word.Length;
var replacement = isExactMatch ? normalizedTerm : $"-{normalizedTerm}";
word = word.Replace(matchedTerm, replacement);
}
return CapitalizeFirstLetter(word);
}
private static bool IsExcludedWord(HashSet<string>? excludeWords, string word)
{
return excludeWords is null || !excludeWords.Contains(word);
}
private static string CapitalizeFirstLetter(string word) =>
string.IsNullOrEmpty(word) ? word : char.ToUpper(word[0]) + word[1..].ToLower();
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\TrackingService.cs ===

﻿using System.Text;
using System.Text.Json;
using Configuration;
using LiveNetwork.Application.Services;
using LiveNetwork.Domain;
using Microsoft.Extensions.Logging;
namespace LiveNetwork.Infrastructure.Services
{
public class TrackingService : ITrackingService
{
private readonly ILogger<TrackingService> _logger;
private readonly ExecutionTracker _executionOptions;
private readonly SemaphoreSlim _fileLock = new(1, 1);
private readonly JsonSerializerOptions _jsonOptions;
public TrackingService(ILogger<TrackingService> logger, ExecutionTracker executionOptions)
{
_logger = logger ?? throw new ArgumentNullException(nameof(logger));
_executionOptions = executionOptions ?? throw new ArgumentNullException(nameof(executionOptions));
_jsonOptions = new JsonSerializerOptions
{
WriteIndented = true,
PropertyNameCaseInsensitive = true,
Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
};
}
public async Task<TrackingState> LoadStateAsync()
{
await _fileLock.WaitAsync();
try
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, $"page_tracking.json");
if (!File.Exists(filePath))
return new TrackingState();
await using var fileStream = File.OpenRead(filePath);
return await JsonSerializer.DeserializeAsync<TrackingState>(fileStream, _jsonOptions)
?? new TrackingState();
}
catch (Exception ex)
{
_logger.LogError(ex, "Error loading page state for search");
throw;
}
finally
{
_fileLock.Release();
}
}
public async Task<List<Uri>> LoadConnectionsFromSearchAsync(string searchUrlOutputFilePath)
{
try
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, searchUrlOutputFilePath);
if (!File.Exists(filePath))
{
return [];
}
await using var fileStream = File.OpenRead(filePath);
var connections = await JsonSerializer.DeserializeAsync<List<Uri>>(fileStream, _jsonOptions);
return connections ?? [];
}
catch (Exception ex)
{
_logger.LogError(ex, "Error loading search Url output filepath: {SearchText}", searchUrlOutputFilePath);
throw;
}
finally
{
}
}
public async Task SavePageStateAsync(TrackingState state)
{
if (state == null)
{
throw new ArgumentNullException(nameof(state));
}
await _fileLock.WaitAsync();
try
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, $"page_tracking.json");
await using var fileStream = File.Create(filePath);
await JsonSerializer.SerializeAsync(fileStream, state, _jsonOptions);
}
catch (Exception ex)
{
_logger.LogError(ex, "Error saving page state for search");
throw;
}
finally
{
_fileLock.Release();
}
}
public async Task SaveConnectionsAsync(List<Uri> connections, string searchUrlOutputFilePath)
{
if (connections == null)
{
throw new ArgumentNullException(nameof(connections));
}
await _fileLock.WaitAsync();
try
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, searchUrlOutputFilePath);
await using var fileStream = File.Create(filePath);
await JsonSerializer.SerializeAsync(fileStream, connections, _jsonOptions);
}
catch (Exception ex)
{
_logger.LogError(ex, "Error saving page state for search");
throw;
}
finally
{
_fileLock.Release();
}
}
public async Task<List<ConnectionInfo>> LoadCollectorConnectionsAsync(string collectorInfoOutputFilePath)
{
try
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, collectorInfoOutputFilePath);
if (!File.Exists(filePath))
{
return [];
}
await using var fileStream = File.OpenRead(filePath);
var connections = await JsonSerializer.DeserializeAsync<List<ConnectionInfo>>(fileStream, _jsonOptions);
return connections ?? [];
}
catch (Exception ex)
{
_logger.LogError(ex, "Error loading search Url output filepath: {SearchText}", collectorInfoOutputFilePath);
throw;
}
finally
{
}
}
public async Task<DateTime> LoadLastProcessedDateUtcAsync(string deltaFileName)
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, deltaFileName);
try
{
if (!File.Exists(filePath)) return DateTime.MinValue;
var text = await File.ReadAllTextAsync(filePath);
if (DateTime.TryParse(text, null, System.Globalization.DateTimeStyles.AdjustToUniversal | System.Globalization.DateTimeStyles.AssumeUniversal, out var dt))
return DateTime.SpecifyKind(dt, DateTimeKind.Utc);
return DateTime.MinValue;
}
catch (Exception ex)
{
_logger.LogWarning(ex, "Could not read last processed date at {Path}. Starting from MinValue.", filePath);
return DateTime.MinValue;
}
}
public async Task SaveLastProcessedDateUtcAsync(string deltaFileName, DateTime dtUtc)
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, deltaFileName);
try
{
var text = dtUtc.ToUniversalTime().ToString("O");
await File.WriteAllTextAsync(filePath, text, Encoding.UTF8);
_logger.LogDebug("Updated last processed date to {Date:o} at {Path}.", dtUtc, filePath);
}
catch (Exception ex)
{
_logger.LogError(ex, "Failed to write last processed date to {Path}.", filePath);
}
}
public async Task SaveCollectorConnectionsAsync(List<ConnectionInfo> connectionsInfo, string collectorInfoOutputFilePath)
{
if (connectionsInfo == null)
{
throw new ArgumentNullException(nameof(connectionsInfo));
}
await _fileLock.WaitAsync();
try
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, collectorInfoOutputFilePath);
await using var fileStream = File.Create(filePath);
await JsonSerializer.SerializeAsync(fileStream, connectionsInfo, _jsonOptions);
}
catch (Exception ex)
{
_logger.LogError(ex, "Error saving page state for search");
throw;
}
finally
{
_fileLock.Release();
}
}
private static readonly JsonSerializerOptions _jsonlOptions = new()
{
PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
WriteIndented = false
};
public async Task<ISet<string>> LoadProcessedUrlsAsync(string searchText)
{
var set = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
var file = Path.Combine(_executionOptions.ExecutionFolder, $"processed.jsonl");
if (!File.Exists(file))
{
return set;
}
await _fileLock.WaitAsync();
try
{
await foreach (var line in File.ReadLinesAsync(file))
{
if (string.IsNullOrWhiteSpace(line)) continue;
try
{
var rec = JsonSerializer.Deserialize<ProcessedProfileRecord>(line, _jsonlOptions);
if (!string.IsNullOrWhiteSpace(rec?.Url))
set.Add(rec!.Url);
}
catch
{
}
}
_logger.LogInformation("📖 [Tracking] Loaded {Count} processed URL(s) from {File}", set.Count, file);
}
finally
{
_fileLock.Release();
}
return set;
}
public async Task<string> SaveProfileJsonAsync(string searchText, LinkedInProfile profile, string folderPath)
{
Directory.CreateDirectory(folderPath);
var baseName = !string.IsNullOrWhiteSpace(profile.FullName)
? StringHelpers.NormalizeWords(profile.FullName)
: "profile";
var stamp = DateTime.UtcNow.ToString("yyyyMMdd_HHmmss");
var fileName = $"{baseName}_{stamp}.json";
var path = Path.Combine(folderPath, fileName);
await _fileLock.WaitAsync();
try
{
await File.WriteAllTextAsync(path,
JsonSerializer.Serialize(profile, new JsonSerializerOptions { WriteIndented = true }));
_logger.LogInformation("💾 [Tracking] Saved profile JSON: {Path}", path);
}
finally
{
_fileLock.Release();
}
return path;
}
public async Task<List<ConversationThread>> LoadConversationThreadAsync(string conversationOutputFilePath)
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, conversationOutputFilePath);
try
{
if (!File.Exists(filePath))
{
_logger.LogWarning(
"Conversation threads file not found at {FilePath}. Returning an empty list.",
filePath);
return [];
}
await using var fileStream = File.OpenRead(filePath);
var threads = await JsonSerializer.DeserializeAsync<List<ConversationThread>>(fileStream, _jsonOptions);
if (threads is null)
{
_logger.LogWarning(
"Conversation threads file at {FilePath} deserialized to null. Returning an empty list.",
filePath);
return [];
}
_logger.LogDebug(
"Loaded {Count} conversation threads from {FilePath}.",
threads.Count, filePath);
return threads;
}
catch (JsonException jex)
{
_logger.LogError(jex,
"Invalid JSON format in conversation threads file at {FilePath}. Returning an empty list.",
filePath);
return [];
}
catch (Exception ex)
{
_logger.LogError(ex,
"Unexpected error loading conversation threads from {FilePath}.",
filePath);
throw;
}
}
public async Task SaveConversationThreadAsync(List<ConversationThread> threads, string conversationOutputFilePath)
{
if (string.IsNullOrWhiteSpace(conversationOutputFilePath))
{
throw new ArgumentException(
"Conversation threads file path cannot be null or whitespace.",
nameof(conversationOutputFilePath));
}
var filePath = Path.Combine(_executionOptions.ExecutionFolder, conversationOutputFilePath);
await _fileLock.WaitAsync();
try
{
var directory = Path.GetDirectoryName(filePath);
if (!string.IsNullOrWhiteSpace(directory) && !Directory.Exists(directory))
{
Directory.CreateDirectory(directory);
_logger.LogInformation("Created directory for conversation threads at {Directory}.", directory);
}
var existed = File.Exists(filePath);
_logger.LogInformation(
existed
? "Overwriting conversation threads file at {FilePath}."
: "Creating new conversation threads file at {FilePath}.",
filePath);
await using var fileStream = File.Create(filePath);
var list = threads ?? [];
await JsonSerializer.SerializeAsync(fileStream, list, _jsonOptions);
_logger.LogInformation("Saved {Count} conversation threads to {FilePath}.", list.Count, filePath);
}
catch (Exception ex)
{
_logger.LogError(ex, "Error saving conversation threads to {FilePath}.", filePath);
throw;
}
finally
{
_fileLock.Release();
}
}
public async Task<List<LinkedInProfile>> LoadDetailedProfilesAsync(string detailedProfilesOutputFilePath)
{
try
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, detailedProfilesOutputFilePath);
if (!File.Exists(filePath))
{
_logger.LogWarning(
"⚠️ Detailed profiles file not found at path: {FilePath}. Returning an empty list.",
filePath);
return [];
}
await using var fileStream = File.OpenRead(filePath);
var profiles = await JsonSerializer.DeserializeAsync<List<LinkedInProfile>>(fileStream, _jsonOptions);
return profiles ?? [];
}
catch (JsonException jex)
{
_logger.LogError(jex,
"❌ Invalid JSON format in detailed profiles file: {FilePath}. Returning an empty list.",
detailedProfilesOutputFilePath);
return [];
}
catch (Exception ex)
{
_logger.LogError(ex,
"❌ Unexpected error loading detailed LinkedIn profiles from file: {FilePath}",
detailedProfilesOutputFilePath);
throw;
}
}
public async Task SaveLinkedInProfilesAsync(List<LinkedInProfile> detailed, string detailedProfilesOutputFilePath)
{
if (string.IsNullOrWhiteSpace(detailedProfilesOutputFilePath))
{
throw new ArgumentException(
"Detailed profiles file path cannot be null or whitespace",
nameof(detailedProfilesOutputFilePath));
}
await _fileLock.WaitAsync();
try
{
var filePath = Path.Combine(_executionOptions.ExecutionFolder, detailedProfilesOutputFilePath);
var directory = Path.GetDirectoryName(filePath);
if (!string.IsNullOrWhiteSpace(directory) && !Directory.Exists(directory))
{
Directory.CreateDirectory(directory);
_logger.LogInformation("📁 Created directory for detailed profiles: {Directory}", directory);
}
if (!File.Exists(filePath))
{
_logger.LogInformation("📄 Creating new detailed profiles file at: {FilePath}", filePath);
}
await using var fileStream = File.Create(filePath);
await JsonSerializer.SerializeAsync(fileStream, detailed ?? [], _jsonOptions);
_logger.LogInformation(
"✅ Successfully saved {Count} detailed LinkedIn profiles to file: {FilePath}",
detailed?.Count ?? 0, filePath);
}
catch (Exception ex)
{
_logger.LogError(ex,
"❌ Error saving detailed LinkedIn profiles to file: {FilePath}",
detailedProfilesOutputFilePath);
throw;
}
finally
{
_fileLock.Release();
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\Util.cs ===

﻿using Configuration;
using LiveNetwork.Application.Services;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
namespace LiveNetwork.Infrastructure.Services
{
public class Util : IUtil
{
private readonly IWebDriver _driver;
private readonly AppConfig _config;
private readonly ILogger<Util> _logger;
private readonly ExecutionTracker _executionOptions;
private const string FolderName = "Page";
private readonly ISecurityCheck _securityCheck;
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
private readonly ICaptureSnapshot _capture;
private readonly IDirectoryCheck _directoryCheck;
private readonly ITrackingService _trackingService;
public Util(IWebDriverFactory driverFactory,
AppConfig config,
ILogger<Util> logger,
ExecutionTracker executionOptions,
ICaptureSnapshot capture,
ISecurityCheck securityCheck,
IDirectoryCheck directoryCheck,
ITrackingService trackingService)
{
_driver = driverFactory.Create();
_config = config;
_logger = logger;
_executionOptions = executionOptions;
_capture = capture;
_securityCheck = securityCheck;
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(FolderPath);
_trackingService = trackingService;
}
public async Task<bool> WaitForPageLoadAsync(int timeoutInSeconds = 30)
{
try
{
string xpath = "
var nextButton = _driver.FindElements(By.XPath(xpath))
.FirstOrDefault(b => b.Enabled);
if (nextButton == null)
{
_logger.LogInformation($"⏹️ ID:{_executionOptions.TimeStamp} No 'Next' pagination button found. Pagination completed.");
return false;
}
_logger.LogDebug($"⏭️ ID:{_executionOptions.TimeStamp} Clicking 'Next' button to go to next results page...");
nextButton.Click();
await Task.Delay(3000);
if (_securityCheck.IsSecurityCheck())
{
await _securityCheck.HandleSecurityPage();
throw new InvalidOperationException(
$"❌ ID:{_executionOptions.TimeStamp} LinkedIn requires manual security verification. Please complete it in the browser.");
}
var container = _driver.FindElements(By.XPath("
if (container == null)
{
await _securityCheck.HandleUnexpectedPage();
throw new InvalidOperationException(
$"❌ ID:{_executionOptions.TimeStamp} Failed to load next page. Current URL: {_driver.Url}");
}
_logger.LogInformation($"✅ ID:{_executionOptions.TimeStamp} Successfully navigated to the next page.");
return true;
}
catch (Exception ex)
{
_logger.LogWarning(ex, $"⚠️ ID:{_executionOptions.TimeStamp} Exception during next-page navigation.");
return false;
}
}
public async Task<bool> NavigateToNextPageAsync()
{
try
{
string xpath = "
var nextButton = _driver.FindElements(By.XPath(xpath))
.FirstOrDefault(b => b.Enabled);
if (nextButton == null)
{
_logger.LogInformation($"⏹️ ID:{_executionOptions.TimeStamp} No 'Next' pagination button found. Pagination completed.");
return false;
}
_logger.LogDebug($"⏭️ ID:{_executionOptions.TimeStamp} Clicking 'Next' button to go to next results page...");
nextButton.Click();
await Task.Delay(3000);
if (_securityCheck.IsSecurityCheck())
{
await _securityCheck.HandleSecurityPage();
throw new InvalidOperationException(
$"❌ ID:{_executionOptions.TimeStamp} LinkedIn requires manual security verification. Please complete it in the browser.");
}
var container = _driver.FindElements(By.XPath("
if (container == null)
{
await _securityCheck.HandleUnexpectedPage();
throw new InvalidOperationException(
$"❌ ID:{_executionOptions.TimeStamp} Failed to load next page. Current URL: {_driver.Url}");
}
_logger.LogInformation($"✅ ID:{_executionOptions.TimeStamp} Successfully navigated to the next page.");
return true;
}
catch (Exception ex)
{
_logger.LogWarning(ex, $"⚠️ ID:{_executionOptions.TimeStamp} Exception during next-page navigation.");
return false;
}
}
public void ScrollMove()
{
var jsExecutor = (IJavaScriptExecutor)_driver;
const int stepSize = 500;
const int delayMs = 800;
long totalHeight = (long)jsExecutor.ExecuteScript("return document.body.scrollHeight");
long currentPosition = 0;
_logger.LogInformation("⬇️ ID:{TimeStamp} Starting step-by-step scroll on LinkedIn...", _executionOptions.TimeStamp);
while (currentPosition < totalHeight)
{
jsExecutor.ExecuteScript($"window.scrollTo(0, {currentPosition});");
Thread.Sleep(delayMs);
currentPosition += stepSize;
totalHeight = (long)jsExecutor.ExecuteScript("return document.body.scrollHeight");
_logger.LogDebug("🔁 ID:{TimeStamp} Scrolled to: {CurrentPosition}/{TotalHeight}", _executionOptions.TimeStamp, currentPosition, totalHeight);
}
_logger.LogInformation("✅ ID:{TimeStamp} Step-by-step scroll completed.", _executionOptions.TimeStamp);
}
public void ScrollToTop()
{
var jsExecutor = (IJavaScriptExecutor)_driver;
_logger.LogInformation("⬆️ ID:{TimeStamp} Scrolling to the top of the page...", _executionOptions.TimeStamp);
jsExecutor.ExecuteScript("window.scrollTo(0, 0);");
Thread.Sleep(1000);
_logger.LogInformation("✅ ID:{TimeStamp} Scroll to top completed.", _executionOptions.TimeStamp);
}
public void ScrollToExperienceSection()
{
try
{
_logger.LogInformation("🔍 ID:{TimeStamp} Scrolling to the 'Experience' section...", _executionOptions.TimeStamp);
var jsExecutor = (IJavaScriptExecutor)_driver;
var experienceSection = _driver.FindElement(By.CssSelector("section[data-section='experience']"));
jsExecutor.ExecuteScript("arguments[0].scrollIntoView({ behavior: 'smooth', block: 'start' });", experienceSection);
Thread.Sleep(1000);
_logger.LogInformation("✅ ID:{TimeStamp} Successfully scrolled to the 'Experience' section.", _executionOptions.TimeStamp);
}
catch (NoSuchElementException)
{
_logger.LogWarning("⚠️ ID:{TimeStamp} 'Experience' section not found using [data-section='experience'].", _executionOptions.TimeStamp);
}
catch (Exception ex)
{
_logger.LogError(ex, "❌ ID:{TimeStamp} Failed to scroll to the 'Experience' section.", _executionOptions.TimeStamp);
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\Implementation\CRUD\MessageInteraction\Create\MessageInteractionCreate.cs ===

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Infrastructure.Repositories.Abstract.CRUD.Create;
using LiveNetwork.Application.UseCases.CRUD.IMessageInteraction;
using LiveNetwork.Application.UseCases.CRUD.Profile.Query;
using Persistence.Context.Interface;
namespace LiveNetwork.Infrastructure.Implementation.CRUD.MessageInteraction.Create
{
using MessageInteraction = Domain.MessageInteraction;
public class MessageInteractionCreate(IUnitOfWork unitOfWork, IErrorHandler errorHandler, IErrorLogCreate errorLogCreate, IMessageInteractionRead profileRead) : CreateRepository<MessageInteraction>(unitOfWork), IMessageInteractionCreate
{
public async Task<Operation<MessageInteraction>> CreateMessageInteractionAsync(MessageInteraction entity)
{
try
{
await CreateEntity(entity);
await unitOfWork.CommitAsync();
return Operation<MessageInteraction>.Success(entity);
}
catch (Exception ex)
{
return errorHandler.Fail<MessageInteraction>(ex, errorLogCreate);
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\Implementation\CRUD\MessageInteraction\Query\ReadFileter\MessageInteractionRead.cs ===

﻿using System;
using System.Linq.Expressions;
using Application.Common.Pagination;
using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Infrastructure.Repositories.Abstract.CRUD.Query.Read;
using LiveNetwork.Application.UseCases.CRUD.Profile.Query;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Primitives;
using Persistence.Context.Implementation;
using Persistence.Context.Interface;
namespace LiveNetwork.Infrastructure.Implementation.CRUD.MessageInteraction.Query.ReadFilter
{
using static OpenQA.Selenium.PrintOptions;
using InteractionStatus = Domain.InteractionStatus;
using MessageInteraction = Domain.MessageInteraction;
public class MessageInteractionRead(
IUnitOfWork unitOfWork,
IErrorHandler errorHandler,
IMemoryCache cache,
IErrorLogCreate errorLogCreate)
: ReadRepository<MessageInteraction>(unitOfWork, q => q.OrderBy(i => i.CreatedAt).ThenBy(i => i.Id)), IMessageInteractionRead
{
private readonly IErrorHandler _errorHandler = errorHandler;
private readonly IMemoryCache _cache = cache;
private readonly Func<MessageInteraction, (DateTimeOffset Primary, string Secondary)> _cursorSelector
= i => (i.CreatedAt, i.Id);
private static CancellationTokenSource _interactionCacheTokenSource = new();
private static Expression<Func<MessageInteraction, bool>> BuildIdFilter(string id)   => i => i.Id == id;
public async Task<Operation<PagedResult<MessageInteraction>>> GetMessageInteractionPageAsync(string? id, string? cursor, int pageSize)
{
try
{
var cacheKey = $"MessageInteraction:{id}";
if (cache.TryGetValue(cacheKey, out PagedResult<MessageInteraction> cached))
{
return Operation<PagedResult<MessageInteraction>>.Success(cached);
}
var result = await GetPageAsync(BuildIdFilter(id), cursor, pageSize);
var pagedResult = result.Data;
var cacheOptions = new MemoryCacheEntryOptions()
.AddExpirationToken(new CancellationChangeToken(_interactionCacheTokenSource.Token))
.SetAbsoluteExpiration(TimeSpan.FromMinutes(5));
cache.Set(cacheKey, pagedResult, cacheOptions);
return Operation<PagedResult<MessageInteraction>>.Success(pagedResult);
}
catch (Exception ex)
{
return errorHandler.Fail<PagedResult<MessageInteraction>>(ex, errorLogCreate);
}
}
protected override IQueryable<MessageInteraction> ApplyCursorFilter(IQueryable<MessageInteraction> query, string cursor)
{
var parts = Uri.UnescapeDataString(cursor).Split('|', 2);
var createdStr = parts[0];
var lastId = parts.Length > 1 ? parts[1] : string.Empty;
DateTimeOffset createdCursor;
if (!DateTimeOffset.TryParse(createdStr, null, System.Globalization.DateTimeStyles.RoundtripKind, out createdCursor))
{
return query;
}
return query.Where(i =>
i.CreatedAt > createdCursor ||
(i.CreatedAt == createdCursor && DataContext.StringCompareOrdinal(i.Id, lastId) > 0)
);
}
protected override string? BuildNextCursor(List<MessageInteraction> items, int size)
{
if (items.Count <= size) return null;
var extra = items[size];
var (createdAt, id) = _cursorSelector(extra);
return Uri.EscapeDataString($"{createdAt:O}|{id}");
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\Implementation\CRUD\Profile\Create\ProfileCreate.cs ===

﻿using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Infrastructure.Repositories.Abstract.CRUD.Create;
using LiveNetwork.Application.UseCases.CRUD.Profile;
using Infrastructure.Repositories.Abstract.CRUD.Create;
using LiveNetwork.Application.UseCases.CRUD.Profile.Query;
using Persistence.Context.Interface;
namespace LiveNetwork.Infrastructure.Implementation.CRUD.Profile.Create
{
using Profile = Domain.Profile;
public class ProfileCreate(IUnitOfWork unitOfWork, IErrorHandler errorHandler, IErrorLogCreate errorLogCreate, IProfileRead profileRead) : CreateRepository<Profile>(unitOfWork), IProfileCreate
{
public async Task<Operation<Profile>> CreateProfileAsync(Profile entity)
{
try
{
await CreateEntity(entity);
await unitOfWork.CommitAsync();
return Operation<Profile>.Success(entity);
}
catch (Exception ex)
{
return errorHandler.Fail<Profile>(ex, errorLogCreate);
}
}
public async Task<Operation<List<Profile>>> CreateProfilesAsync(List<Profile> entities)
{
try
{
await CreateEntities(entities);
await unitOfWork.CommitAsync();
return Operation<List<Profile>>.Success(entities);
}
catch (Exception ex)
{
return errorHandler.Fail<List<Profile>>(ex, errorLogCreate);
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\Implementation\CRUD\Profile\Delete\ProfileDelete.cs ===

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Infrastructure.Repositories.Abstract.CRUD.Delete;
using LiveNetwork.Application.UseCases.CRUD.Profile;
using LiveNetwork.Application.UseCases.CRUD.Profile.Query;
using Persistence.Context.Interface;
namespace LiveNetwork.Infrastructure.Implementation.CRUD.Profile.Delete
{
using Profile = Domain.Profile;
public class ProfileDelete(IUnitOfWork unitOfWork, IErrorHandler errorHandler, IErrorLogCreate errorLogCreate, IProfileRead profileRead) : DeleteRepository<Profile>(unitOfWork), IProfileDelete
{
public async Task<Operation<bool>> DeleteProfileAsync(string id)
{
try
{
var result = await DeleteEntity(id);
await unitOfWork.CommitAsync();
return result;
}
catch (Exception ex)
{
return errorHandler.Fail<bool>(ex, errorLogCreate);
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\Implementation\CRUD\Profile\Query\ReadFilter\ProfileRead.cs ===

﻿using System.Linq.Expressions;
using System.Xml.Linq;
using Application.Common.Pagination;
using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Infrastructure.Repositories.Abstract.CRUD.Query.Read;
using LiveNetwork.Application.UseCases.CRUD.Profile.Query;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Primitives;
using Persistence.Context.Implementation;
using Persistence.Context.Interface;
namespace LiveNetwork.Infrastructure.Implementation.CRUD.Profile.Query.ReadFilter
{
using static OpenQA.Selenium.PrintOptions;
using Profile = Domain.Profile;
public class ProfileRead(IUnitOfWork unitOfWork, IErrorHandler errorHandler, IMemoryCache cache, IErrorLogCreate errorLogCreate) : ReadRepository<Profile>(unitOfWork, q => q.OrderBy(u => u.FullName!).ThenBy(u => u.Id)), IProfileRead
{
private readonly IErrorHandler errorHandler = errorHandler;
private readonly IMemoryCache cache = cache;
private readonly Func<Profile, (string Primary, string Secondary)> cursorSelector = u => (u.FullName!, u.Id);
private static CancellationTokenSource _ProfileCacheTokenSource = new();
public async Task<Operation<PagedResult<Profile>>> GetProfilesPageAsync(
string? id,
string? name,
string? cursor,
int pageSize)
{
try
{
var cacheKey = $"Profiles:{id}:{name}:{cursor}:{pageSize}";
if (cache.TryGetValue(cacheKey, out PagedResult<Profile> cached))
{
return Operation<PagedResult<Profile>>.Success(cached);
}
var result = await GetPageAsync(BuildFilter(id, name), cursor, pageSize);
var pagedResult = result.Data;
var cacheOptions = new MemoryCacheEntryOptions()
.AddExpirationToken(new CancellationChangeToken(_ProfileCacheTokenSource.Token))
.SetAbsoluteExpiration(TimeSpan.FromMinutes(5));
cache.Set(cacheKey, pagedResult, cacheOptions);
return Operation<PagedResult<Profile>>.Success(pagedResult);
}
catch (Exception ex)
{
return errorHandler.Fail<PagedResult<Profile>>(ex, errorLogCreate);
}
}
private static Expression<Func<Profile, bool>> BuildFilter(string? id, string? name)
{
if (ShouldFilterById(id))
{
return BuildIdFilter(id!);
}
if (ShouldFilterByName(name))
{
return BuildNameFilter(name!);
}
return ReturnDefaultFilter();
}
private static bool ShouldFilterById(string? id) => !string.IsNullOrWhiteSpace(id);
private static bool ShouldFilterByName(string? name) => !string.IsNullOrWhiteSpace(name);
private static Expression<Func<Profile, bool>> BuildIdFilter(string id) => u => u.Id == id;
private static Expression<Func<Profile, bool>> BuildNameFilter(string name) => u => EF.Functions.Like(u.FullName!, $"%{name}%");
private static Expression<Func<Profile, bool>> BuildUrlFilter(string url) => u => u.Url == new Uri(url);
private static Expression<Func<Profile, bool>> ReturnDefaultFilter() => u => true;
protected override IQueryable<Profile> ApplyCursorFilter(IQueryable<Profile> query, string cursor)
{
var parts = Uri.UnescapeDataString(cursor).Split('|', 2);
var name = parts[0];
var lastS = parts.Length > 1 ? parts[1] : string.Empty;
return query.Where
(
u => DataContext.StringCompareOrdinal(u.FullName!, name) > 0 || (u.FullName == name && DataContext.StringCompareOrdinal(u.Id, lastS) > 0)
);
}
protected override string? BuildNextCursor(List<Profile> items, int size)
{
if (items.Count <= size) return null;
var extra = items[size];
var (p, s) = cursorSelector(extra);
return Uri.EscapeDataString($"{p}|{s}");
}
public void InvalidateAllProfileCache()
{
_ProfileCacheTokenSource.Cancel();
_ProfileCacheTokenSource = new CancellationTokenSource();
}
public List<Profile> GetStreamProfiles(CancellationToken cancellationToken = default)
{
var result = GetAllMembers(cancellationToken).Result;
return [.. result.Data.Items];
}
public async Task<Operation<PagedResult<Profile>>> GetProfilesByUrlAsync(
string? url,
string? cursor,
int pageSize)
{
try
{
var cacheKey = $"Profiles:{url}:{cursor}:{pageSize}";
if (cache.TryGetValue(cacheKey, out PagedResult<Profile> cached))
{
return Operation<PagedResult<Profile>>.Success(cached);
}
var result = await GetPageAsync(BuildUrlFilter(url), cursor, pageSize);
var pagedResult = result.Data;
var cacheOptions = new MemoryCacheEntryOptions()
.AddExpirationToken(new CancellationChangeToken(_ProfileCacheTokenSource.Token))
.SetAbsoluteExpiration(TimeSpan.FromMinutes(5));
cache.Set(cacheKey, pagedResult, cacheOptions);
return Operation<PagedResult<Profile>>.Success(pagedResult);
}
catch (Exception ex)
{
return errorHandler.Fail<PagedResult<Profile>>(ex, errorLogCreate);
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\Implementation\CRUD\Profile\Update\ProfileUpdate.cs ===

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Application.Result;
using Application.UseCases.Repository.UseCases.CRUD;
using Infrastructure.Repositories.Abstract.CRUD.Update;
using LiveNetwork.Application.UseCases.CRUD.Profile;
using LiveNetwork.Application.UseCases.CRUD.Profile.Query;
using Persistence.Context.Interface;
namespace LiveNetwork.Infrastructure.Implementation.CRUD.Profile.Update
{
using Profile = Domain.Profile;
public class ProfileUpdate(
IUnitOfWork unitOfWork,
IErrorHandler errorHandler,
IErrorLogCreate errorLogCreate,
IProfileRead ProfileRead
) : UpdateRepository<Profile>(unitOfWork), IProfileUpdate
{
public override Profile ApplyUpdates(Profile modified, Profile unmodified)
{
unmodified.FullName = modified.FullName;
return unmodified;
}
public async Task<Operation<bool>> UpdateProfileAsync(Profile entity)
{
try
{
var result = await UpdateEntity(entity);
await unitOfWork.CommitAsync();
return result;
}
catch (Exception ex)
{
return errorHandler.Fail<bool>(ex, errorLogCreate);
}
}
}
}

=== FILE: F:\Members\LiveNetwork.Infrastructure\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\LiveNetwork.Infrastructure\obj\Debug\net8.0\LiveNetwork.Infrastructure.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("LiveNetwork.Infrastructure")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("LiveNetwork.Infrastructure")]
[assembly: System.Reflection.AssemblyTitleAttribute("LiveNetwork.Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\LiveNetwork.Infrastructure\obj\Debug\net8.0\LiveNetwork.Infrastructure.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\LiveNetwork.Infrastructure\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

=== FILE: F:\Members\LiveNetwork.Infrastructure\obj\Debug\net9.0\LiveNetwork.Infrastructure.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("LiveNetwork.Infrastructure")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+52b552e86a032e348ff28cdf7ab0b7a63f310b9a")]
[assembly: System.Reflection.AssemblyProductAttribute("LiveNetwork.Infrastructure")]
[assembly: System.Reflection.AssemblyTitleAttribute("LiveNetwork.Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\LiveNetwork.Infrastructure\obj\Debug\net9.0\LiveNetwork.Infrastructure.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Persistence\Context\Implementation\CommunicationTable.cs ===

﻿using LiveNetwork.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.CreateStructure.Constants.ColumnType;
using Persistence.CreateStructure.Constants;
namespace Persistence.Context.Implementation
{
public static class CommunicationTable
{
public static void Create(ModelBuilder modelBuilder, IColumnTypes columnTypes)
{
modelBuilder.Entity<Interaction>().ToTable(Database.Tables.Communications);
modelBuilder.Entity<Interaction>(entity =>
{
entity.HasKey(c => c.Id);
entity.Property(c => c.Id).HasColumnType(columnTypes.TypeVar);
entity.Property(c => c.Content).HasColumnType(columnTypes.TypeVar);
entity.Property(c => c.Experiment).HasColumnType(columnTypes.TypeVar);
entity.Property(c => c.FeedbackNotes).HasColumnType(columnTypes.TypeVar);
entity.Property(c => c.CreatedAt).HasColumnType(columnTypes.TypeDateTime);
entity.Property(c => c.UpdatedAt).HasColumnType(columnTypes.TypeDateTime);
entity.Property(e => e.ProfileId)
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.HasOne(e => e.Profile)
.WithMany(p => p.Communications)
.HasForeignKey(e => e.ProfileId)
.OnDelete(DeleteBehavior.Cascade);
});
modelBuilder.Entity<ConnectionInvite>(entity =>
{
entity.Property(i => i.Status)
.HasConversion<string>()
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.Property(i => i.SentAt)
.HasColumnType(columnTypes.TypeDateTime);
entity.Property(i => i.CompletedAt)
.HasColumnType(columnTypes.TypeDateTime);
});
modelBuilder.Entity<MessageInteraction>(entity =>
{
entity.Property(m => m.Status)
.HasConversion<string>()
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.Property<DateTimeOffset?>("DeliveredAt").HasColumnType(columnTypes.TypeDateTime);
entity.Property<DateTimeOffset?>("ReadAt").HasColumnType(columnTypes.TypeDateTime);
});
}
}
}

=== FILE: F:\Members\Persistence\Context\Implementation\DataContext.cs ===

﻿using Autodesk.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.Context.Interface;
using Persistence.CreateStructure.Constants.ColumnType;
namespace Persistence.Context.Implementation
{
public class DataContext(DbContextOptions options, IColumnTypes columnTypes) : DbContext(options), IDataContext
{
protected readonly IColumnTypes _columnTypes = columnTypes;
public virtual bool Initialize()
{
try
{
Database.Migrate();
return true;
}
catch (Exception ex)
{
Console.WriteLine("An error occurred while initializing the database:");
Console.WriteLine(ex.Message);
Console.WriteLine(ex.StackTrace);
return false;
}
}
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
base.OnModelCreating(modelBuilder);
ProfileTable.Create(modelBuilder, _columnTypes);
ExperienceTable.Create(modelBuilder, _columnTypes);
ExperienceRoleTable.Create(modelBuilder, _columnTypes);
EducationTable.Create(modelBuilder, _columnTypes);
CommunicationTable.Create(modelBuilder, _columnTypes);
UserTable.Create(modelBuilder, _columnTypes);
ProductTable.Create(modelBuilder, _columnTypes);
InvoiceTable.Create(modelBuilder, _columnTypes);
ErrorLogTable.Create(modelBuilder, _columnTypes);
modelBuilder.HasDbFunction(typeof(DataContext)
.GetMethod(nameof(StringCompareOrdinal), [typeof(string), typeof(string)])!)
.HasName("StringCompareOrdinal");
}
public static int StringCompareOrdinal(string a, string b) => throw new NotSupportedException();
}
}

=== FILE: F:\Members\Persistence\Context\Implementation\EducationTable.cs ===

﻿using LiveNetwork.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.CreateStructure.Constants;
using Persistence.CreateStructure.Constants.ColumnType;
namespace Persistence.Context.Implementation
{
public static class EducationTable
{
public static void Create(ModelBuilder modelBuilder, IColumnTypes columnTypes)
{
modelBuilder.Entity<Education>().ToTable(Database.Tables.Educations);
modelBuilder.Entity<Education>(entity =>
{
entity.HasKey(ed => ed.Id);
entity.Property(ed => ed.Id).HasColumnType(columnTypes.TypeVar);
entity.Property(ed => ed.School).HasColumnType(columnTypes.TypeVar).IsRequired();
entity.Property(ed => ed.SchoolUrl).HasColumnType(columnTypes.TypeVar);
entity.Property(ed => ed.LogoUrl).HasColumnType(columnTypes.TypeVar);
entity.Property(ed => ed.LogoAlt).HasColumnType(columnTypes.TypeVar);
entity.Property(ed => ed.Degree).HasColumnType(columnTypes.TypeVar);
entity.Property(ed => ed.Field).HasColumnType(columnTypes.TypeVar);
entity.Property(ed => ed.DateRange).HasColumnType(columnTypes.TypeVar);
entity.Property(ed => ed.Description).HasColumnType(columnTypes.TypeVar);
entity.Property(e => e.ProfileId)
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.HasOne(e => e.Profile)
.WithMany(p => p.Educations)
.HasForeignKey(e => e.ProfileId)
.OnDelete(DeleteBehavior.Cascade);
entity.HasIndex(e => e.ProfileId)
.HasDatabaseName(Database.Index.IndexEducationByProfile);
});
}
}
}

=== FILE: F:\Members\Persistence\Context\Implementation\ErrorLogTable.cs ===

﻿using Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.CreateStructure.Constants.ColumnType;
using Persistence.CreateStructure.Constants;
namespace Persistence.Context.Implementation
{
public static class ErrorLogTable
{
public static void Create(ModelBuilder modelBuilder, IColumnTypes columnTypes)
{
modelBuilder.Entity<ErrorLog>().ToTable(Database.Tables.ErrorLogs);
modelBuilder.Entity<ErrorLog>(entity =>
{
entity.Property(i => i.Id)
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.HasKey(i => i.Id);
entity.Property(i => i.Timestamp)
.HasColumnType(columnTypes.TypeTime)
.IsRequired();
entity.Property(i => i.Level)
.HasColumnType(columnTypes.TypeVar150)
.HasMaxLength(150)
.IsRequired();
entity.Property(i => i.Message)
.HasColumnType(columnTypes.TypeVar150)
.HasMaxLength(150)
.IsRequired();
entity.Property(i => i.ExceptionType)
.HasColumnType(columnTypes.TypeVar150)
.HasMaxLength(150)
.IsRequired();
entity.Property(i => i.StackTrace)
.HasColumnType(columnTypes.TypeVar150)
.HasMaxLength(150)
.IsRequired();
entity.Property(i => i.Context)
.HasColumnType(columnTypes.TypeVar150)
.HasMaxLength(150)
.IsRequired(); ;
});
}
}
}

=== FILE: F:\Members\Persistence\Context\Implementation\ExperienceRoleTable.cs ===

﻿using LiveNetwork.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.CreateStructure.Constants;
using Persistence.CreateStructure.Constants.ColumnType;
namespace Persistence.Context.Implementation
{
public static class ExperienceRoleTable
{
public static void Create(ModelBuilder modelBuilder, IColumnTypes columnTypes)
{
modelBuilder.Entity<ExperienceRole>().ToTable(Database.Tables.ExperienceRoles);
modelBuilder.Entity<ExperienceRole>(entity =>
{
entity.HasKey(r => r.Id);
entity.Property(r => r.ExperienceId)
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.Property(r => r.Id).HasColumnType(columnTypes.TypeVar);
entity.HasOne(r => r.Experience)
.WithMany(e => e.Roles)
.HasForeignKey(r => r.ExperienceId)
.OnDelete(DeleteBehavior.Cascade);
entity.Property(r => r.Title).HasColumnType(columnTypes.TypeVar).IsRequired();
entity.Property(r => r.DateRange).HasColumnType(columnTypes.TypeVar).IsRequired();
entity.Property(r => r.WorkArrangement).HasColumnType(columnTypes.TypeVar);
entity.Property(r => r.Description).HasColumnType(columnTypes.TypeVar);
entity.Property(r => r.ContextualSkills).HasColumnType(columnTypes.TypeVar);
entity.HasIndex(r => r.ExperienceId)
.HasDatabaseName(Database.Index.IndexRoleByExperience);
});
}
}
}

=== FILE: F:\Members\Persistence\Context\Implementation\ExperienceTable.cs ===

﻿using LiveNetwork.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.CreateStructure.Constants;
using Persistence.CreateStructure.Constants.ColumnType;
namespace Persistence.Context.Implementation
{
public static class ExperienceTable
{
public static void Create(ModelBuilder modelBuilder, IColumnTypes columnTypes)
{
modelBuilder.Entity<Experience>().ToTable(Database.Tables.Experiences);
modelBuilder.Entity<Experience>(entity =>
{
entity.HasKey(e => e.Id);
entity.Property(e => e.Company).HasColumnType(columnTypes.TypeVar).IsRequired();
entity.Property(e => e.CompanyUrl).HasColumnType(columnTypes.TypeVar);
entity.Property(e => e.CompanyLogoUrl).HasColumnType(columnTypes.TypeVar);
entity.Property(e => e.CompanyLogoAlt).HasColumnType(columnTypes.TypeVar);
entity.Property(e => e.EmploymentSummary).HasColumnType(columnTypes.TypeVar);
entity.Property(e => e.Location).HasColumnType(columnTypes.TypeVar);
entity.Property(e => e.ProfileId)
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.HasOne(e => e.Profile)
.WithMany(p => p.Experiences)
.HasForeignKey(e => e.ProfileId)
.OnDelete(DeleteBehavior.Cascade);
entity.HasMany(e => e.Roles)
.WithOne(r => r.Experience)
.HasForeignKey(r => r.ExperienceId)
.OnDelete(DeleteBehavior.Cascade);
entity.HasIndex(e => e.ProfileId)
.HasDatabaseName(Database.Index.IndexExperienceByProfile);
});
}
}
}

=== FILE: F:\Members\Persistence\Context\Implementation\InvoiceTable.cs ===

﻿using Autodesk.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.CreateStructure.Constants.ColumnType;
using Persistence.CreateStructure.Constants;
namespace Persistence.Context.Implementation
{
public static class InvoiceTable
{
public static void Create(ModelBuilder modelBuilder, IColumnTypes columnTypes)
{
modelBuilder.Entity<Invoice>().ToTable(Database.Tables.Invoices);
modelBuilder.Entity<Invoice>(entity =>
{
entity.Property(i => i.Id)
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.HasKey(i => i.Id);
entity.Property(i => i.InvoiceNumber)
.HasColumnType(columnTypes.TypeVar)
.HasMaxLength(50)
.IsRequired();
entity.Property(i => i.InvoiceDate)
.HasColumnType(columnTypes.TypeTime)
.IsRequired();
entity.Property(i => i.CustomerName)
.HasColumnType(columnTypes.TypeVar150)
.HasMaxLength(150)
.IsRequired();
entity.Property(i => i.TotalAmount)
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.HasMany(i => i.Products)
.WithOne()
.HasForeignKey("InvoiceId")
.IsRequired(false);
});
}
}
}

=== FILE: F:\Members\Persistence\Context\Implementation\ProductTable.cs ===

﻿using Autodesk.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.CreateStructure.Constants.ColumnType;
using Persistence.CreateStructure.Constants;
namespace Persistence.Context.Implementation
{
public static class ProductTable
{
public static void Create(ModelBuilder modelBuilder, IColumnTypes columnTypes)
{
modelBuilder.Entity<Product>().ToTable(Database.Tables.Products);
modelBuilder.Entity<Product>(entity =>
{
entity.Property(p => p.Id)
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.HasKey(p => p.Id);
entity.Property(p => p.Name)
.HasColumnType(columnTypes.TypeVar)
.HasMaxLength(100)
.IsRequired();
entity.Property(p => p.Description)
.HasColumnType(columnTypes.TypeVar150)
.HasMaxLength(500);
entity.Property(p => p.Price)
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.Property<string>("InvoiceId")
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.HasIndex("InvoiceId");
entity.HasOne<Invoice>()
.WithMany(i => i.Products)
.HasForeignKey("InvoiceId")
.OnDelete(DeleteBehavior.Cascade);
});
}
}
}

=== FILE: F:\Members\Persistence\Context\Implementation\ProfileTable.cs ===

﻿using LiveNetwork.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.CreateStructure.Constants;
using Persistence.CreateStructure.Constants.ColumnType;
namespace Persistence.Context.Implementation
{
public static class ProfileTable
{
public static void Create(ModelBuilder modelBuilder, IColumnTypes columnTypes)
{
modelBuilder.Entity<Profile>().ToTable(Database.Tables.Profiles);
modelBuilder.Entity<Profile>(entity =>
{
entity.HasKey(p => p.Id);
entity.Property(p => p.Id).HasColumnType(columnTypes.TypeVar);
entity.Property(p => p.FullName).HasColumnType(columnTypes.TypeVar).IsRequired();
entity.Property(p => p.Headline).HasColumnType(columnTypes.TypeVar);
entity.Property(p => p.Location).HasColumnType(columnTypes.TypeVar);
entity.Property(p => p.CurrentCompany).HasColumnType(columnTypes.TypeVar);
entity.Property(p => p.ProfileImageUrl).HasColumnType(columnTypes.TypeVar);
entity.Property(p => p.BackgroundImageUrl).HasColumnType(columnTypes.TypeVar);
entity.Property(p => p.ConnectionDegree).HasColumnType(columnTypes.TypeVar);
entity.Property(p => p.Connections).HasColumnType(columnTypes.TypeVar);
entity.Property(p => p.Followers).HasColumnType(columnTypes.TypeVar);
entity.Property(p => p.AboutText).HasColumnType(columnTypes.TypeVar);
entity.Property(p => p.Url).HasConversion(
v => v.ToString(),
v => new Uri(v))
.HasColumnType(columnTypes.TypeVar)
.IsRequired();
entity.HasMany(p => p.Experiences)
.WithOne()
.HasForeignKey("ProfileId")
.OnDelete(DeleteBehavior.Cascade);
entity.HasMany(p => p.Educations)
.WithOne()
.HasForeignKey("ProfileId")
.OnDelete(DeleteBehavior.Cascade);
entity.HasMany(p => p.Communications)
.WithOne()
.HasForeignKey("ProfileId")
.OnDelete(DeleteBehavior.Cascade);
entity.HasIndex(p => p.FullName, Database.Index.IndexProfileFullName);
entity.HasIndex(p => p.Url, Database.Index.IndexProfileUrl).IsUnique();
});
}
}
}

=== FILE: F:\Members\Persistence\Context\Implementation\UnitOfWork.cs ===

﻿using Microsoft.EntityFrameworkCore.Storage;
using Persistence.Context.Interface;
namespace Persistence.Context.Implementation
{
public class UnitOfWork(DataContext context) : IUnitOfWork
{
private readonly DataContext _context = context;
public DataContext Context => _context;
public async Task<int> CommitAsync()
=> await Context.SaveChangesAsync();
public async Task<IDbContextTransaction> BeginTransactionAsync()
=> await Context.Database.BeginTransactionAsync();
public async Task CommitTransactionAsync(IDbContextTransaction tx)
{
await Context.SaveChangesAsync();
await tx.CommitAsync();
}
public async Task RollbackAsync(IDbContextTransaction tx)
=> await tx.RollbackAsync();
public void Dispose()
=> Context.Dispose();
}
}

=== FILE: F:\Members\Persistence\Context\Implementation\UserTable.cs ===

﻿using Autodesk.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.CreateStructure.Constants;
using Persistence.CreateStructure.Constants.ColumnType;
namespace Persistence.Context.Implementation
{
public static class UserTable
{
public static void Create(ModelBuilder modelBuilder, IColumnTypes columnTypes)
{
modelBuilder.Entity<User>().ToTable(Database.Tables.Users);
modelBuilder.Entity<User>(entity =>
{
entity.Property(u => u.Id).HasColumnType(columnTypes.TypeVar);
entity.HasKey(u => u.Id);
entity.Property(u => u.Email).HasColumnType(columnTypes.TypeVar).IsRequired();
entity.HasIndex(u => u.Email, Database.Index.IndexEmail).IsUnique(true);
entity.Property(u => u.Active).HasColumnType(columnTypes.TypeBool).IsRequired();
});
}
}
}

=== FILE: F:\Members\Persistence\Context\Interceptors\SqliteFunctionInterceptor.cs ===

﻿using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore.Diagnostics;
using System.Data.Common;
namespace Persistence.Context.Interceptors
{
public class SqliteFunctionInterceptor : DbConnectionInterceptor
{
public override void ConnectionOpened(
DbConnection connection,
ConnectionEndEventData eventData)
{
if (connection is SqliteConnection sqlite)
RegisterFunction(sqlite);
base.ConnectionOpened(connection, eventData);
}
public override async Task ConnectionOpenedAsync(
DbConnection connection,
ConnectionEndEventData eventData,
CancellationToken cancellationToken = default)
{
if (connection is SqliteConnection sqlite)
RegisterFunction(sqlite);
await base.ConnectionOpenedAsync(connection, eventData, cancellationToken);
}
private static void RegisterFunction(SqliteConnection sqlite)
{
sqlite.CreateFunction<string, string, int>(
"StringCompareOrdinal",
(a, b) => a == b ? 0
: string.Compare(a, b, StringComparison.Ordinal) > 0 ? 1
: -1
);
}
}
}

=== FILE: F:\Members\Persistence\Context\Interface\IDataContext.cs ===

﻿namespace Persistence.Context.Interface
{
public interface IDataContext
{
bool Initialize();
}
}

=== FILE: F:\Members\Persistence\Context\Interface\IUnitOfWork.cs ===

﻿using Microsoft.EntityFrameworkCore.Storage;
using Persistence.Context.Implementation;
namespace Persistence.Context.Interface
{
public interface IUnitOfWork
{
Task<int> CommitAsync();
Task<IDbContextTransaction> BeginTransactionAsync();
Task CommitTransactionAsync(IDbContextTransaction tx);
Task RollbackAsync(IDbContextTransaction tx);
DataContext Context { get; }
}
}

=== FILE: F:\Members\Persistence\CreateStructure\Constants\Database.cs ===

﻿namespace Persistence.CreateStructure.Constants
{
public static class Database
{
public static class Tables
{
public const string Users = "Users";
public const string Invoices = "Invoices";
public const string Products = "Products";
public const string ErrorLogs = "ErrorLogs";
public const string Profiles = "Profiles";
public const string Experiences = "Experiences";
public const string ExperienceRoles = "ExperienceRoles";
public const string Educations = "Educations";
public const string Communications = "Communications";
}
public static class Index
{
public const string IndexEmail = "UC_Users_Email";
public const string IndexProfileFullName = "IX_Profiles_FullName";
public const string IndexProfileUrl = "UC_Profiles_Url";
public const string IndexExperienceByProfile = "IX_Experiences_ProfileId";
public const string IndexRoleByExperience = "IX_ExperienceRoles_ExperienceId";
public const string IndexEducationByProfile = "IX_Educations_ProfileId";
public const string IndexCommunicationByProfile = "IX_Communications_ProfileId";
}
}
}

=== FILE: F:\Members\Persistence\CreateStructure\Constants\ColumnType\IColumnTypes.cs ===

﻿namespace Persistence.CreateStructure.Constants.ColumnType
{
public interface IColumnTypes
{
string TypeBool { get; }
string TypeTime { get; }
string TypeDateTime { get; }
string TypeDateTimeOffset { get; }
string TypeVar { get; }
string TypeVar50 { get; }
string TypeVar150 { get; }
string TypeBlob { get; }
string TypeVar64 { get; }
string Integer { get; }
string Long { get; }
string Strategy { get; }
object? SqlStrategy { get; }
string Name { get; }
object? Value { get; }
}
}

=== FILE: F:\Members\Persistence\CreateStructure\Constants\ColumnType\Database\SQLite.cs ===

﻿namespace Persistence.CreateStructure.Constants.ColumnType.Database
{
public class SQLite : IColumnTypes
{
public string Integer => "INTEGER";
public string Long => "INTEGER";
public string TypeBool => "INTEGER";
public string TypeTime => "TEXT";
public string TypeDateTime => "TEXT";
public string TypeDateTimeOffset => "TEXT";
public string TypeVar50 => "TEXT";
public string TypeVar => "TEXT";
public string TypeVar150 => "TEXT";
public string TypeVar64 => "TEXT";
public string TypeBlob => "BLOB";
public string Strategy => "Sqlite:Autoincrement";
public object? SqlStrategy => true;
public string Name => string.Empty;
public object? Value => null;
}
}

=== FILE: F:\Members\Persistence\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Persistence\obj\Debug\net8.0\Persistence.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Persistence")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("Persistence")]
[assembly: System.Reflection.AssemblyTitleAttribute("Persistence")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Persistence\obj\Debug\net8.0\Persistence.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

=== FILE: F:\Members\Persistence\Repositories\EntityChecker.cs ===

﻿using Domain.Interfaces.Entity;
using Microsoft.EntityFrameworkCore;
using Persistence.Context.Interface;
namespace Persistence.Repositories
{
public abstract class EntityChecker<T>(IUnitOfWork unitOfWork) : Read<T>(unitOfWork) where T : class, IEntity
{
protected async Task<T?> HasEntity(string id)
{
var results = await ReadFilter(e => e.Id == id);
var entity = results?.FirstOrDefault();
return entity;
}
protected async Task<T?> HasId(string id)
{
if (string.IsNullOrWhiteSpace(id))
{
return null;
}
if (!GuidValidator.HasGuid(id))
{
return null;
}
return await HasEntity(id);
}
private class GuidValidator
{
public static bool HasGuid(string id) => Guid.TryParse(id, out _);
}
}
}

=== FILE: F:\Members\Persistence\Repositories\Read.cs ===

﻿using Domain.Interfaces.Entity;
using Persistence.Context.Interface;
using System.Linq.Expressions;
namespace Persistence.Repositories
{
public abstract class Read<T>(IUnitOfWork unitOfWork) : Repository<T>(unitOfWork) where T : class, IEntity
{
protected Task<IQueryable<T>> ReadFilter(Expression<Func<T, bool>> predicate)
{
return Task.FromResult(_dbSet.Where(predicate));
}
}
}

=== FILE: F:\Members\Persistence\Repositories\Repository.cs ===

﻿using Microsoft.EntityFrameworkCore;
using Persistence.Context.Interface;
namespace Persistence.Repositories
{
public abstract class Repository<T>(IUnitOfWork unitOfWork) where T : class
{
protected readonly DbSet<T> _dbSet = unitOfWork.Context.Set<T>();
}
}

=== FILE: F:\Members\Persistence\Repositories\RepositoryCreate.cs ===

﻿using Domain.Interfaces.Entity;
using Persistence.Context.Interface;
namespace Persistence.Repositories
{
public abstract class RepositoryCreate<T>(IUnitOfWork unitOfWork)
: Read<T>(unitOfWork) where T : class, IEntity
{
protected async Task Create(T entity)
{
await _dbSet.AddAsync(entity);
}
protected async Task CreateRange(List<T> entities)
{
await _dbSet.AddRangeAsync(entities);
}
}
}

=== FILE: F:\Members\Persistence\Repositories\RepositoryDelete.cs ===

﻿using Domain.Interfaces.Entity;
using Microsoft.EntityFrameworkCore;
using Persistence.Context.Interface;
namespace Persistence.Repositories
{
public abstract class RepositoryDelete<T>(IUnitOfWork unitOfWork)
: EntityChecker<T>(unitOfWork) where T : class, IEntity
{
protected void Delete(T entity)
{
_dbSet.Remove(entity);
}
}
}

=== FILE: F:\Members\Persistence\Repositories\RepositoryUpdate.cs ===

﻿using Domain.Interfaces.Entity;
using Microsoft.EntityFrameworkCore;
using Persistence.Context.Interface;
namespace Persistence.Repositories
{
public abstract class RepositoryUpdate<T>(IUnitOfWork unitOfWork)
: EntityChecker<T>(unitOfWork) where T : class, IEntity
{
protected void Update(T entity)
{
unitOfWork.Context.Entry(entity).State = EntityState.Modified;
}
}
}

=== FILE: F:\Members\Persistence.Test\Context\Implementation\DataContextTests.cs ===

﻿using System;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using Persistence.Context.Implementation;
using Persistence.CreateStructure.Constants.ColumnType.Database;
using Persistence.Context.Interface;
using Autodesk.Domain;
using Xunit;
namespace Persistence.Context.Implementation.Tests
{
public class DataContextTests
{
private static ModelBuilder CreateModelBuilder()
{
var conventions = new ConventionSet();
return new ModelBuilder(conventions);
}
[Fact]
public void OnModelCreating_ConfiguresAllEntitiesWithCorrectTableNames()
{
var modelBuilder = CreateModelBuilder();
var options = new DbContextOptionsBuilder<DataContext>()
.UseInMemoryDatabase("TestDb")
.Options;
IDataContext ctx = new DataContext(options, new SQLite());
typeof(DataContext)
.GetMethod("OnModelCreating", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic)!
.Invoke(ctx, new object[] { modelBuilder });
var model = modelBuilder.Model;
var userEntity = model.FindEntityType(typeof(User));
var productEntity = model.FindEntityType(typeof(Product));
var invoiceEntity = model.FindEntityType(typeof(Invoice));
var errorLogEntity = model.FindEntityType(typeof(Domain.ErrorLog));
Assert.NotNull(userEntity);
Assert.Equal("Users", userEntity.GetTableName());
Assert.NotNull(productEntity);
Assert.Equal("Products", productEntity.GetTableName());
Assert.NotNull(invoiceEntity);
Assert.Equal("Invoices", invoiceEntity.GetTableName());
Assert.NotNull(errorLogEntity);
Assert.Equal("ErrorLogs", errorLogEntity.GetTableName());
}
[Fact]
public void OnModelCreating_RegistersStringCompareOrdinalDbFunction()
{
var modelBuilder = CreateModelBuilder();
var options = new DbContextOptionsBuilder<DataContext>()
.UseInMemoryDatabase("TestDb2")
.Options;
IDataContext ctx = new DataContext(options, new SQLite());
typeof(DataContext)
.GetMethod("OnModelCreating", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic)!
.Invoke(ctx, new object[] { modelBuilder });
var model = modelBuilder.Model;
var dbFunction = model
.GetDbFunctions()
.FirstOrDefault(f => f.Name.Equals("StringCompareOrdinal", StringComparison.Ordinal));
Assert.NotNull(dbFunction);
}
[Fact]
public void Initialize_WithInMemoryProvider_ReturnsFalse()
{
var options = new DbContextOptionsBuilder<DataContext>()
.UseInMemoryDatabase("TestDb3")
.Options;
var ctx = new DataContext(options, new SQLite());
var result = ctx.Initialize();
Assert.False(result);
}
[Fact]
public void Initialize_WithSqliteInMemoryProvider_ReturnsTrue()
{
var connection = new Microsoft.Data.Sqlite.SqliteConnection("Data Source=:memory:");
connection.Open();
var options = new DbContextOptionsBuilder<DataContext>()
.UseSqlite(connection)
.Options;
var ctx = new DataContext(options, new SQLite());
var result = ctx.Initialize();
Assert.True(result);
connection.Close();
}
[Fact]
public void StringCompareOrdinal_AlwaysThrowsNotSupportedException()
{
Assert.Throws<NotSupportedException>(() => DataContext.StringCompareOrdinal("a", "b"));
}
}
}

=== FILE: F:\Members\Persistence.Test\Context\Implementation\ErrorLogTableTests.cs ===

﻿using System.Linq;
using Autodesk.Domain;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using Persistence.Context.Implementation;
using Persistence.CreateStructure.Constants;
using Persistence.CreateStructure.Constants.ColumnType.Database;
using Xunit;
namespace Persistence.Context.Implementation.Tests
{
public class ErrorLogTableTests
{
private static ModelBuilder CreateModelBuilder()
{
var conventions = new ConventionSet();
return new ModelBuilder(conventions);
}
[Fact]
public void Create_ConfiguresErrorLogEntityCorrectly()
{
var modelBuilder = CreateModelBuilder();
var columnTypes = new SQLite();
ErrorLogTable.Create(modelBuilder, columnTypes);
var model = modelBuilder.Model;
var entityType = model.FindEntityType(typeof(ErrorLog));
Assert.NotNull(entityType);
Assert.Equal(Database.Tables.ErrorLogs, entityType.GetTableName());
var pk = entityType.FindPrimaryKey();
Assert.NotNull(pk);
Assert.Single(pk.Properties);
Assert.Equal(nameof(ErrorLog.Id), pk.Properties[0].Name);
var idProp = entityType.FindProperty(nameof(ErrorLog.Id));
Assert.Equal(columnTypes.TypeVar, idProp.GetColumnType());
Assert.False(idProp.IsNullable);
var tsProp = entityType.FindProperty(nameof(ErrorLog.Timestamp));
Assert.Equal(columnTypes.TypeTime, tsProp.GetColumnType());
Assert.False(tsProp.IsNullable);
var stringProps = new[]
{
nameof(ErrorLog.Level),
nameof(ErrorLog.Message),
nameof(ErrorLog.ExceptionType),
nameof(ErrorLog.StackTrace),
nameof(ErrorLog.Context)
};
foreach (var propName in stringProps)
{
var prop = entityType.FindProperty(propName);
Assert.Equal(columnTypes.TypeVar150, prop.GetColumnType());
Assert.False(prop.IsNullable);
Assert.Equal(150, prop.GetMaxLength());
}
}
}
}

=== FILE: F:\Members\Persistence.Test\Context\Implementation\InvoiceTableTests.cs ===

﻿using System;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using Persistence.Context.Implementation;
using Persistence.CreateStructure.Constants;
using Persistence.CreateStructure.Constants.ColumnType.Database;
using Autodesk.Domain;
using Xunit;
namespace Persistence.Context.Implementation.Tests
{
public class InvoiceTableTests
{
private static ModelBuilder CreateModelBuilder()
{
var conventions = new ConventionSet();
return new ModelBuilder(conventions);
}
[Fact]
public void Create_ConfiguresInvoiceEntityCorrectly()
{
var modelBuilder = CreateModelBuilder();
var columnTypes = new SQLite();
InvoiceTable.Create(modelBuilder, columnTypes);
var model = modelBuilder.Model;
var invoiceEntity = model.FindEntityType(typeof(Invoice));
Assert.NotNull(invoiceEntity);
Assert.Equal(Database.Tables.Invoices, invoiceEntity.GetTableName());
var idProp = invoiceEntity.FindProperty(nameof(Invoice.Id));
Assert.Equal(columnTypes.TypeVar, idProp.GetColumnType());
Assert.False(idProp.IsNullable);
Assert.Equal(nameof(Invoice.Id), invoiceEntity.FindPrimaryKey().Properties.Single().Name);
var numProp = invoiceEntity.FindProperty(nameof(Invoice.InvoiceNumber));
Assert.Equal(columnTypes.TypeVar, numProp.GetColumnType());
Assert.False(numProp.IsNullable);
Assert.Equal(50, numProp.GetMaxLength());
var dateProp = invoiceEntity.FindProperty(nameof(Invoice.InvoiceDate));
Assert.Equal(columnTypes.TypeTime, dateProp.GetColumnType());
Assert.False(dateProp.IsNullable);
var nameProp = invoiceEntity.FindProperty(nameof(Invoice.CustomerName));
Assert.Equal(columnTypes.TypeVar150, nameProp.GetColumnType());
Assert.False(nameProp.IsNullable);
Assert.Equal(150, nameProp.GetMaxLength());
var amtProp = invoiceEntity.FindProperty(nameof(Invoice.TotalAmount));
Assert.Equal(columnTypes.TypeVar, amtProp.GetColumnType());
Assert.False(amtProp.IsNullable);
}
[Fact]
public void Create_SetsUpProductsNavigationAndForeignKey()
{
var modelBuilder = CreateModelBuilder();
var columnTypes = new SQLite();
InvoiceTable.Create(modelBuilder, columnTypes);
var model = modelBuilder.Model;
var invoiceEntity = model.FindEntityType(typeof(Invoice));
var navigation = invoiceEntity.GetNavigations()
.SingleOrDefault(n => n.Name == nameof(Invoice.Products));
Assert.NotNull(navigation);
Assert.Equal(typeof(Product), navigation.TargetEntityType.ClrType);
var fk = navigation.ForeignKey;
Assert.Single(fk.Properties);
Assert.Equal("InvoiceId", fk.Properties.Single().Name);
}
}
}

=== FILE: F:\Members\Persistence.Test\Context\Implementation\ProductTableTests.cs ===

﻿using System.Linq;
using Autodesk.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using Persistence.Context.Implementation;
using Persistence.CreateStructure.Constants;
using Persistence.CreateStructure.Constants.ColumnType.Database;
using Xunit;
namespace Persistence.Context.Implementation.Tests
{
public class ProductTableTests
{
private static ModelBuilder CreateModelBuilder()
{
var conventions = new ConventionSet();
return new ModelBuilder(conventions);
}
[Fact]
public void Create_ConfiguresProductEntityCorrectly()
{
var modelBuilder = CreateModelBuilder();
var columnTypes = new SQLite();
ProductTable.Create(modelBuilder, columnTypes);
var model = modelBuilder.Model;
var productType = model.FindEntityType(typeof(Product));
Assert.NotNull(productType);
Assert.Equal(Database.Tables.Products, productType.GetTableName());
var idProp = productType.FindProperty(nameof(Product.Id));
Assert.Equal(columnTypes.TypeVar, idProp.GetColumnType());
Assert.False(idProp.IsNullable);
Assert.Equal(nameof(Product.Id), productType.FindPrimaryKey().Properties.Single().Name);
var nameProp = productType.FindProperty(nameof(Product.Name));
Assert.Equal(columnTypes.TypeVar, nameProp.GetColumnType());
Assert.False(nameProp.IsNullable);
Assert.Equal(100, nameProp.GetMaxLength());
var descProp = productType.FindProperty(nameof(Product.Description));
Assert.Equal(columnTypes.TypeVar150, descProp.GetColumnType());
Assert.True(descProp.IsNullable);
Assert.Equal(500, descProp.GetMaxLength());
var priceProp = productType.FindProperty(nameof(Product.Price));
Assert.Equal(columnTypes.TypeVar, priceProp.GetColumnType());
Assert.False(priceProp.IsNullable);
}
[Fact]
public void Create_SetsUpInvoiceForeignKeyAndIndex()
{
var modelBuilder = CreateModelBuilder();
var columnTypes = new SQLite();
ProductTable.Create(modelBuilder, columnTypes);
var model = modelBuilder.Model;
var productType = model.FindEntityType(typeof(Product));
var fkProp = productType.FindProperty("InvoiceId");
Assert.Equal(columnTypes.TypeVar, fkProp.GetColumnType());
Assert.False(fkProp.IsNullable);
var index = productType.GetIndexes()
.SingleOrDefault(ix => ix.Properties.Single().Name == "InvoiceId");
Assert.NotNull(index);
var fk = productType.GetForeignKeys()
.SingleOrDefault(f => f.PrincipalEntityType.ClrType == typeof(Invoice));
Assert.NotNull(fk);
Assert.Single(fk.Properties);
Assert.Equal("InvoiceId", fk.Properties.Single().Name);
Assert.Equal(DeleteBehavior.Cascade, fk.DeleteBehavior);
}
}
}

=== FILE: F:\Members\Persistence.Test\Context\Implementation\UnitOfWorkTests.cs ===

﻿using System;
using System.Threading.Tasks;
using Autodesk.Domain;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using Persistence.Context.Implementation;
using Persistence.CreateStructure.Constants.ColumnType.Database;
using Persistence.Context.Interface;
using Xunit;
namespace Persistence.Context.Implementation.Tests
{
public class UnitOfWorkTests : IDisposable
{
private readonly SqliteConnection _connection;
private readonly DataContext _context;
private readonly UnitOfWork _uow;
public UnitOfWorkTests()
{
_connection = new SqliteConnection("Data Source=:memory:");
_connection.Open();
var options = new DbContextOptionsBuilder<DataContext>()
.UseSqlite(_connection)
.Options;
_context = new DataContext(options, new SQLite());
_context.Database.EnsureCreated();
_uow = new UnitOfWork(_context);
}
public void Dispose()
{
_uow.Dispose();
_connection.Close();
}
[Fact]
public async Task CommitAsync_SavesChanges()
{
var user = new User(Guid.NewGuid().ToString())
{
Name     = "Test",
Lastname = "User",
Email    = "test.user@example.com"
};
_context.Set<User>().Add(user);
var savedCount = await _uow.CommitAsync();
Assert.Equal(1, savedCount);
var fetched = await _context.Set<User>().FindAsync(user.Id);
Assert.NotNull(fetched);
Assert.Equal("Test", fetched.Name);
}
[Fact]
public async Task BeginTransaction_CommitTransaction_PersistsWithinTransaction()
{
using var tx = await _uow.BeginTransactionAsync();
var user = new User(Guid.NewGuid().ToString())
{
Name     = "Trans",
Lastname = "Commit",
Email    = "trans.commit@example.com"
};
_context.Set<User>().Add(user);
await _uow.CommitTransactionAsync(tx);
var fetched = await _context.Set<User>().FindAsync(user.Id);
Assert.NotNull(fetched);
Assert.Equal("Trans", fetched.Name);
}
[Fact]
public void Dispose_DisposesContext()
{
_uow.Dispose();
Assert.Throws<ObjectDisposedException>(() => _ = _context.Set<User>());
}
}
}

=== FILE: F:\Members\Persistence.Test\Context\Implementation\UserTableTests.cs ===

﻿using System.Linq;
using Autodesk.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using Persistence.Context.Implementation;
using Persistence.CreateStructure.Constants;
using Persistence.CreateStructure.Constants.ColumnType.Database;
using Xunit;
namespace Persistence.Context.Implementation.Tests
{
public class UserTableTests
{
private static ModelBuilder CreateModelBuilder()
{
var conventions = new ConventionSet();
return new ModelBuilder(conventions);
}
[Fact]
public void Create_ConfiguresUserEntityCorrectly()
{
var modelBuilder = CreateModelBuilder();
var columnTypes = new SQLite();
UserTable.Create(modelBuilder, columnTypes);
var model = modelBuilder.Model;
var userEntity = model.FindEntityType(typeof(User));
Assert.NotNull(userEntity);
Assert.Equal(Database.Tables.Users, userEntity.GetTableName());
var idProp = userEntity.FindProperty(nameof(User.Id));
Assert.Equal(columnTypes.TypeVar, idProp.GetColumnType());
Assert.False(idProp.IsNullable);
var pk = userEntity.FindPrimaryKey();
Assert.Single(pk.Properties);
Assert.Equal(nameof(User.Id), pk.Properties[0].Name);
var emailProp = userEntity.FindProperty(nameof(User.Email));
Assert.Equal(columnTypes.TypeVar, emailProp.GetColumnType());
Assert.False(emailProp.IsNullable);
var activeProp = userEntity.FindProperty(nameof(User.Active));
Assert.Equal(columnTypes.TypeBool, activeProp.GetColumnType());
Assert.False(activeProp.IsNullable);
var emailIndex = userEntity.GetIndexes()
.SingleOrDefault(ix => ix.Properties.Single().Name == nameof(User.Email));
Assert.NotNull(emailIndex);
Assert.True(emailIndex.IsUnique);
}
}
}

=== FILE: F:\Members\Persistence.Test\CreateStruture\Constants\DatabaseConstantsTests.cs ===

﻿using Database = Persistence.CreateStructure.Constants.Database;
namespace Persistence.Test.CreateStructure.Constants
{
public class DatabaseConstantsTests
{
[Fact]
public void Tables_Users_ShouldBeUsers()
{
Assert.Equal("Users", Database.Tables.Users);
}
[Fact]
public void Index_IndexEmail_ShouldBeUniqueUsersEmail()
{
Assert.Equal("UC_Users_Email", Database.Index.IndexEmail);
}
}
}

=== FILE: F:\Members\Persistence.Test\CreateStruture\Constants\ColumnType\Database\SQLiteTest.cs ===

﻿using Persistence.CreateStructure.Constants.ColumnType.Database;
namespace Persistence.Test.CreateStructure.Constants.ColumnType.Database
{
public class SQLiteColumnTypesTests
{
private readonly SQLite _types = new SQLite();
[Fact]
public void Integer_Returns_INTEGER()
{
Assert.Equal("INTEGER", _types.Integer);
}
[Fact]
public void Long_Returns_INTEGER()
{
Assert.Equal("INTEGER", _types.Long);
}
[Fact]
public void TypeBool_Returns_INTEGER()
{
Assert.Equal("INTEGER", _types.TypeBool);
}
[Fact]
public void TypeTime_Returns_TEXT()
{
Assert.Equal("TEXT", _types.TypeTime);
}
[Theory]
[InlineData("TypeVar", "TEXT")]
[InlineData("TypeVar50", "TEXT")]
[InlineData("TypeVar150", "TEXT")]
[InlineData("TypeVar64", "TEXT")]
public void TypeVarieties_Returns_TEXT(string propertyName, string expected)
{
var actual = propertyName switch
{
nameof(_types.TypeVar) => _types.TypeVar,
nameof(_types.TypeVar50) => _types.TypeVar50,
nameof(_types.TypeVar150) => _types.TypeVar150,
nameof(_types.TypeVar64) => _types.TypeVar64,
_ => null
};
Assert.Equal(expected, actual);
}
[Fact]
public void TypeBlob_Returns_BLOB()
{
Assert.Equal("BLOB", _types.TypeBlob);
}
[Fact]
public void Strategy_Returns_SqliteAutoincrement()
{
Assert.Equal("Sqlite:Autoincrement", _types.Strategy);
}
[Fact]
public void SqlStrategy_IsTrue()
{
Assert.True((bool)(_types.SqlStrategy ?? false));
}
[Fact]
public void Name_IsEmptyString()
{
Assert.Equal(string.Empty, _types.Name);
}
[Fact]
public void Value_IsNull()
{
Assert.Null(_types.Value);
}
}
}

=== FILE: F:\Members\Persistence.Test\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\Members\Persistence.Test\obj\Debug\net8.0\Persistence.Test.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Persistence.Test")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+d1a21489347d706506ab087535da31b32b227c94")]
[assembly: System.Reflection.AssemblyProductAttribute("Persistence.Test")]
[assembly: System.Reflection.AssemblyTitleAttribute("Persistence.Test")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\Members\Persistence.Test\obj\Debug\net8.0\Persistence.Test.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::Xunit;

=== FILE: F:\Members\Persistence.Test\Repositories\ReadTests.cs ===

﻿using Autodesk.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.Context.Implementation;
using Persistence.Context.Interface;
using Persistence.CreateStructure.Constants.ColumnType.Database;
using Persistence.Repositories;
namespace Persistence.Test.Repositories
{
public class ReadTests
{
private class TestReadRepository : Repository<User>
{
public TestReadRepository(IUnitOfWork unitOfWork) : base(unitOfWork)
{
}
}
private static DbContextOptions<DbContext> CreateOptions() =>
new DbContextOptionsBuilder<DbContext>()
.UseInMemoryDatabase(Guid.NewGuid().ToString())
.Options;
private TestReadRepository CreateRepository(params User[] items)
{
var options = CreateOptions();
var context = new DataContext(options, new SQLite());
var unitOfWork = new UnitOfWork(context);
return new TestReadRepository(unitOfWork);
}
}
}

=== FILE: F:\Members\Persistence.Test\Repositories\RepositoryHelperTest.cs ===

﻿using Persistence.Repositories;
namespace Persistence.Test.Repositories
{
}

=== FILE: F:\Members\Persistence.Test\Repositories\RepositoryTest.cs ===

﻿using Autodesk.Domain;
using Microsoft.EntityFrameworkCore;
using Persistence.Context.Implementation;
using Persistence.Context.Interface;
using Persistence.CreateStructure.Constants.ColumnType.Database;
using Persistence.Repositories;
namespace Persistence.Test.Repositories
{
public class RepositoryTests
{
private class TestRepository : Read<User>
{
public TestRepository(IUnitOfWork unitOfWork) : base(unitOfWork)
{
}
}
private static DbContextOptions<DbContext> CreateOptions() =>
new DbContextOptionsBuilder<DbContext>()
.UseInMemoryDatabase(Guid.NewGuid().ToString())
.Options;
private static TestRepository CreateRepository(params User[] seed)
{
var options = CreateOptions();
var context = new DataContext(options, new SQLite());
var unitOfWork = new UnitOfWork(context);
return new TestRepository(unitOfWork);
}
}
}